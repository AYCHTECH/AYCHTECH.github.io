<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>오픈소스컨설팅 
기술 블로그
</title>
    <description>기술을 나눕니다. 함께 성장합니다.
Sharing Tech. Growing Together.
</description>
    <link>https://tech.osci.kr/</link>
    <atom:link href="https://tech.osci.kr/rss" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 28 Apr 2019 21:48:18 +0900</pubDate>
    <lastBuildDate>Sun, 28 Apr 2019 21:48:18 +0900</lastBuildDate>
    <generator>Jekyll v3.7.4</generator>
    
      <item>
        <title>오픈소스컨설팅, Atlassian meets DevOps and ITSM을 개최하다!</title>
        <description>&lt;p&gt;
 &lt;div class=&quot;conf-macro output-block&quot; data-hasbody=&quot;false&quot; data-macro-name=&quot;include&quot;&gt;
  안녕하세요!!!
  &lt;p&gt;
   오픈소스컨설팅 마케터 박현수입니다.
  &lt;/p&gt;
  &lt;p&gt;
   &lt;br/&gt;
  &lt;/p&gt;
  &lt;p&gt;
   지난 4월 19일, Atlassian 솔루션을 활용한 DevOps 및 ITSM Best Practice라는 주제로 오픈소스컨설팅이 주최하고, 아틀라시안이 후원하는 &quot;Atlassian meets DevOps and ITSM&quot; 행사가 열렸습니다.
  &lt;/p&gt;
  &lt;p&gt;
   큰 행사의 직후였음에도 불구하고, 정말 많은 고객 분들이 참석해주셔서 저희도 깜짝 놀랐어요!
  &lt;/p&gt;
  &lt;p&gt;
   성원에 진심으로 감사드리고, 앞으로도 더욱 노력하는 오픈소스컨설팅이 되겠습니다. 지켜봐주세요~
  &lt;/p&gt;
  &lt;p&gt;
   &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
    &lt;img src=&quot;/assets/images/71801513/0&quot;/&gt;
   &lt;/span&gt;
   &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
    &lt;img src=&quot;/assets/images/71801513/1&quot;/&gt;
   &lt;/span&gt;
  &lt;/p&gt;
  &lt;p&gt;
   &lt;span style=&quot;color: rgb(165,173,186);&quot;&gt;
    &lt;sup&gt;
     (왼쪽부터 오픈소스컨설팅 한진규 이사, 카카오 이호정 셀장, 아틀라시안 Scott Davis SA, 통역사, 오픈소스컨설팅 최지웅 부사장)
    &lt;/sup&gt;
   &lt;/span&gt;
  &lt;/p&gt;
  &lt;p&gt;
   &lt;br/&gt;
  &lt;/p&gt;
  &lt;p&gt;
   음 다소 긴 제목이지만, 이번 세미나의 주제는
   &lt;strong&gt;
    DevOps를 위한 Atlassian 사용 방법
   &lt;/strong&gt;
   정도로 풀어 이야기할 수 있겠네요.
  &lt;/p&gt;
  &lt;p&gt;
   이번 세미나에서 소개된 대부분의 내용은 기술보다는 운영자나 개발자의 마인드셋에 대해 강조하곤 했습니다. (DevOps의 시작은 역시 마음가짐이죠!)
  &lt;/p&gt;
  &lt;p&gt;
   이러한 내용은 오픈소스컨설팅의 CTO이자 정신적 지주를 맡고 계신 최지웅 부사장님의 키노트에서도 확인해볼 수 있었습니다.
  &lt;/p&gt;
  &lt;p&gt;
   &quot;사실 기술이 문제가 아니예요&quot;라는 부제를 달고,
   &lt;strong&gt;
    올바른 DevOps 수행을 위한 인프라 스트럭처 전략
   &lt;/strong&gt;
   을 소개해주셨습니다.
  &lt;/p&gt;
  &lt;h3 id=&quot;id-오픈소스컨설팅,AtlassianmeetsDevOpsandITSM을개최하다!-Atlassian을도입하기전,필수적인고민&quot;&gt;
   Atlassian을 도입하기 전, 필수적인 고민
  &lt;/h3&gt;
  &lt;p&gt;
   DevOps를 위한 도구로서 Atlassian을 도입하기 전, 하부 인프라 스트럭처에 대한 고민이 선행되어야 합니다.
  &lt;/p&gt;
  &lt;p&gt;
   IT 환경에서 중요한 것은 프로젝트에서 프로덕트로, 목표는 안정성에서 민첩성으로 점차 변화하고 있고 그러한 변화의 중심에 DevOps가 있다고 볼 수 있습니다.
  &lt;/p&gt;
  &lt;p&gt;
   Time to Value -  Time to Market : 혁신을 위해서는 작은 단위로 빠르게 배워야 합니다.  너무 많은 기능을 한꺼번에 넣으려 하는 것은 욕심인거죠.
  &lt;/p&gt;
  &lt;p&gt;
   현재의 IT 최고의 인프라스트럭처는 보다 단순하게 연결되어야 하고, &quot;새로운 기술&quot;을 보다 빠른 주기로 제공하는 모델입니다.
  &lt;/p&gt;
  &lt;p&gt;
   조금 기술적인 관점에서 이야기하자면, 애플리케이션을 분할 / 규격화 / 캡슐화해서 Microservice 형태로 개발하여 다양한 운영 환경에 지속적 배포 (Continuous Deploy) 결국, 분산된 환경에 최적화해야 합니다.
  &lt;/p&gt;
  &lt;p&gt;
   스케일 형태로,
   &lt;strong&gt;
    가용성을 위해 분산하는 클라우드 네이티브 환경을 구축하는거죠.
   &lt;/strong&gt;
  &lt;/p&gt;
  &lt;p&gt;
   클라우드 네이티브는 클라우드 컴퓨팅 모델의 장점을 모두 활용하는 애플리케이션을 개발하고 실행하기 위한 접근 방식입니다.
  &lt;/p&gt;
  &lt;p&gt;
   장점은 분산을 통한 유연성을 가져올 수 있지만, 운영 관점에서는 단점도 분명합니다. 애플리케이션도 분산시켜야 하기 때문이죠.  분산은 곧 인스턴스 증가, 인스턴스 증가는 곧 소프트웨어 비용의 증가를 불러옵니다.
  &lt;/p&gt;
  &lt;p&gt;
   이러한 클라우드 네이티브의 단점을 타개하기 위해서는,
   &lt;strong&gt;
    오픈소스를 도입하여 인프라를 만들어야 합니다.
   &lt;/strong&gt;
  &lt;/p&gt;
  &lt;p&gt;
   인프라 스트럭처 단에서는 개발된 코드가 유연하게 물흐르듯 연결된 에코시스템을 구축하고,  조직에서는 프로세스가 잘 조화되도록 알맞은 시스템을 제공해야 합니다.
  &lt;/p&gt;
  &lt;p&gt;
   &lt;br/&gt;
  &lt;/p&gt;
  &lt;h3 id=&quot;id-오픈소스컨설팅,AtlassianmeetsDevOpsandITSM을개최하다!-DevOps를위한최적의인프라찾기&quot;&gt;
   DevOps를 위한 최적의 인프라찾기
  &lt;/h3&gt;
  &lt;p&gt;
   DevOps로 가기위해서는 Cloud로의 이동은 필연인 것으로 보입니다.  그 근간은 MSA(Microservices Architecture)이며, DevOps + Cloud까지의 조합이 매우 중요합니다.
  &lt;/p&gt;
  &lt;p&gt;
   일부조직에서는 이미  Dev + Ops + Sec + CI/CD 까지 연결하여,  컨테이너용 애플리케이션 빌드가 최종 목표인 방향으로 흘러가고 있습니다.
  &lt;/p&gt;
  &lt;p&gt;
   Trigger Build &amp;amp; Deploy 구성을 살펴보면, 컨테이너에 한데 모아놓고 개발 및 배포에 관한 부분들에 대한 관리가 가능한 것으로 보입니다.
  &lt;/p&gt;
  &lt;p&gt;
   ITS부터 개발, 검증, 빌드하여 컨테이너를 통해 운영까지 보내는 프로세스를 물흐르듯이 연결시키는 것이 중요합니다. 이러한 부분은 직접 쿠버네티스를 사용하거나, PaaS를 통해 구성해낼 수 있습니다.
  &lt;/p&gt;
  &lt;p&gt;
   &lt;br/&gt;
  &lt;/p&gt;
  &lt;h3 id=&quot;id-오픈소스컨설팅,AtlassianmeetsDevOpsandITSM을개최하다!-엔터프라이즈DevOps까지확장하기&quot;&gt;
   엔터프라이즈 DevOps까지 확장하기
  &lt;/h3&gt;
  &lt;p&gt;
   따라서, 이러한 애플리케이션 구동 환경이 특정 인프라 환경으로 제한되어서는 안됩니다.
   &lt;strong&gt;
    결국 멀티 클라우드
   &lt;/strong&gt;
   에 대한 이야기까지 흘러오게 되는거죠.
  &lt;/p&gt;
  &lt;p&gt;
   프라이빗 및 퍼블릭 환경에서 다 똑같이 구성해야 합니다.  (이 때문에 컨테이너에 대한 부분을 고민하지 않을 수가 없습니다)
  &lt;/p&gt;
  &lt;p&gt;
   재작년부터 고민이 되는 것은, 어떻게 하면 DC를 클라우드로 연결시키는 작업을 할 수 있을까에 대한 부분입니다.  일부 게임사들은 이미 컨테이너를 도입하고 있습니다.
  &lt;/p&gt;
  &lt;p&gt;
   하이브리드 및 멀티 클라우드로 갔을 때 배포 대상은 굉장히 다양합니다. 직접 배포할 수도 있고, 지난주 발표한 것처럼 Google의 Anthos라는 프로그램을 이용할 수도 있습니다.
  &lt;/p&gt;
  &lt;p&gt;
   엔터프라이즈 DevOps까지 확장을 하고자 한다면, 비전, 전략 및 하부 인프라, 오토 메이션, 성능 보안 등 고민할 부분이 상당히 많죠. 기존 인프라 및 각 컴포넌트까지 총체적으로 고민해야 합니다.
  &lt;/p&gt;
  &lt;h3 id=&quot;id-오픈소스컨설팅,AtlassianmeetsDevOpsandITSM을개최하다!-결국에는사람!&quot;&gt;
   결국에는 사람!
  &lt;/h3&gt;
  &lt;p&gt;
   결국 결론은 다시 마인드셋으로 흘러옵니다.  기술력보다는 이를 어떻게 조합하는지가 중요합니다.
  &lt;/p&gt;
  &lt;p&gt;
   따라서, 팀 조직 및 서비스 및 운영 그리고
   &lt;strong&gt;
    결국에는 사람과의 커뮤니케이션
   &lt;/strong&gt;
   이 가장 중요하다는 것을 강조하는 키노트였습니다!
  &lt;/p&gt;
  &lt;p&gt;
   &lt;br/&gt;
  &lt;/p&gt;
  &lt;p&gt;
   키노트 다음으로는 Atlassian의 솔루션 엔지니어
   &lt;strong&gt;
    Scott Goh-Davis (이하, 스캇)의 &quot;ITSM in and Agile World&quot; 세션
   &lt;/strong&gt;
   이 이어졌습니다.
  &lt;/p&gt;
  &lt;h3 id=&quot;id-오픈소스컨설팅,AtlassianmeetsDevOpsandITSM을개최하다!-ForTEAMS!&quot;&gt;
   &lt;strong&gt;
    For TEAMS !
   &lt;/strong&gt;
  &lt;/h3&gt;
  &lt;p&gt;
   스캇은 오랜 경력동안 좋은 팀을 만나고 많은 경험 토대로, 그 경험을 공유하고 ITSM을 이룩하는 방법에 대해서 이야기해주었습니다.
  &lt;/p&gt;
  &lt;p&gt;
   ITSM과 관련해서는 1. 인스턴스 관리 2. 운영 관리 3. 몇가지 Metric에 대한 이야기를 했고, 마지막으로
   &lt;a class=&quot;external-link&quot; href=&quot;https://www.atlassian.com/whitepapers/itil4&quot; rel=&quot;nofollow&quot;&gt;
    ITSM 백서를 다운로드할 수 있는 링크
   &lt;/a&gt;
   를 공유했습니다.
  &lt;/p&gt;
  &lt;p&gt;
   &lt;br/&gt;
  &lt;/p&gt;
  &lt;p&gt;
   처음 스캇이 개발자로서 일하기 시작했을 때는, 운영에서 나오는 변경 사항을 그때그때 반영해야 했고 그것이 Final QA라고 주장했다고 합니다. 이런 상황은 30년이 지난 지금도 빈번하게 일어나고 있죠.
  &lt;/p&gt;
  &lt;p&gt;
   이를테면, 개발에 있어 Waterfall 방식을 고수하듯, 작은 변경 사항을 빠르게 반영하는 애자일 방법과는 다른 움직임도 아직 만연합니다.
  &lt;/p&gt;
  &lt;p&gt;
   하지만, 요새는 빠른 것뿐만 아니라 퀄리티를 함께 높이는 것이 중요해 DevOps를 넘어서 DevSecOps까지 나와있는 상황입니다.
  &lt;/p&gt;
  &lt;p&gt;
   DevOps와 ITSM이 많은 조직들이 적용하고자 하는 기조이긴 하지만, 개발쪽 변경사항이 더 빨리 자주 발생하면 Operation에서는 리스크라고 받아들일 수도 있습니다. 팀간 장벽이 한층 높아질 수도 있구요.
  &lt;/p&gt;
  &lt;p&gt;
   이러한 상황을 Atlassian은 팀과 문화와 일이 같은 방향으로 함께 움직인다는 미션을 통해 극복하고자 합니다. 각 팀에 맞는 방법과 문화를 개발한 후, 툴과 제품에 대해서 고려하는거죠.
  &lt;/p&gt;
  &lt;p&gt;
   &lt;br/&gt;
  &lt;/p&gt;
  &lt;h3 id=&quot;id-오픈소스컨설팅,AtlassianmeetsDevOpsandITSM을개최하다!-Let'sPLAY!&quot;&gt;
   Let's PLAY!
  &lt;/h3&gt;
  &lt;p&gt;
   사람과 문화 그리고 팀은 어떻게 개선할 수 있을까요? 대부분의 회사는 인사 고과를 받는데, 이러한 인사 고과에 대해서는 익숙하죠. 하지만, 팀에 대해서는 어떨까요?
  &lt;/p&gt;
  &lt;p&gt;
   아틀라시안이 지속적으로 고민하는 것은 팀워크를 어떻게 개선하는가입니다.  왜 팀마다 결과가 다를까요?  그러한 결과를 분석해보기 위해서, Atlassian은
   &lt;a class=&quot;external-link&quot; href=&quot;https://www.atlassian.com/team-playbook&quot; rel=&quot;nofollow&quot;&gt;
    Atlassian Team Playbook
   &lt;/a&gt;
   을 만들었습니다.  (링크를 통해 다운로드 받을 수 있어요!)
  &lt;/p&gt;
  &lt;p&gt;
   1.
   &lt;strong&gt;
    팀의 현황을 어떻게 측정하는가?
   &lt;/strong&gt;
   - 측정 후 개선 부분을 발견하는 첫단계입니다.
  &lt;/p&gt;
  &lt;p&gt;
   2.
   &lt;strong&gt;
    어떻게 개선할 것인가?
   &lt;/strong&gt;
   개선 아이디어를 도출하고 난 후 실천하는 것을 Atlassian은
   &lt;strong&gt;
    Play
   &lt;/strong&gt;
   라고 부릅니다.
  &lt;/p&gt;
  &lt;p&gt;
   아틀라시안은 이러한 팀플레이북을 매년 1-2번 수행하고 플레이를 통해 개선 및 실천해나가고 있습니다.  특정 아틀라시안 제품에 국한되어서만 사용되는 것은 아니고, 보편적으로 활용할 수 있다고 합니다.
  &lt;/p&gt;
  &lt;p&gt;
   &lt;br/&gt;
  &lt;/p&gt;
  &lt;p&gt;
   &lt;strong&gt;
    Genius for managing incidents - Opsgenie
   &lt;/strong&gt;
  &lt;/p&gt;
  &lt;p&gt;
   여러 팀이 가지고 있는 스킬을 어떻게 개선할 수 있을까요? ITSM 이나 애자일에 대해서도 어떻게 접근하고 실천할 수 있을까요?
  &lt;/p&gt;
  &lt;p&gt;
   모던 ITSM에 있어서 가장 이슈가 되는 것은 메이저한 인시던트에 대해서 어떻게 대처하는가 입니다.  인시던트 관리에서 가장 중요한 것은 평균 복구 시간이고,  MTR에서 가장 중요한 것은 반응 (Respond)입니다.
  &lt;/p&gt;
  &lt;p&gt;
   모니터링을 대부분 간과하곤하는데,  중간에 대응 과정에서 Opsgenie라는 제품을 사용해볼 것을 추천드립니다. Opsgenie는 모든 알림을 하나하나 보고, 알람을 봐야하는 적임자에게 전달 및 알림(Alert)을 하는 중간의 허브역할을 수행합니다.
  &lt;/p&gt;
  &lt;p&gt;
   복구는 JSD와 Statuspage를 통해 복구 및 처리 개선을 할 수 있겠습니다. Operation 뿐만 아니라 End user까지 전달될 수 있도록 말이죠.
  &lt;/p&gt;
  &lt;p&gt;
   중간과정에 필요한 Monitoring에서는 Amazon CloudWatch나 Docker 등 고객이 원하는 프로그램을 사용할 수 있습니다.
  &lt;/p&gt;
  &lt;p&gt;
   Opsgenie 이용하면 MTTR을 획기적으로 줄일수 있습니다. 하지만 무엇보다 중요한 것은
   &lt;strong&gt;
    인시턴트 발생 및 대처 이후의 Review
   &lt;/strong&gt;
   라고 스캇은 강조했습니다.
  &lt;/p&gt;
  &lt;p&gt;
   70%나 되는 비율로 인시던트 발생 이후의 대처를 형식적으로 리뷰하고 이 문서를 다른데 두거나 잊혀지고는 합니다. 하지만, 리뷰는 꼼꼼히, 반드시 놓쳐서는 안되는 중요한 과정입니다!
  &lt;/p&gt;
  &lt;p&gt;
   &lt;br/&gt;
  &lt;/p&gt;
  &lt;p&gt;
   1.팀플레이북을 통해 시작해라
  &lt;/p&gt;
  &lt;p&gt;
   2. 전통적인 R&amp;amp;R에 대해 의문을 제기해라.
  &lt;/p&gt;
  &lt;p&gt;
   3. 자동화하라! (Automate with opsgenie)
  &lt;/p&gt;
  &lt;p&gt;
   4. 계속해서 실험하고 적용할 것
  &lt;/p&gt;
  &lt;p&gt;
   &lt;br/&gt;
  &lt;/p&gt;
  &lt;p&gt;
   이후에는 오픈소스컨설팅 한진규 이사님과 카카오 이호정셀장님의 세션이 이어졌습니다.
  &lt;/p&gt;
  &lt;p&gt;
   한진규 이사님은
   &lt;strong&gt;
    &quot;DevOps 문화 구축하기&quot;
   &lt;/strong&gt;
   를 주제로 Atlassian 제품을 활용한 DevOps구성도를 소개해주셨는데요,
  &lt;/p&gt;
  &lt;p&gt;
   아래 그림에서 보듯 Jira를 중심으로 Confluence, Jira Service Desk, Bitbucket 등 도구를 통해 DevOps를 쉽고 간편하게 구축할 수 있습니다.
  &lt;/p&gt;
  &lt;p&gt;
   &lt;br/&gt;
  &lt;/p&gt;
  &lt;p&gt;
   &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
    &lt;img src=&quot;/assets/images/71801513/2&quot;/&gt;
   &lt;/span&gt;
  &lt;/p&gt;
  &lt;p&gt;
   &lt;br/&gt;
  &lt;/p&gt;
  &lt;p&gt;
   아울러, 이전 세션들처럼 DevOps를 위해서 결국에는 &quot;사람&quot;과의 소통이 가장 중요하다고 강조하며,
   &lt;strong&gt;
    &lt;a class=&quot;external-link&quot; href=&quot;https://www.slideshare.net/BrianHan21/devops-134656677?fbclid=IwAR3DCY-AnjafeAU8RYnjgJsFTe9WTF1mQfP1DaseD3MQIaVQXqhTIls1X7c&quot; rel=&quot;nofollow&quot;&gt;
     DevOps 시뮬레이션
    &lt;/a&gt;
   &lt;/strong&gt;
   을 소개했는데요.
  &lt;/p&gt;
  &lt;p&gt;
   DevOps 효과를 직접 경험하고 체득하면서 구성원 한 명 한 명이 DevOps의 실행자가 될 수 있도록 변화시키는 획기적인 시뮬레이션입니다. (위 링크를 통해 DevOps 시뮬레이션을 만나보세요!)
  &lt;/p&gt;
  &lt;p&gt;
   &lt;br/&gt;
  &lt;/p&gt;
  &lt;p&gt;
   KaKao는 Atlassian을 오래 전부터 선구적으로 사용하여, 우리나라에서 DevOps 및 ITSM을 잘 실천하고 있는 회사로 유명하죠.
  &lt;/p&gt;
  &lt;p&gt;
   이호정 셀장님의 &quot;Kakao meets Jira&quot;에서는 말그대로 DevOps의 핵심 툴인 Jira와 kakao가 만난 이야기입니다.
  &lt;/p&gt;
  &lt;p&gt;
   이호정 셀장님이 귀한 시간을 내주셔서 카카오에서 Jira를 어떻게 사용하고 있는지 알아보고, ITSM을 달성하는 방법에 대해서 생생하게 전달받을 수 있었습니다.
  &lt;/p&gt;
  &lt;p&gt;
   특히, 카카오에서 사용 중인 주요 Add-on에 대해서 친절하게 공개해주셔서 많은 고객분들께 참고가 되셨을거라고 생각합니다.
  &lt;/p&gt;
  &lt;p&gt;
   아울러 카카오에서의 업무 요청 처리 예시 프로세스는 마케터인 저한테도 많은 도움이 되었네요
   &lt;img src=&quot;/assets/images/71801513/3&quot;/&gt;
   좋은 발표와 공유에 진심으로 감사드립니다!
  &lt;/p&gt;
  &lt;p&gt;
   모든 발표 내용은
   &lt;a class=&quot;external-link&quot; href=&quot;http://www.osci.kr/board/board.php?b_id=newsletter&amp;amp;cmd=view&amp;amp;num=15&amp;amp;page=0&amp;amp;cate=&amp;amp;eq1=&amp;amp;eq2=&amp;amp;eq3=&amp;amp;eq4=&amp;amp;eq5=&amp;amp;st=&amp;amp;sk=&quot; rel=&quot;nofollow&quot;&gt;
    여기 링크
   &lt;/a&gt;
   에서 확인하실 수 있답니다.
  &lt;/p&gt;
  &lt;p&gt;
   &lt;br/&gt;
  &lt;/p&gt;
  &lt;p&gt;
   세션이 다 끝나고 난 후에는 시원한 맥주와 함께 네트워킹 타임을 가졌답니다!
  &lt;/p&gt;
  &lt;p&gt;
   아틀라시안 본사 직원, 오픈소스컨설팅의 CTO, 실제로 아틀라시안을 도입하신 고객사 셀장님 등 다양한 연사자 분들과 함께 하는 자리여서 많은 분들과 함께 어우러질 수 있어 더욱 좋았습니다!
  &lt;/p&gt;
  &lt;p&gt;
   앞으로도 이런 행사 많이 준비해서 고객 여러분께 더욱 도움이 될 수 있는 오픈소스컨설팅이 되겠습니다.
  &lt;/p&gt;
  &lt;p&gt;
   &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
    &lt;img src=&quot;/assets/images/71801513/4&quot;/&gt;
   &lt;/span&gt;
   &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
    &lt;img src=&quot;/assets/images/71801513/5&quot;/&gt;
   &lt;/span&gt;
  &lt;/p&gt;
  &lt;p&gt;
   &lt;br/&gt;
  &lt;/p&gt;
  &lt;p&gt;
   &lt;br/&gt;
  &lt;/p&gt;
  &lt;p&gt;
   &lt;br/&gt;
  &lt;/p&gt;
  &lt;p&gt;
   &lt;br/&gt;
  &lt;/p&gt;
  &lt;p&gt;
   &lt;br/&gt;
  &lt;/p&gt;
  &lt;p&gt;
   &lt;br/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/p&gt;</description>
        <pubDate>Thu, 25 Apr 2019 00:00:00 +0900</pubDate>
        <link>https://tech.osci.kr/2019/04/25/71801513/</link>
        <guid isPermaLink="true">https://tech.osci.kr/2019/04/25/71801513/</guid>
        
        <category>atlassian</category>
        
        <category>itsm</category>
        
        <category>devops</category>
        
        
      </item>
    
      <item>
        <title>2019년 4월 Atlassian User Group Meetup에 다녀오다!</title>
        <description>&lt;p&gt;
 안녕하세요? 오픈소스컨설팅입니다.
&lt;/p&gt;
&lt;p&gt;
 오픈소스컨설팅은 Atlassian User Group(AUG) 의 공식 스폰서로 활동하고 있습니다.
&lt;/p&gt;
&lt;p&gt;
 (많이들 오세요! 몸만 오시면 됩니다!   )
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;strong&gt;
  4월 22일 개최된 26번째 아틀라시안 유저 그룹 밋업
 &lt;/strong&gt;
 에 오픈소스컨설팅이 직접 다녀왔습니다!
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
  &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
   &lt;img src=&quot;/assets/images/71800553/0&quot;/&gt;
  &lt;/span&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 이번  밋업에서는 지난 4월 9일-11일, 라스베가스에서 개최된 역대 최대 규모의 아틀라시안 유저 컨퍼런스인
&lt;/p&gt;
&lt;p&gt;
 &lt;strong&gt;
  &quot;Atlassian Summit 2019&quot;
 &lt;/strong&gt;
 &lt;span&gt;
 &lt;/span&gt;
 에 대한 이야기를 나누었습니다.
&lt;/p&gt;
&lt;p&gt;
 오픈소스컨설팅의 한진규 이사님과 AUG의 공동 리더인 디프로그웍스의 신철민 대표님의 발표가 있었습니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;h1 id='id-2019년4월AtlassianUserGroupMeetup에다녀오다!-&quot;아틀라시안서밋2019참석기by한진규이사님&quot;'&gt;
 &quot;아틀라시안 서밋 2019 참석기 by 한진규 이사님&quot;
&lt;/h1&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
  &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
   &lt;img src=&quot;/assets/images/71800553/1&quot;/&gt;
  &lt;/span&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;h3 id=&quot;id-2019년4월AtlassianUserGroupMeetup에다녀오다!-AtlassianSummit?&quot;&gt;
 Atlassian Summit?
&lt;/h3&gt;
&lt;p&gt;
 3일 동안 진행되는 아틀라시안 서밋, 올해 행사에는 약 5,000여명이 참석하였다고 합니다.
&lt;/p&gt;
&lt;p&gt;
 본 행사가 시작하기 전에 스폰서와 파트너를 위한 전야제가 진행되고
&lt;/p&gt;
&lt;p&gt;
 매일 오전 클라우드와 데이터센터, 서버 등 제품별 업데이트 키노트 세션이 진행된다고 합니다.
&lt;/p&gt;
&lt;p&gt;
 스폰서들이 본인들의 제품을 홍보하는 Expo 부스도 마련되어 있습니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 오픈소스컨설팅에서도 한국 파트너사 중 최초로 본 행사의 스폰서로 참여하였는데요,
&lt;/p&gt;
&lt;p&gt;
 유용한 아틀라시안 애드온 제품과 한글을 활용한 기프트로 많은 인기를 끌었습니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
  &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
   &lt;img src=&quot;/assets/images/71800553/2&quot;/&gt;
  &lt;/span&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 서밋 기간 동안 아틀라시안 직원들이 직접 개발에 참여하는 해커톤 문화인 'Ship it' 행사도 진행되는데
&lt;/p&gt;
&lt;p&gt;
 여기서 개발된 제품이 실제 아틀라시안 제품으로 출시되기도 한다고 합니다.
&lt;/p&gt;
&lt;p&gt;
 마지막날은 Bash라는 네트워킹 파티가 진행됩니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;h3 id=&quot;id-2019년4월AtlassianUserGroupMeetup에다녀오다!-ModernIncidentManagement-Opsgenie&quot;&gt;
 Modern Incident Management - Opsgenie
&lt;/h3&gt;
&lt;p&gt;
 서밋이 개막한 첫 날, 아틀라시안의 주요 인사들의 세션이 진행되었습니다.
&lt;/p&gt;
&lt;p&gt;
 그 중  CEO이자  Co-founder인 Scott Farquhar - Digital Transformation를 주제로 키노트를 하였는데요,
&lt;/p&gt;
&lt;p&gt;
 이 발표에서
 &lt;span&gt;
 &lt;/span&gt;
 &lt;strong&gt;
  Opsgenie(옵스지니)
 &lt;/strong&gt;
 에 대한 내용이 심도있게 다루어 졌다고 합니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 인시던트나 장애를 잘 관리한다는 것은 내부, 외부 고객과 신뢰를 쌓는 과정으로,
&lt;/p&gt;
&lt;p&gt;
 인시던트가 발생했을 때 얼마나 빨리 원인을 찾고, 해결하는지가 매우 중요한 요소가 되고 있습니다.
&lt;/p&gt;
&lt;p&gt;
 이를 잘 관리하고 운영하는데 아틀라시안 Opsgenie와 Statuspage 제품이 도움이 된다고 합니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;strong&gt;
  Atlassian Cloud Usage
 &lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
 아틀라시안 제품 중 클라우드 버전을 사용하는 고객이 약 100,000개 기업이라고 합니다.
&lt;/p&gt;
&lt;p&gt;
 전체 아틀라시안 고객이 약 125,000개임을 감안하면, 클라우드를 사용하는 고객의 비율이 상당히 높다는 것을 알 수 있죠.
&lt;/p&gt;
&lt;p&gt;
 현재 아틀라시안 제품을 신규로 도입할 때 90%가 클라우드로 시작한다고 합니다.
&lt;/p&gt;
&lt;p&gt;
 클라우드 제품 자체의 기능이 우수하고, 차세대 프로젝트가 생기면서 지라 어드민에 대한 부담을 줄일 수 있기 때문에
&lt;/p&gt;
&lt;p&gt;
 클라우드에 대한 고객들 선호가 높아지고 있다고 합니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 이번에 아틀라시안에서 새롭게 발표한 '클라우드 프리미엄' 서비스는
&lt;/p&gt;
&lt;p&gt;
 SLA 99.9% 의 가용성을 보장하고, 언리미티드 스토리지 제공, 프리미엄 서포트 24*7를 지원한다고 합니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
  &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
   &lt;img src=&quot;/assets/images/71800553/3&quot;/&gt;
  &lt;/span&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id='id-2019년4월AtlassianUserGroupMeetup에다녀오다!-&quot;아틀라시안서밋2019참석기by신철민대표님&quot;'&gt;
 &quot;아틀라시안 서밋 2019 참석기 by 신철민 대표님&quot;
&lt;/h1&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
  &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
   &lt;img src=&quot;/assets/images/71800553/4&quot;/&gt;
  &lt;/span&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 아틀라시안 유저 그룹 공동 리더인 신철민 대표님께서는 서밋의 커뮤니티 워크샵에 대한 리뷰를 해주셨습니다.
&lt;/p&gt;
&lt;p&gt;
 참고로 Atlassian User Group의 명칭이 Atlassian Community 로 명칭이 바뀐다고 합니다.
&lt;/p&gt;
&lt;p&gt;
 AUG Seminar/Meetup 의 명칭도 Atlassian Community Event 바뀔 예정이라고 합니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;h3 id=&quot;id-2019년4월AtlassianUserGroupMeetup에다녀오다!-ThePowerofHabit&quot;&gt;
 The Power of Habit
&lt;/h3&gt;
&lt;p&gt;
 아틀라시안 커뮤니티 워크샵에서는 '습관의 힘'이라는 책의 내용을 바탕으로 웰커밍 메시지가 진행되었다고 합니다.
&lt;/p&gt;
&lt;p&gt;
 책 '습관의 힘'은 습관을 어떠한 메커니즘으로 만드는지에 대한 내용이 담겨져 있는데요,
&lt;/p&gt;
&lt;p&gt;
 습관을 만들기 위해서는 신호가 발생할 때 반복 행동을 하고 이에 대한 보상 행동을 주라고 합니다.
&lt;/p&gt;
&lt;p&gt;
 이를 3개월동안 반복하면 좋은 습관이 자연스럽게 생긴다고 합니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 실제로 신 대표님께서는 이 메커니즘을 통해 매일 메모를 하는 습관을 길렀다고 합니다.
&lt;/p&gt;
&lt;p&gt;
 매일 아침 기상하면(신호) 의자에 앉아 메모장을 펼치고(반복 행동), 세줄만이라도 전날의 행동을 간단히 기록한다고 합니다.
&lt;/p&gt;
&lt;p&gt;
 현재 이 일기장이 5권이나 된다고 하네요. 메모만 봐도 그때를 바로 회상할 수 있고 기억력이 좋아졌다고 합니다.
&lt;/p&gt;
&lt;p&gt;
 좋은 습관을 길르는 것은 생각보다 어렵지 않고, 습관이 한 번 길러지면 이를 빼먹었을 때 인지 부조화 같은 현상이 일어날 정도로 체화된다고 합니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;h3 id=&quot;id-2019년4월AtlassianUserGroupMeetup에다녀오다!-TheAlignmentChallenge-JiraAlign&quot;&gt;
 The Alignment Challenge - JiraAlign
&lt;/h3&gt;
&lt;p&gt;
 아틀라시안이 최근 애자일 크래프트(AgileCraft)라는 회사를 인수하였는데요,
&lt;/p&gt;
&lt;p&gt;
 애자일 크래프트는 애자일 팀들을 비즈니스 전체로 연결해 관리자들이 프로젝트 진척 상황과 병목 지점을 전체적으로 볼 수 있게 하는 애플리케이션입니다.
&lt;/p&gt;
&lt;p&gt;
 애자일 크래프트는 가트너 매직 쿼드런트(2018)에 &amp;lt;Enterprise Agile Planning Tools&amp;gt; 분야에서 Visionaries 그룹에 속한 기업이기도 합니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 이러한 인수는 비즈니스 목적(매출)과 기술을 연결하려는 수요에 의해 발생된 것이라고 볼 수 있는데요,
&lt;/p&gt;
&lt;p&gt;
 실제로 회사의 KPI와 Jira 이슈를 연결할 수 있냐는 고객들의 문의가 많이 있다고 합니다.
&lt;/p&gt;
&lt;p&gt;
 아틀라시안은 60명 정도의 별도 팀을 구성하였으며 JiraAlign 이라는 이름으로 제품을 판매할 예정이라고 합니다.
&lt;/p&gt;
&lt;p&gt;
 JiraAlign을 활용하면 회사 목표와 비용 목표 등을 Jira 이슈와 연결하여 확인하고 트래킹, 분석하는데 큰 도움이 될 것 같습니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
  &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
   &lt;img src=&quot;/assets/images/71800553/5&quot;/&gt;
  &lt;/span&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 (신철민 대표님께서 아틀라시안 서밋해서 받아오신 기프트도 무료 나눔 해주셨어요! &amp;gt;_&amp;lt; )
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 아틀라시안 서밋은 단순히 신기술과 제품 업데이트에 대한 내용 뿐만 아니라
&lt;/p&gt;
&lt;p&gt;
 팀과 협업 문화, 건강한 조직, 오픈마인드 등 긍정적인 메시지를 함께 나누는 건설적인 행사로 느껴졌습니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 서밋의 주요 세션은 아래 사이트에서 직접 확인하실 수 있습니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;a class=&quot;external-link&quot; href=&quot;https://www.atlassian.com/company/events/summit&quot; rel=&quot;nofollow&quot; style=&quot;text-decoration: none;&quot;&gt;
  https://www.atlassian.com/company/events/summit
 &lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 다음 아틀라시안 커뮤니티 이벤트는 5월 15일 개최된다고 하니, 관심 있는 분들의 많은 참여 부탁 드립니다!
&lt;/p&gt;
&lt;p&gt;
 &lt;a class=&quot;external-link&quot; href=&quot;http://confluence.augkorea.org/pages/viewpage.action?pageId=19630138&quot; rel=&quot;nofollow&quot; style=&quot;text-decoration: none;&quot;&gt;
  AUG Seoul MeetUp #27 2019/05/15(Wed) 19:30 ~ 21:00
 &lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 감사합니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;</description>
        <pubDate>Tue, 23 Apr 2019 00:00:00 +0900</pubDate>
        <link>https://tech.osci.kr/2019/04/23/71800553/</link>
        <guid isPermaLink="true">https://tech.osci.kr/2019/04/23/71800553/</guid>
        
        <category>atlassian</category>
        
        <category>aug</category>
        
        <category>아틀라시안커뮤니티</category>
        
        <category>아틀라시안유저그룹</category>
        
        <category>summit</category>
        
        
      </item>
    
      <item>
        <title>Kubernetes Volume 을 공부해보자!</title>
        <description>&lt;div class=&quot;conf-macro output-block&quot; data-hasbody=&quot;true&quot; data-macro-name=&quot;markdown&quot;&gt;
 &lt;hr/&gt;
 &lt;p&gt;
  이번 포스팅은 Kubernetes Korea Group의 Kubernetes Architecture Study 모임에서 스터디 후, 발표 진행한 내용입니다.
  &lt;br/&gt;
  Link :
  &lt;a href=&quot;https://github.com/grepsean/k8skr-study-architecture&quot;&gt;
   k8skr-study-architecture Github
  &lt;/a&gt;
 &lt;/p&gt;
 &lt;hr/&gt;
 &lt;h1&gt;
  &lt;a href=&quot;#kubernetes-volume&quot; id=&quot;kubernetes-volume&quot;&gt;
   &lt;strong&gt;
    Kubernetes Volume
   &lt;/strong&gt;
  &lt;/a&gt;
 &lt;/h1&gt;
 &lt;hr/&gt;
 &lt;p&gt;
  Kubernetes 에서 Volume 으로 사용 가능한 유형은 아래와 같습니다.
 &lt;/p&gt;
 &lt;blockquote&gt;
  &lt;ul&gt;
   &lt;li&gt;
    emptyDir
   &lt;/li&gt;
   &lt;li&gt;
    hostPath
   &lt;/li&gt;
   &lt;li&gt;
    gitRepo
   &lt;/li&gt;
   &lt;li&gt;
    Openstack Cinder
   &lt;/li&gt;
   &lt;li&gt;
    cephfs
   &lt;/li&gt;
   &lt;li&gt;
    iscsi
   &lt;/li&gt;
   &lt;li&gt;
    rbd
   &lt;/li&gt;
   &lt;li&gt;
    그 외 Public Cloud Storage
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/blockquote&gt;
 &lt;p&gt;
  이처럼 Kubernetes 에서는 다양한 Volume 을 지원합니다.
  &lt;br/&gt;
  책(Kubernetes In Action)에 소개된 emptyDir / hostPath / gitRepo 에 대해 예제와 함께 어떤식으로 사용이 되는지 확인 해보겠습니다.
  &lt;br/&gt;
  추가로 책에는 없는 nfs / cephfs / rbd 를 Kubernetes Volume 으로 사용 해보겠습니다.
 &lt;/p&gt;
 &lt;h1&gt;
  &lt;a href=&quot;#emptydir&quot; id=&quot;emptydir&quot;&gt;
   &lt;strong&gt;
    emptyDir
   &lt;/strong&gt;
  &lt;/a&gt;
 &lt;/h1&gt;
 &lt;hr/&gt;
 &lt;p&gt;
  emptyDir 은 Pod 과 함께 생성되고, 삭제되는 임시 Volume 입니다.
  &lt;br/&gt;
  컨테이너 단위로 관리되는 것이 아니고 Pod 단위로 관리가 되기 때문에 Pod 내 컨테이너가 Error 로 인해 삭제 혹은 재시작이 되더라도 emptyDir 은 삭제가 되지 않고 계속 사용이 가능합니다.
 &lt;/p&gt;
 &lt;h2&gt;
  &lt;a href=&quot;#emptydir-예제&quot; id=&quot;emptydir-예제&quot;&gt;
   &lt;strong&gt;
    emptyDir 예제
   &lt;/strong&gt;
  &lt;/a&gt;
 &lt;/h2&gt;
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# cat fortuneloop.sh
#!/bin/bash
trap &quot;exit&quot; SIGINT
mkdir /var/htdocs
while :
do
    echo $(date) Writing fortune to /var/htdocs/index.html
    /usr/games/fortune &amp;gt; /var/htdocs/index.html
    sleep 10
done
&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;
  위 스크립트를 이용해서 Docker 이미지를 Build 합니다.
 &lt;/p&gt;
 &lt;pre&gt;&lt;code class=&quot;language-Dockerfile&quot;&gt;FROM ubuntu:latest
RUN apt-get update ; apt-get -y install fortune
ADD fortuneloop.sh /bin/fortuneloop.sh
ENTRYPOINT /bin/fortuneloop.sh
&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;
  Docker Image 를 Build 합니다.
 &lt;/p&gt;
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# docker build -t han0495/fortune .
Sending build context to Docker daemon  3.072kB
Step 1/4 : FROM ubuntu:latest
 ---&amp;gt; 94e814e2efa8
Step 2/4 : RUN apt-get update ; apt-get -y install fortune
 ---&amp;gt; Running in 3c8f694a68af

&amp;lt; 중 략 &amp;gt;

Removing intermediate container 3c8f694a68af
 ---&amp;gt; 1e8b262e7bdf
Step 3/4 : ADD fortuneloop.sh /bin/fortuneloop.sh
 ---&amp;gt; 3eee41108b5b
Step 4/4 : ENTRYPOINT /bin/fortuneloop.sh
 ---&amp;gt; Running in 082ee707cdf1
Removing intermediate container 082ee707cdf1
 ---&amp;gt; 58d2d430a7b4
Successfully built 58d2d430a7b4
Successfully tagged han0495/fortune:latest
[root@m01 inside]#
&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;
  아래와 같은 yaml 파일을 작성합니다.
 &lt;/p&gt;
 &lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;# cat fortune.yml
apiVersion: v1
kind: Pod
metadata:
  name: fortune
spec:
  containers:
  - image: han0495/fortune
    name: html-generator
    volumeMounts:
    - name: html
      mountPath: /var/htdocs
  - image: nginx:alpine
    name: web-server
    volumeMounts:
    - name: html
      mountPath: /usr/share/nginx/html
      readOnly: true
    ports:
    - containerPort: 80
      protocol: TCP
  volumes:
  - name: html
    emptyDir: {}
&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;
  작성한 yaml 파일을 이용하여, Pod을 생성합니다.
 &lt;/p&gt;
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;[root@m01 fortune]# kubectl get po
NAME                              READY   STATUS    RESTARTS   AGE
fortune                           2/2     Running   0          5m10s
load-generator-557649ddcd-nl6js   1/1     Running   1          6d18h
php-apache-9bd5c887f-nm4h5        1/1     Running   0          6d18h
tomcat-f94554bb9-gkhpz            1/1     Running   0          7d
web-7d77974d4c-gd76n              1/1     Running   0          7d2h
 
[root@m01 fortune]# kubectl describe po fortune
Name:               fortune
Namespace:          default
Priority:           0
PriorityClassName:  &amp;lt;none&amp;gt;
Node:               w03/192.168.13.16
Start Time:         Mon, 08 Apr 2019 17:41:40 +0900
Labels:             &amp;lt;none&amp;gt;
Annotations:        &amp;lt;none&amp;gt;
Status:             Running
IP:                 10.233.89.8
Containers:
  html-generator:
    Container ID:   docker://e25bc8c3b94a2a02edc8b983eb77214a4644a99a3931c1f96f131819060cc676
    Image:          han0495/fortune
    Image ID:       docker-pullable://han0495/fortune@sha256:63d5786a84e67dcd5eec70d516d5788c8e3c3a90d23f23bec1825f7a4526bb00
    Port:           &amp;lt;none&amp;gt;
    Host Port:      &amp;lt;none&amp;gt;
    State:          Running
      Started:      Mon, 08 Apr 2019 17:42:01 +0900
    Ready:          True
    Restart Count:  0
    Environment:    &amp;lt;none&amp;gt;
    Mounts:
      /var/htdocs from html (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from default-token-vt6hm (ro)
  web-server:
    Container ID:   docker://ed7c2fd5adbb919fde6ed01d1a80fa74df689d1aa99bc8d883b1b68ed918dd09
    Image:          nginx:alpine
    Image ID:       docker-pullable://nginx@sha256:d5e177fed5e4f264e55b19b84bdc494078a06775612a4f60963f296756ea83aa
    Port:           80/TCP
    Host Port:      0/TCP
    State:          Running
      Started:      Mon, 08 Apr 2019 17:42:09 +0900
    Ready:          True
    Restart Count:  0
    Environment:    &amp;lt;none&amp;gt;
    Mounts:
      /usr/share/nginx/html from html (ro)
      /var/run/secrets/kubernetes.io/serviceaccount from default-token-vt6hm (ro)
Conditions:
  Type              Status
  Initialized       True
  Ready             True
  ContainersReady   True
  PodScheduled      True
Volumes:
  html:
    Type:    EmptyDir (a temporary directory that shares a pod``s lifetime)
    Medium:
  default-token-vt6hm:
    Type:        Secret (a volume populated by a Secret)
    SecretName:  default-token-vt6hm
    Optional:    false
QoS Class:       BestEffort
Node-Selectors:  &amp;lt;none&amp;gt;
Tolerations:     node.kubernetes.io/not-ready:NoExecute for 300s
                 node.kubernetes.io/unreachable:NoExecute for 300s
Events:
  Type    Reason     Age    From               Message
  ----    ------     ----   ----               -------
  Normal  Scheduled  5m26s  default-scheduler  Successfully assigned default/fortune to w03
  Normal  Pulling    5m23s  kubelet, w03       pulling image &quot;han0495/fortune&quot;
  Normal  Pulled     5m5s   kubelet, w03       Successfully pulled image &quot;han0495/fortune&quot;
  Normal  Created    5m5s   kubelet, w03       Created container
  Normal  Started    5m4s   kubelet, w03       Started container
  Normal  Pulling    5m4s   kubelet, w03       pulling image &quot;nginx:alpine&quot;
  Normal  Pulled     4m56s  kubelet, w03       Successfully pulled image &quot;nginx:alpine&quot;
  Normal  Created    4m56s  kubelet, w03       Created container
  Normal  Started    4m56s  kubelet, w03       Started container
[root@m01 fortune]#
&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;
  실제로 파일이 Docker 이미지에 넣은 스크립트가 동작하는지 확인합니다.
 &lt;/p&gt;
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;[root@m01 fortune]# kubectl exec -ti fortune /bin/bash
Defaulting container name to html-generator.
Use 'kubectl describe pod/fortune -n default' to see all of the containers in this pod.
root@fortune:/#
root@fortune:/# cd /var
root@fortune:/var# cd htdocs/
root@fortune:/var/htdocs# ls
index.html
root@fortune:/var/htdocs#
root@fortune:/var/htdocs# cat index.html
You are standing on my toes.
root@fortune:/var/htdocs# while true
&amp;gt; do
&amp;gt; date
&amp;gt; cat index.html
&amp;gt; sleep 10
&amp;gt; done
Mon Apr  8 08:48:43 UTC 2019
Artistic ventures highlighted.  Rob a museum.
Mon Apr  8 08:48:53 UTC 2019
Never reveal your best argument.
Mon Apr  8 08:49:03 UTC 2019
You can create your own opportunities this week.  Blackmail a senior executive.
Mon Apr  8 08:49:13 UTC 2019
You have a strong appeal for members of the opposite sex.
Mon Apr  8 08:49:23 UTC 2019
You will be reincarnated as a toad; and you will be much happier.
^C
root@fortune:/var/htdocs#
&lt;/code&gt;&lt;/pre&gt;
 &lt;h1&gt;
  &lt;a href=&quot;#hostpath&quot; id=&quot;hostpath&quot;&gt;
   &lt;strong&gt;
    hostPath
   &lt;/strong&gt;
  &lt;/a&gt;
 &lt;/h1&gt;
 &lt;hr/&gt;
 &lt;p&gt;
  hostPath는 로컬 디스크의 경로를 Pod 에 Mount 해서 사용하는 Volume 방식입니다.
  &lt;br/&gt;
  Docker 에서 -v 옵션으로 Volume 을 연결하는 것과 동일하다고 생각하면 됩니다.
 &lt;/p&gt;
 &lt;h2&gt;
  &lt;a href=&quot;#hostpath-예제&quot; id=&quot;hostpath-예제&quot;&gt;
   &lt;strong&gt;
    hostPath 예제
   &lt;/strong&gt;
  &lt;/a&gt;
 &lt;/h2&gt;
 &lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;# cat hostpath-pod.yml
apiVersion: v1
kind: Pod
metadata:
  name: hostpath
spec:
  containers:
  - name: nginx
    image: nginx
    volumeMounts:
    - name: volumepath
      mountPath: /usr/share/nginx/html
  volumes:
  - name : volumepath
    hostPath:
      path: /imsi
      type: Directory
&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;
  nginx 의 index Directory 에 /imsi 라는 로컬 디스크 경로를 Mount 합니다.
  &lt;br/&gt;
  이후 Pod 을 해당 yaml 을 이용해서 구동합니다.
 &lt;/p&gt;
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;[root@m01 pod-example]# kubectl exec -ti hostpath -- /bin/bash
root@hostpath:/#
root@hostpath:/# ls
bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var
root@hostpath:/#
root@hostpath:/# cd /usr
root@hostpath:/usr# cd share/
root@hostpath:/usr/share# cd nginx/
root@hostpath:/usr/share/nginx# cd html/
root@hostpath:/usr/share/nginx/html# ls
root@hostpath:/usr/share/nginx/html#
root@hostpath:/usr/share/nginx/html# touch test
root@hostpath:/usr/share/nginx/html# exit
exit
[root@m01 pod-example]#
&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;
  Pod 이 구동된 Worker의 로컬 디스크 /imsi 경로를 확인해보면 아래와 같이 파일이 생성된 것을 확인 할 수 있습니다.
 &lt;/p&gt;
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;[root@w01 ~]# ls -la /imsi
합계 0
drwxrwxrwx   2 root root  18  4월  9 13:15 .
dr-xr-xr-x. 18 root root 256  4월  9 09:45 ..
-rw-r--r--   1 root root   0  4월  9 13:15 test
[root@w01 ~]#
&lt;/code&gt;&lt;/pre&gt;
 &lt;h1&gt;
  &lt;a href=&quot;#gitrepo&quot; id=&quot;gitrepo&quot;&gt;
   &lt;strong&gt;
    gitRepo
   &lt;/strong&gt;
  &lt;/a&gt;
 &lt;/h1&gt;
 &lt;hr/&gt;
 &lt;p&gt;
  gitRepo 는 github에 있는 Repository 에서 Source 를 Clone 하고 해당 Clone 된 데이터를 Pod 의 Volume으로 할당합니다.
 &lt;/p&gt;
 &lt;h1&gt;
  &lt;a href=&quot;#gitrepo-예제&quot; id=&quot;gitrepo-예제&quot;&gt;
   &lt;strong&gt;
    gitRepo 예제
   &lt;/strong&gt;
  &lt;/a&gt;
 &lt;/h1&gt;
 &lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;# cat git-http.yml
apiVersion: v1
kind: Pod
metadata:
  name: gitrepo-httpd
spec:
  containers:
  - image: httpd
    name: web-server
    volumeMounts:
    - name: html
      mountPath: /usr/local/apache2/htdocs
      readOnly: true
    ports:
    - containerPort: 80
      protocol: TCP
  volumes:
  - name: html
    gitRepo:
      repository: https://github.com/chhanz/docker_training.git
      revision: master
      directory: .
&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;
  위와 같이 Github에서 docker_training.git Source를 Clone 합니다.
 &lt;/p&gt;
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;[root@m01 tmp]# kubectl describe po gitrepo-httpd
Name:               gitrepo-httpd
Namespace:          default
Priority:           0
PriorityClassName:  &amp;lt;none&amp;gt;
Node:               w02/192.168.13.15
Start Time:         Mon, 08 Apr 2019 21:51:43 +0900
Labels:             &amp;lt;none&amp;gt;
Annotations:        &amp;lt;none&amp;gt;
Status:             Pending
IP:
Containers:
  web-server:
    Container ID:
    Image:          nginx:alpine
    Image ID:
    Port:           80/TCP
    Host Port:      0/TCP
    State:          Waiting
      Reason:       ContainerCreating
    Ready:          False
    Restart Count:  0
    Environment:    &amp;lt;none&amp;gt;
    Mounts:
      /usr/share/nginx/html from html (ro)
      /var/run/secrets/kubernetes.io/serviceaccount from default-token-vt6hm (ro)
Conditions:
  Type              Status
  Initialized       True
  Ready             False
  ContainersReady   False
  PodScheduled      True
Volumes:
  html:
    Type:        GitRepo (a volume that is pulled from git when the pod is created)
    Repository:  https://github.com/chhanz/docker_training.git
    Revision:    master
  default-token-vt6hm:
    Type:        Secret (a volume populated by a Secret)
    SecretName:  default-token-vt6hm
    Optional:    false
QoS Class:       BestEffort
Node-Selectors:  &amp;lt;none&amp;gt;
Tolerations:     node.kubernetes.io/not-ready:NoExecute for 300s
                 node.kubernetes.io/unreachable:NoExecute for 300s
Events:
  Type     Reason       Age              From               Message
  ----     ------       ----             ----               -------
  Normal   Scheduled    6s               default-scheduler  Successfully assigned default/gitrepo-httpd to w02
  Warning  FailedMount  1s (x4 over 5s)  kubelet, w02       MountVolume.SetUp failed for volume &quot;html&quot; : failed to exec 'git clone -- https://github.com/chhanz/docker_training.git .': : executable file not found in $PATH
&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;
  위와 같이 에러가 발생하며, Volume 이 Mount 가 안되었습니다.
  &lt;br/&gt;
  이유는 Pod 이 실행될 Worker 노드에 git 명령어가 없어서 발생된 에러였습니다.
 &lt;/p&gt;
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;[root@m01 gitrepo-pv]# kubectl describe po gitrepo-httpd
Name:               gitrepo-httpd
Namespace:          default
Priority:           0
PriorityClassName:  &amp;lt;none&amp;gt;
Node:               w01/192.168.13.14
Start Time:         Mon, 08 Apr 2019 21:58:23 +0900
Labels:             &amp;lt;none&amp;gt;
Annotations:        &amp;lt;none&amp;gt;
Status:             Running
IP:                 10.233.118.8
Containers:
  web-server:
    Container ID:   docker://38158075431bab4e7cfe22e34b615e66ac04e37ad7832a531d811cd67b27962a
    Image:          httpd
    Image ID:       docker-pullable://httpd@sha256:b4096b744d92d1825a36b3ace61ef4caa2ba57d0307b985cace4621139c285f7
    Port:           80/TCP
    Host Port:      0/TCP
    State:          Running
      Started:      Mon, 08 Apr 2019 21:58:49 +0900
    Ready:          True
    Restart Count:  0
    Environment:    &amp;lt;none&amp;gt;
    Mounts:
      /usr/local/apache2/htdocs from html (ro)
      /var/run/secrets/kubernetes.io/serviceaccount from default-token-vt6hm (ro)
Conditions:
  Type              Status
  Initialized       True
  Ready             True
  ContainersReady   True
  PodScheduled      True
Volumes:
  html:
    Type:        GitRepo (a volume that is pulled from git when the pod is created)
    Repository:  https://github.com/chhanz/docker_training.git
    Revision:    master
  default-token-vt6hm:
    Type:        Secret (a volume populated by a Secret)
    SecretName:  default-token-vt6hm
    Optional:    false
QoS Class:       BestEffort
Node-Selectors:  &amp;lt;none&amp;gt;
Tolerations:     node.kubernetes.io/not-ready:NoExecute for 300s
                 node.kubernetes.io/unreachable:NoExecute for 300s
Events:
  Type    Reason     Age   From               Message
  ----    ------     ----  ----               -------
  Normal  Scheduled  28s   default-scheduler  Successfully assigned default/gitrepo-httpd to w01
  Normal  Pulling    21s   kubelet, w01       pulling image &quot;httpd&quot;
  Normal  Pulled     0s    kubelet, w01       Successfully pulled image &quot;httpd&quot;
  Normal  Created    0s    kubelet, w01       Created container
  Normal  Started    0s    kubelet, w01       Started container
[root@m01 gitrepo-pv]# kubectl get po
NAME                              READY   STATUS    RESTARTS   AGE
fortune                           2/2     Running   0          4h17m
gitrepo-httpd                     1/1     Running   0          33s
load-generator-557649ddcd-nl6js   1/1     Running   1          6d22h
php-apache-9bd5c887f-nm4h5        1/1     Running   0          6d22h
tomcat-f94554bb9-gkhpz            1/1     Running   0          7d4h
web-7d77974d4c-gd76n              1/1     Running   0          7d6h
[root@m01 gitrepo-pv]#
&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;
  위와 같이 Worker 노드에 git 명령을 설치한 이후, 정상적으로 Volume 이 Mount 되는 것을 확인 할 수 있었습니다.
 &lt;/p&gt;
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;[root@w01 /]# find * | grep index.html
 
var/lib/kubelet/pods/fcd69917-59fd-11e9-a751-001a4a160172/volumes/kubernetes.io~git-repo/html/index.html
 
[root@w01 /]# cd var/lib/kubelet/pods/fcd69917-59fd-11e9-a751-001a4a160172/volumes/kubernetes.io~git-repo/html/
[root@w01 html]# ls
copy.html  index.html  README.md  util
[root@w01 html]# ls -la
total 20
drwxrwxrwx 4 root root   82 Apr  8 21:58 .
drwxr-xr-x 3 root root   18 Apr  8 21:58 ..
-rw-r--r-- 1 root root 2070 Apr  8 21:58 copy.html
drwxr-xr-x 8 root root  180 Apr  8 21:58 .git
-rw-r--r-- 1 root root 9594 Apr  8 21:58 index.html
-rw-r--r-- 1 root root  108 Apr  8 21:58 README.md
drwxr-xr-x 2 root root   23 Apr  8 21:58 util
[root@w01 html]#
[root@w01 html]#
[root@w01 html]# cat README.md
# Docker Training ReadMe
Custumer training page
 
 - index.html
 - copy.html     // Copy&amp;amp;Paste
 - putty.exe
&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;
  위와 같이 Worker 노드에 해당 git Source 를 Clone 하고 Pod 에 Mount 된 것을 확인 할 수 있었습니다.
 &lt;/p&gt;
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;## Master Node
[root@m01 gitrepo-pv]# kubectl delete -f git-http.yml
pod &quot;gitrepo-httpd&quot; deleted
 
## Worker Node
[root@w01 kubernetes.io~git-repo]# cd ..
cd: error retrieving current directory: getcwd: cannot access parent directories: No such file or directory
[root@w01 ..]# ls
[root@w01 ..]#
[root@w01 ..]# ls -la
total 0
[root@w01 ..]# pwd
/var/lib/kubelet/pods/fcd69917-59fd-11e9-a751-001a4a160172/volumes/kubernetes.io~git-repo/..
[root@w01 ..]#
[root@w01 ..]#
[root@w01 ..]# cd ..
cd: error retrieving current directory: getcwd: cannot access parent directories: No such file or directory
[root@w01 ..]# ls
[root@w01 ..]#
[root@w01 ..]# ls -la /var/lib/kubelet/pods/fcd69917-59fd-11e9-a751-001a4a160172/
ls: cannot access /var/lib/kubelet/pods/fcd69917-59fd-11e9-a751-001a4a160172/: No such file or directory
[root@w01 ..]#
&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;
  이처럼 해당 Pod이 삭제되면 Clone 된 Git Source는 삭제가 되는 것을 확인 하였습니다.
  &lt;br/&gt;
  위 테스트를 진행해보니 Git Source 를 Clone 만하고 Github Repository를 계속 Sync하는 것은 아닌 것으로 확인 하였습니다.
 &lt;/p&gt;
 &lt;p&gt;
  지금까지 emptyDir / hostPath / gitRepo 에 대해 예제를 통해 확인 하였습니다.
  &lt;br/&gt;
  nfs / cephfs / rbd 은 다음 포스팅에서 이어서 설명하도록 하겠습니다.
 &lt;/p&gt;
 &lt;h1&gt;
  &lt;a href=&quot;#network-volume&quot; id=&quot;network-volume&quot;&gt;
   &lt;strong&gt;
    Network Volume
   &lt;/strong&gt;
  &lt;/a&gt;
 &lt;/h1&gt;
 &lt;hr/&gt;
 &lt;p&gt;
  이어서 Network Volume 으로 사용될 nfs / cephfs / ceph rbd 를 예제와 함께 알아보도록 하겠습니다.
 &lt;/p&gt;
 &lt;h1&gt;
  &lt;a href=&quot;#persistent-volume-와-persistent-volume-claim&quot; id=&quot;persistent-volume-와-persistent-volume-claim&quot;&gt;
   &lt;strong&gt;
    Persistent Volume 와 Persistent Volume Claim
   &lt;/strong&gt;
  &lt;/a&gt;
 &lt;/h1&gt;
 &lt;hr/&gt;
 &lt;p&gt;
  Persistent Volume 와 Persistent VolumeClaim 가 있는데,
 &lt;/p&gt;
 &lt;blockquote&gt;
  &lt;p&gt;
   &lt;strong&gt;
    Persistent Volume
   &lt;/strong&gt;
   (이하 PV) 는 Kubernetes 에서 관리되는 저장소로 Pod 과는 다른 수명 주기로 관리됩니다.
   &lt;br/&gt;
   Pod 이 재실행 되더라도, PV의 데이터는 정책에 따라
   &lt;strong&gt;
    유지/삭제
   &lt;/strong&gt;
   가 됩니다.
  &lt;/p&gt;
 &lt;/blockquote&gt;
 &lt;blockquote&gt;
  &lt;p&gt;
   &lt;strong&gt;
    Persistent Volume Claim
   &lt;/strong&gt;
   (이하 PVC) 는 PV를 추상화하여 개발자가 손쉽게 PV를 사용 가능하게 만들어주는 기능입니다.
   &lt;br/&gt;
   개발자는 사용에 필요한 Volume의 크기, Volume의 정책을 선택하고 요청만 하면 됩니다.
   &lt;br/&gt;
   운영자는 개발자의 요청에 맞게 PV 를 생성하게 되고, PVC는 해당 PV를 가져가게 됩니다.
  &lt;/p&gt;
 &lt;/blockquote&gt;
 &lt;p&gt;
  &lt;img src=&quot;/assets/images/71798599/0&quot;/&gt;
 &lt;/p&gt;
 &lt;p&gt;
  이와 같은 방식을
  &lt;strong&gt;
   Static Provisioning
  &lt;/strong&gt;
  이라 합니다.
  &lt;br/&gt;
  예제를 통해 Static Provisioning을 확인 해보겠습니다.
 &lt;/p&gt;
 &lt;h1&gt;
  &lt;a href=&quot;#static-provisioning&quot; id=&quot;static-provisioning&quot;&gt;
   &lt;strong&gt;
    Static Provisioning
   &lt;/strong&gt;
  &lt;/a&gt;
 &lt;/h1&gt;
 &lt;hr/&gt;
 &lt;h2&gt;
  &lt;a href=&quot;#nfs&quot; id=&quot;nfs&quot;&gt;
   &lt;strong&gt;
    NFS
   &lt;/strong&gt;
  &lt;/a&gt;
 &lt;/h2&gt;
 &lt;p&gt;
  NFS 서버를 PV로 사용하는 방식입니다.
  &lt;br/&gt;
  예제에 활용될 yaml 파일 내용은 아래와 같습니다.
 &lt;/p&gt;
 &lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;# cat nfs-pod.yml
apiVersion: v1
kind: Pod
metadata:
  name: nfs-nginx
spec:
  containers:
  - name: nginx
    image: nginx
    volumeMounts:
    - name: nfsvol
      mountPath: /usr/share/nginx/html
  volumes:
  - name : nfsvol
    nfs:
      path: /data/nfs-ngnix
      server: 192.168.13.10
&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;
  위 yaml 파일을 이용해 Pod 을 생성하면
 &lt;/p&gt;
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;[root@m01 pod-example]# kubectl describe po nfs-nginx
Name:               nfs-nginx
Namespace:          default
Priority:           0
PriorityClassName:  &amp;lt;none&amp;gt;
Node:               w03/192.168.13.16
Start Time:         Sun, 14 Apr 2019 13:44:52 +0900
Labels:             &amp;lt;none&amp;gt;
Annotations:        &amp;lt;none&amp;gt;
Status:             Running
IP:                 10.233.89.5
Containers:
  nginx:
    Container ID:   docker://20fa842803535803e1c0c48c204cffe1d464f9f96e3fcf4d7eed11c0bb8aeed0
    Image:          nginx
    Image ID:       docker-pullable://nginx@sha256:50174b19828157e94f8273e3991026dc7854ec7dd2bbb33e7d3bd91f0a4b333d
    Port:           &amp;lt;none&amp;gt;
    Host Port:      &amp;lt;none&amp;gt;
    State:          Running
      Started:      Sun, 14 Apr 2019 13:45:13 +0900
    Ready:          True
    Restart Count:  0
    Environment:    &amp;lt;none&amp;gt;
    Mounts:
      /usr/share/nginx/html from nfsvol (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from default-token-9vmtn (ro)
Conditions:
  Type              Status
  Initialized       True
  Ready             True
  ContainersReady   True
  PodScheduled      True
Volumes:
  nfsvol:
    Type:      NFS (an NFS mount that lasts the lifetime of a pod)
    Server:    192.168.13.10
    Path:      /data/nfs-ngnix
    ReadOnly:  false
  default-token-9vmtn:
    Type:        Secret (a volume populated by a Secret)
    SecretName:  default-token-9vmtn
    Optional:    false
QoS Class:       BestEffort
Node-Selectors:  &amp;lt;none&amp;gt;
Tolerations:     node.kubernetes.io/not-ready:NoExecute for 300s
                 node.kubernetes.io/unreachable:NoExecute for 300s
Events:
  Type    Reason     Age   From               Message
  ----    ------     ----  ----               -------
  Normal  Scheduled  50s   default-scheduler  Successfully assigned default/nfs-nginx to w03
  Normal  Pulling    46s   kubelet, w03       pulling image &quot;nginx&quot;
  Normal  Pulled     28s   kubelet, w03       Successfully pulled image &quot;nginx&quot;
  Normal  Created    28s   kubelet, w03       Created container
  Normal  Started    28s   kubelet, w03       Started container
&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;
  nfs-nginx 라는 Pod 이 생성이 되고 위와 같이
  &lt;strong&gt;
   nfsvol
  &lt;/strong&gt;
  이라는 Volume 이 Attach 된 것을 확인 할 수 있습니다.
  &lt;br/&gt;
  nginx 서비스가 연결된 Volume 을 통해 서비스가 되는지 확인해봅니다.
 &lt;/p&gt;
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;[root@m01 pod-example]# curl 10.233.89.5
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;p&amp;gt;NFS Index-v1&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
[root@m01 pod-example]#

# Pod 내부에 접근해서 확인
[root@m01 pod-example]# kubectl exec -ti nfs-nginx /bin/bash
root@nfs-nginx:/#
root@nfs-nginx:/# cd /usr/share/nginx/html/
root@nfs-nginx:/usr/share/nginx/html# cat index.html
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;p&amp;gt;NFS Index-v1&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
root@nfs-nginx:/usr/share/nginx/html#
&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;
  &lt;strong&gt;
   NFS Index-v1
  &lt;/strong&gt;
  라는 index.html 을 가지고 있는 Volume 입니다.
  &lt;br/&gt;
  NFS 서버에 직접 접근해서 index.html 파일을 수정해보겠습니다.
 &lt;/p&gt;
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;[root@kube-depoly nfs-ngnix]# pwd
/data/nfs-ngnix
[root@kube-depoly nfs-ngnix]# cat index.html
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;p&amp;gt;NFS Index-v1&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
[root@kube-depoly nfs-ngnix]# vi index.html        // index.html 수정
[root@kube-depoly nfs-ngnix]# cat index.html
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;p&amp;gt;NFS Index-v2&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
[root@kube-depoly nfs-ngnix]#

# 적용 확인
[root@m01 pod-example]# curl 10.233.89.5
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;p&amp;gt;NFS Index-v2&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
[root@m01 pod-example]#
&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;
  이와 같이 Pod 에 NFS 서버가 연결 되어 있는 것을 확인 할 수 있었습니다.
 &lt;/p&gt;
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;# NFS 로 Volume Attach 되어 있음
root@nfs-nginx:/usr/share/nginx/html# mount | grep nfs
192.168.13.10:/data/nfs-ngnix on /usr/share/nginx/html type nfs4 (rw,relatime,vers=4.1,rsize=262144,wsize=262144,namlen=255,hard,proto=tcp,timeo=600,retrans=2,sec=sys,clientaddr=192.168.13.15,local_lock=none,addr=192.168.13.10)
root@nfs-nginx:/usr/share/nginx/html#
&lt;/code&gt;&lt;/pre&gt;
 &lt;h2&gt;
  &lt;a href=&quot;#cephfs&quot; id=&quot;cephfs&quot;&gt;
   &lt;strong&gt;
    cephfs
   &lt;/strong&gt;
  &lt;/a&gt;
 &lt;/h2&gt;
 &lt;p&gt;
  Software Defined Storage 인 ceph 를 이용하는 방식입니다.
 &lt;/p&gt;
 &lt;blockquote&gt;
  &lt;p&gt;
   Worker 노드에서 cephfs 를 사용하기 위해 ceph-common 패키지를 설치합니다.
  &lt;/p&gt;
 &lt;/blockquote&gt;
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;# yum -y install epel-release
# rpm -Uvh https://download.ceph.com/rpm-luminous/el7/noarch/ceph-release-1-0.el7.noarch.rpm
# yum -y install ceph-common
&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;
  cephfs 를 사용하기 위해서는 Key 가 필요로 한데, 아래와 같은 방식으로 Key 값을 수집하고 Kubernete Secret 에 등록합니다.
 &lt;/p&gt;
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;[root@s01 ~]# ceph auth get client.admin
exported keyring for client.admin
[client.admin]
    key = AQC6s6Vc83jwKBAAtckE6yz3eTM9lWwK60QNYw==
    caps mds = &quot;allow *&quot;
    caps mgr = &quot;allow *&quot;
    caps mon = &quot;allow *&quot;
    caps osd = &quot;allow *&quot;
[root@s01 ~]#
 
[root@s01 ceph]# ceph-authtool -p ceph.client.admin.keyring
AQC6s6Vc83jwKBAAtckE6yz3eTM9lWwK60QNYw==
[root@s01 ceph]#

# Secret 생성
[root@m01 cephfs]# cat ceph-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: ceph-secret
data:
  key: QVFDNnM2VmM4M2p3S0JBQXRja0U2eXozZVRNOWxXd0s2MFFOWXc9PQ==

[root@m01 cephfs]# kubectl create -f ceph-secret.yaml
secret/ceph-secret created

[root@m01 cephfs]# kubectl get secret ceph-secret
NAME          TYPE     DATA   AGE
ceph-secret   Opaque   1      23s
[root@m01 cephfs]# kubectl get secret ceph-secret -o yaml
apiVersion: v1
data:
  key: QVFDNnM2VmM4M2p3S0JBQXRja0U2eXozZVRNOWxXd0s2MFFOWXc9PQ==
kind: Secret
metadata:
  creationTimestamp: &quot;2019-04-14T06:13:44Z&quot;
  name: ceph-secret
  namespace: default
  resourceVersion: &quot;873772&quot;
  selfLink: /api/v1/namespaces/default/secrets/ceph-secret
  uid: 7515ad43-5e7c-11e9-ba95-001a4a160172
type: Opaque
[root@m01 cephfs]#
&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;
  Pod 에 cephfs Volume 을 연결합니다.
 &lt;/p&gt;
 &lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;[root@m01 cephfs]# cat cephfs-with-secret.yaml
apiVersion: v1
kind: Pod
metadata:
  name: cephfs-httpd
spec:
  containers:
  - name: cephfs-httpd
    image: httpd
    volumeMounts:
    - mountPath: /usr/local/apache2/htdocs
      name: cephfs
  volumes:
  - name: cephfs
    cephfs:
      monitors:
      - 192.168.13.6:6789
      - 192.168.13.7:6789
      - 192.168.13.8:6789
      user: admin
      path: /httpd-index
      secretRef:
        name: ceph-secret
      readOnly: false
&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;
  cephfs 의 /httpd-index 경로에는 index.html 이 존재합니다.
  &lt;br/&gt;
  Pod 을 생성합니다.
 &lt;/p&gt;
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;[root@m01 cephfs]# kubectl create -f cephfs-with-secret.yaml
pod/cephfs-httpd created
[root@m01 cephfs]# kubectl get po
NAME                              READY   STATUS    RESTARTS   AGE
cephfs-httpd                      1/1     Running   0          24s
load-generator-557649ddcd-jq987   1/1     Running   1          4d20h
php-apache-9bd5c887f-p6lrq        1/1     Running   0          4d20h
[root@m01 cephfs]#
 
[root@m01 cephfs]# kubectl describe po cephfs-httpd
Name:               cephfs-httpd
Namespace:          default
Priority:           0
PriorityClassName:  &amp;lt;none&amp;gt;
Node:               w03/192.168.13.16
Start Time:         Sun, 14 Apr 2019 15:16:48 +0900
Labels:             &amp;lt;none&amp;gt;
Annotations:        &amp;lt;none&amp;gt;
Status:             Running
IP:                 10.233.89.6
Containers:
  cephfs-httpd:
    Container ID:   docker://71e17fb3708a68448fdded4a20c81af63716a1146156dc5a5b4b8145a290f3dc
    Image:          httpd
    Image ID:       docker-pullable://httpd@sha256:b4096b744d92d1825a36b3ace61ef4caa2ba57d0307b985cace4621139c285f7
    Port:           &amp;lt;none&amp;gt;
    Host Port:      &amp;lt;none&amp;gt;
    State:          Running
      Started:      Sun, 14 Apr 2019 15:17:04 +0900
    Ready:          True
    Restart Count:  0
    Environment:    &amp;lt;none&amp;gt;
    Mounts:
      /usr/local/apache2/htdocs from cephfs (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from default-token-9vmtn (ro)
Conditions:
  Type              Status
  Initialized       True
  Ready             True
  ContainersReady   True
  PodScheduled      True
Volumes:
  cephfs:
    Type:        CephFS (a CephFS mount on the host that shares a pods lifetime)
    Monitors:    [192.168.13.6:6789 192.168.13.7:6789 192.168.13.8:6789]
    Path:        /httpd-index
    User:        admin
    SecretFile:
    SecretRef:   &amp;amp;LocalObjectReference{Name:ceph-secret,}
    ReadOnly:    false
  default-token-9vmtn:
    Type:        Secret (a volume populated by a Secret)
    SecretName:  default-token-9vmtn
    Optional:    false
QoS Class:       BestEffort
Node-Selectors:  &amp;lt;none&amp;gt;
Tolerations:     node.kubernetes.io/not-ready:NoExecute for 300s
                 node.kubernetes.io/unreachable:NoExecute for 300s
Events:
  Type    Reason     Age   From               Message
  ----    ------     ----  ----               -------
  Normal  Scheduled  36s   default-scheduler  Successfully assigned default/cephfs-httpd to w03
  Normal  Pulling    33s   kubelet, w03       pulling image &quot;httpd&quot;
  Normal  Pulled     21s   kubelet, w03       Successfully pulled image &quot;httpd&quot;
  Normal  Created    20s   kubelet, w03       Created container
  Normal  Started    20s   kubelet, w03       Started container
[root@m01 cephfs]#

# Pod 테스트
[root@m01 cephfs]# curl 10.233.89.6
cephfs Index - v1
[root@m01 cephfs]#
&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;
  cephfs는 NFS 와 매우 유사합니다. 그로 인해 NFS와 동일하게 PV에 직접 접근해서 파일 내용을 수정하고, Volume Attach 내용을 확인 할 수 있습니다.
 &lt;/p&gt;
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;# Mount 확인 - Pod 이 작동중인 Worker 노드
[root@w03 ~]# mount | grep ceph
192.168.13.6:6789,192.168.13.7:6789,192.168.13.8:6789:/httpd-index on /var/lib/kubelet/pods/e2b5c688-5e7c-11e9-ba95-001a4a160172/volumes/kubernetes.io~cephfs/cephfs type ceph (rw,relatime,name=admin,secret=&amp;lt;hidden&amp;gt;,acl,wsize=16777216)
[root@w03 ~]#
[root@w03 ~]# cd /var/lib/kubelet/pods/e2b5c688-5e7c-11e9-ba95-001a4a160172/volumes/kubernetes.io~cephfs/cephfs
[root@w03 cephfs]# ls -la
합계 1
drwxr-xr-x 1 root root  1  4월 14 15:05 .
drwxr-x--- 3 root root 20  4월 14 15:16 ..
-rw-r--r-- 1 root root 18  4월 14 15:05 index.html
[root@w03 cephfs]# cat index.html
cephfs Index - v1
[root@w03 cephfs]#

# Cephfs 에 접근해서 직접 파일 수정
[root@kube-depoly httpd-index]# pwd
/cephfs/httpd-index
[root@kube-depoly httpd-index]# vi index.html
[root@kube-depoly httpd-index]# cat index.html
cephfs Index - v2
[root@kube-depoly httpd-index]#
 
[root@m01 cephfs]# curl 10.233.89.6
cephfs Index - v2
[root@m01 cephfs]#
&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;
  지금까지 Static Provisioning 관련 해서 확인 해보았습니다.
 &lt;/p&gt;
 &lt;p&gt;
  개발자가 PVC를 통해 시스템 관리자에게 PV를 요구하는 과정을 통해 PV를 할당 받고 사용이 가능한데 이 과정을 자동화를 하게 되면 Dynamic Provisioning 이라고 합니다.
 &lt;/p&gt;
 &lt;h1&gt;
  &lt;a href=&quot;#dynamic-provisioning&quot; id=&quot;dynamic-provisioning&quot;&gt;
   &lt;strong&gt;
    Dynamic Provisioning
   &lt;/strong&gt;
  &lt;/a&gt;
 &lt;/h1&gt;
 &lt;hr/&gt;
 &lt;h2&gt;
  &lt;a href=&quot;#ceph-rbd&quot; id=&quot;ceph-rbd&quot;&gt;
   &lt;strong&gt;
    ceph rbd
   &lt;/strong&gt;
  &lt;/a&gt;
 &lt;/h2&gt;
 &lt;p&gt;
  Dynamic Provisioning는 PVC를 통해 요청하는 PV대해 동적으로 생성을 해주는 제공 방식을 말합니다.
  &lt;br/&gt;
  개발자는 StorageClass 를 통해 필요한 Storage Type을 지정하여 동적으로 할당을 받을 수 있습니다.
 &lt;/p&gt;
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;# Secret 생성 - ceph Login을 위한 Key
[root@m01 ceph-rbd]# kubectl create -f ceph-admin-secret.yml
secret/ceph-admin-secret created
[root@m01 ceph-rbd]# kubectl create -f ceph-secret.yml
secret/ceph-secret created
&lt;/code&gt;&lt;/pre&gt;
 &lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;# StorageClass 생성
[root@m01 ceph-rbd]# cat class.yaml
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: rbd
provisioner: ceph.com/rbd
parameters:
  monitors: 192.168.13.6:6789,192.168.13.7:6789,192.168.13.8:6789
  pool: kube
  adminId: admin
  adminSecretNamespace: kube-system
  adminSecretName: ceph-admin-secret
  userId: kube
  userSecretNamespace: kube-system
  userSecretName: ceph-secret
  imageFormat: &quot;2&quot;
  imageFeatures: layering
[root@m01 ceph-rbd]# kubectl get sc
NAME   PROVISIONER    AGE
rbd    ceph.com/rbd   17h
[root@m01 ceph-rbd]#
&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;
  StorageClass yaml 파일을 보면
  &lt;strong&gt;
   provisioner: ceph.com/rbd
  &lt;/strong&gt;
  항목이 있습니다.
 &lt;/p&gt;
 &lt;blockquote&gt;
  &lt;p&gt;
   위와 같이 ceph rbd 를 제공해줄 provisioner 가 필요합니다.
   &lt;br/&gt;
   provisioner 상세 배포 방식은
   &lt;a href=&quot;https://github.com/kubernetes-incubator/external-storage/blob/master/ceph/rbd/deploy/README.md&quot;&gt;
    ceph-rbd-depoly
   &lt;/a&gt;
   문서를 참조합니다.
  &lt;/p&gt;
 &lt;/blockquote&gt;
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;# Pod 
[root@m01 ceph-rbd]# kubectl get po -n kube-system | grep rbd
rbd-provisioner-67b4857bcd-7ctlz           1/1     Running   0          17h

# Pod 상세 내역
[root@m01 ceph-rbd]# kubectl describe po rbd-provisioner-67b4857bcd-7ctlz -n kube-system
Name:               rbd-provisioner-67b4857bcd-7ctlz
Namespace:          kube-system
Priority:           0
PriorityClassName:  &amp;lt;none&amp;gt;
Node:               w02/192.168.13.15
Start Time:         Sun, 14 Apr 2019 21:13:49 +0900
Labels:             app=rbd-provisioner
                    pod-template-hash=67b4857bcd
Annotations:        &amp;lt;none&amp;gt;
Status:             Running
IP:                 10.233.96.9
Controlled By:      ReplicaSet/rbd-provisioner-67b4857bcd
Containers:
  rbd-provisioner:
    Container ID:   docker://8f25dca0c870685dc0140294787124e288793243ed6120921d278c701b6c7039
    Image:          quay.io/external_storage/rbd-provisioner:latest
    Image ID:       docker-pullable://quay.io/external_storage/rbd-provisioner@sha256:94fd36b8625141b62ff1addfa914d45f7b39619e55891bad0294263ecd2ce09a
    Port:           &amp;lt;none&amp;gt;
    Host Port:      &amp;lt;none&amp;gt;
    State:          Running
      Started:      Sun, 14 Apr 2019 21:13:54 +0900
    Ready:          True
    Restart Count:  0
    Environment:
      PROVISIONER_NAME:  ceph.com/rbd
    Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from rbd-provisioner-token-79f4c (ro)
Conditions:
  Type              Status
  Initialized       True
  Ready             True
  ContainersReady   True
  PodScheduled      True
Volumes:
  rbd-provisioner-token-79f4c:
    Type:        Secret (a volume populated by a Secret)
    SecretName:  rbd-provisioner-token-79f4c
    Optional:    false
QoS Class:       BestEffort
Node-Selectors:  &amp;lt;none&amp;gt;
Tolerations:     node.kubernetes.io/not-ready:NoExecute for 300s
                 node.kubernetes.io/unreachable:NoExecute for 300s
Events:          &amp;lt;none&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;
  PVC 를 통해 rbd PV를 요청합니다.
 &lt;/p&gt;
 &lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;# cat claim.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: rbd-pvc
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: rbd
  resources:
    requests:
      storage: 2Gi 
&lt;/code&gt;&lt;/pre&gt;
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;# PVC 생성
[root@m01 ceph-rbd]# kubectl create -f claim.yaml
persistentvolumeclaim/rbd-pvc created

# PVC 확인
[root@m01 ceph-rbd]# kubectl get pvc
NAME            STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   AGE
claim1          Bound    pvc-fe9d8199-5eae-11e9-ba95-001a4a160172   1Gi        RWO            rbd            17h
nginx-vol-pvc   Bound    nginx-pv                                   3Gi        RWX                           17h
rbd-pvc         Bound    pvc-5b571f95-5f43-11e9-ba95-001a4a160172   2Gi        RWO            rbd            3s

# PV 연결 확인
[root@m01 ceph-rbd]# kubectl get pv
NAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                   STORAGECLASS   REASON   AGE
nginx-pv                                   3Gi        RWX            Retain           Bound    default/nginx-vol-pvc                           17h
pvc-5b571f95-5f43-11e9-ba95-001a4a160172   2Gi        RWO            Delete           Bound    default/rbd-pvc         rbd                     5s
pvc-fe9d8199-5eae-11e9-ba95-001a4a160172   1Gi        RWO            Delete           Bound    default/claim1          rbd                     17h
[root@m01 ceph-rbd]#
&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;
  위와 같이 PVC 를 요청하자 바로 PV가 ceph rbd 형식으로 생성이 되고 Attach 된 것을 확인 할 수 있었습니다.
 &lt;/p&gt;
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;[root@m01 ceph-rbd]# kubectl logs -f rbd-provisioner-67b4857bcd-7ctlz -n kube-system
I0414 12:13:54.944458       1 main.go:85] Creating RBD provisioner ceph.com/rbd with identity: ceph.com/rbd
I0414 12:13:54.949989       1 leaderelection.go:185] attempting to acquire leader lease  kube-system/ceph.com-rbd...
I0414 12:13:55.001529       1 leaderelection.go:194] successfully acquired lease kube-system/ceph.com-rbd
I0414 12:13:55.001754       1 event.go:221] Event(v1.ObjectReference{Kind:&quot;Endpoints&quot;, Namespace:&quot;kube-system&quot;, Name:&quot;ceph.com-rbd&quot;, UID:&quot;c5bb0c91-5eae-11e9-b387-001a4a160174&quot;, APIVersion:&quot;v1&quot;, ResourceVersion:&quot;919145&quot;, FieldPath:&quot;&quot;}): type: 'Normal' reason: 'LeaderElection' rbd-provisioner-67b4857bcd-7ctlz_c5ecdcd7-5eae-11e9-a9ca-6e9439dbce0f became leader
I0414 12:13:55.001901       1 controller.go:631] Starting provisioner controller ceph.com/rbd_rbd-provisioner-67b4857bcd-7ctlz_c5ecdcd7-5eae-11e9-a9ca-6e9439dbce0f!
I0414 12:13:55.102448       1 controller.go:680] Started provisioner controller ceph.com/rbd_rbd-provisioner-67b4857bcd-7ctlz_c5ecdcd7-5eae-11e9-a9ca-6e9439dbce0f!
I0414 12:15:33.439001       1 controller.go:987] provision &quot;default/claim1&quot; class &quot;rbd&quot;: started
I0414 12:15:33.455112       1 event.go:221] Event(v1.ObjectReference{Kind:&quot;PersistentVolumeClaim&quot;, Namespace:&quot;default&quot;, Name:&quot;claim1&quot;, UID:&quot;fe9d8199-5eae-11e9-ba95-001a4a160172&quot;, APIVersion:&quot;v1&quot;, ResourceVersion:&quot;919428&quot;, FieldPath:&quot;&quot;}): type: 'Normal' reason: 'Provisioning' External provisioner is provisioning volume for claim &quot;default/claim1&quot;
I0414 12:15:35.895596       1 provision.go:132] successfully created rbd image &quot;kubernetes-dynamic-pvc-00ab7b91-5eaf-11e9-a9ca-6e9439dbce0f&quot;
I0414 12:15:35.895798       1 controller.go:1087] provision &quot;default/claim1&quot; class &quot;rbd&quot;: volume &quot;pvc-fe9d8199-5eae-11e9-ba95-001a4a160172&quot; provisioned
I0414 12:15:35.895924       1 controller.go:1101] provision &quot;default/claim1&quot; class &quot;rbd&quot;: trying to save persistentvvolume &quot;pvc-fe9d8199-5eae-11e9-ba95-001a4a160172&quot;
I0414 12:15:35.934205       1 controller.go:1108] provision &quot;default/claim1&quot; class &quot;rbd&quot;: persistentvolume &quot;pvc-fe9d8199-5eae-11e9-ba95-001a4a160172&quot; saved
I0414 12:15:35.934420       1 controller.go:1149] provision &quot;default/claim1&quot; class &quot;rbd&quot;: succeeded
I0414 12:15:35.935026       1 event.go:221] Event(v1.ObjectReference{Kind:&quot;PersistentVolumeClaim&quot;, Namespace:&quot;default&quot;, Name:&quot;claim1&quot;, UID:&quot;fe9d8199-5eae-11e9-ba95-001a4a160172&quot;, APIVersion:&quot;v1&quot;, ResourceVersion:&quot;919428&quot;, FieldPath:&quot;&quot;}): type: 'Normal' reason: 'ProvisioningSucceeded' Successfully provisioned volume pvc-fe9d8199-5eae-11e9-ba95-001a4a160172
I0415 05:57:32.016818       1 controller.go:987] provision &quot;default/rbd-pvc&quot; class &quot;rbd&quot;: started
I0415 05:57:32.037901       1 event.go:221] Event(v1.ObjectReference{Kind:&quot;PersistentVolumeClaim&quot;, Namespace:&quot;default&quot;, Name:&quot;rbd-pvc&quot;, UID:&quot;5b571f95-5f43-11e9-ba95-001a4a160172&quot;, APIVersion:&quot;v1&quot;, ResourceVersion:&quot;1081791&quot;, FieldPath:&quot;&quot;}): type: 'Normal' reason: 'Provisioning' External provisioner is provisioning volume for claim &quot;default/rbd-pvc&quot;
I0415 05:57:33.772819       1 provision.go:132] successfully created rbd image &quot;kubernetes-dynamic-pvc-5be57bb6-5f43-11e9-a9ca-6e9439dbce0f&quot;
I0415 05:57:33.773007       1 controller.go:1087] provision &quot;default/rbd-pvc&quot; class &quot;rbd&quot;: volume &quot;pvc-5b571f95-5f43-11e9-ba95-001a4a160172&quot; provisioned
I0415 05:57:33.773112       1 controller.go:1101] provision &quot;default/rbd-pvc&quot; class &quot;rbd&quot;: trying to save persistentvvolume &quot;pvc-5b571f95-5f43-11e9-ba95-001a4a160172&quot;
I0415 05:57:33.793499       1 controller.go:1108] provision &quot;default/rbd-pvc&quot; class &quot;rbd&quot;: persistentvolume &quot;pvc-5b571f95-5f43-11e9-ba95-001a4a160172&quot; saved
I0415 05:57:33.793633       1 controller.go:1149] provision &quot;default/rbd-pvc&quot; class &quot;rbd&quot;: succeeded
I0415 05:57:33.793801       1 controller.go:987] provision &quot;default/rbd-pvc&quot; class &quot;rbd&quot;: started
I0415 05:57:33.794971       1 event.go:221] Event(v1.ObjectReference{Kind:&quot;PersistentVolumeClaim&quot;, Namespace:&quot;default&quot;, Name:&quot;rbd-pvc&quot;, UID:&quot;5b571f95-5f43-11e9-ba95-001a4a160172&quot;, APIVersion:&quot;v1&quot;, ResourceVersion:&quot;1081791&quot;, FieldPath:&quot;&quot;}): type: 'Normal' reason: 'ProvisioningSucceeded' Successfully provisioned volume pvc-5b571f95-5f43-11e9-ba95-001a4a160172
I0415 05:57:33.826515       1 controller.go:996] provision &quot;default/rbd-pvc&quot; class &quot;rbd&quot;: persistentvolume &quot;pvc-5b571f95-5f43-11e9-ba95-001a4a160172&quot; already exists, skipping
&lt;/code&gt;&lt;/pre&gt;
 &lt;ul&gt;
  &lt;li&gt;
   참조: rbd-provisioner docker log
  &lt;/li&gt;
 &lt;/ul&gt;
 &lt;p&gt;
  Pod 에 PVC를 yaml 추가하여 Pod 생성 할때, PV를 요청하고 StorageClass 를 이용해서 동적으로 Volume을 할당 받았습니다.
  &lt;br/&gt;
  아래는 Pod 에 PVC를 추가한 yaml 구문 Template 입니다.
 &lt;/p&gt;
 &lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;# cat test-pod.yaml
kind: Pod
apiVersion: v1
metadata:
  name: test-pod
spec:
  containers:
  - name: test-pod
    image: gcr.io/google_containers/busybox:1.24
    command:
    - &quot;/bin/sh&quot;
    args:
    - &quot;-c&quot;
    - &quot;touch /mnt/SUCCESS &amp;amp;&amp;amp; exit 0 || exit 1&quot;
    volumeMounts:
    - name: pvc
      mountPath: &quot;/mnt&quot;
  restartPolicy: &quot;Never&quot;
  volumes:
  - name: pvc
    persistentVolumeClaim:
      claimName: claim1
&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;
  지금까지 포스팅에서 소개된 Volume 은 Kubernetes 에서 제공되는 일부 입니다.
  &lt;br/&gt;
  다양한 Volume 을 제공하고 있으며, 상세 내용은 첨부된 문서 참고하시고 운영하시는 환경에 맞게 사용하면 됩니다.
  &lt;br/&gt;
  감사합니다.
 &lt;/p&gt;
 &lt;h1&gt;
  &lt;a href=&quot;#참고-문서&quot; id=&quot;참고-문서&quot;&gt;
   참고 문서
  &lt;/a&gt;
 &lt;/h1&gt;
 &lt;hr/&gt;
 &lt;p&gt;
  &lt;strong&gt;
   - ceph rbd 관련
  &lt;/strong&gt;
 &lt;/p&gt;
 &lt;ul&gt;
  &lt;li&gt;
   &lt;a href=&quot;https://github.com/kubernetes-incubator/external-storage/tree/master/ceph/rbd&quot;&gt;
    RBD Volume Provisioner for Kubernetes 1.5+
   &lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
   &lt;a href=&quot;https://github.com/kubernetes-incubator/external-storage/blob/master/ceph/rbd/deploy/README.md&quot;&gt;
    RBD Volume Provisioner On Kubernetes Depolyment
   &lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
   &lt;a href=&quot;https://docs.openshift.com/container-platform/3.5/install_config/storage_examples/ceph_example.html&quot;&gt;
    Example Ceph rbd
   &lt;/a&gt;
  &lt;/li&gt;
 &lt;/ul&gt;
 &lt;p&gt;
  &lt;strong&gt;
   - Kubernetes 문서
  &lt;/strong&gt;
 &lt;/p&gt;
 &lt;ul&gt;
  &lt;li&gt;
   &lt;a href=&quot;https://kubernetes.io/docs/concepts/storage/persistent-volumes/&quot;&gt;
    PV 관련
   &lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
   &lt;a href=&quot;https://kubernetes.io/docs/concepts/storage/volumes/#types-of-volumes&quot;&gt;
    Types of Volumes
   &lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
   &lt;a href=&quot;https://kubernetes.io/docs/concepts/storage/persistent-volumes/#access-modes&quot;&gt;
    PV Access Mode 관련
   &lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
   &lt;a href=&quot;https://kubernetes.io/docs/concepts/storage/persistent-volumes/#reclaim-policy&quot;&gt;
    PV Reclaim Policy
   &lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
   &lt;a href=&quot;https://kubernetes.io/docs/tasks/configure-pod-container/configure-persistent-volume-storage/&quot;&gt;
    Example PVC
   &lt;/a&gt;
  &lt;/li&gt;
 &lt;/ul&gt;
 &lt;p&gt;
  &lt;strong&gt;
   - Example yaml
  &lt;/strong&gt;
 &lt;/p&gt;
 &lt;ul&gt;
  &lt;li&gt;
   &lt;a href=&quot;https://github.com/chhanz/k8s-study-example&quot;&gt;
    chhanz Github
   &lt;/a&gt;
  &lt;/li&gt;
 &lt;/ul&gt;
 &lt;script&gt;
  //&lt;![CDATA[

AJS.$('[data-macro-name=&quot;markdown&quot;] code').each(function(i, block) {
    hljs.highlightBlock(block);
  });

//]]&gt;
 &lt;/script&gt;
 &lt;style&gt;
  .hljs {display: inline;}
pre &gt; code {display: block !important;}
 &lt;/style&gt;
 &lt;script&gt;
  //&lt;![CDATA[
 AJS.$('[data-macro-name=&quot;markdown&quot;] table thead th').each(function(i, block) {
    block.classList.add(&quot;confluenceTh&quot;);
});

AJS.$('[data-macro-name=&quot;markdown&quot;] table tbody tr td').each(function(i, block) {
    block.classList.add(&quot;confluenceTd&quot;);
});
//]]&gt;
 &lt;/script&gt;
&lt;/div&gt;</description>
        <pubDate>Mon, 15 Apr 2019 00:00:00 +0900</pubDate>
        <link>https://tech.osci.kr/2019/04/15/71798599/</link>
        <guid isPermaLink="true">https://tech.osci.kr/2019/04/15/71798599/</guid>
        
        
      </item>
    
      <item>
        <title>CI/CD Step By Step</title>
        <description>&lt;p&gt;
 안녕하세요.
&lt;/p&gt;
&lt;p&gt;
 오픈소스컨설팅
&lt;/p&gt;
&lt;p&gt;
 아틀라시안팀
&lt;/p&gt;
&lt;p&gt;
 김세연입니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 요즘 많은 고객사, 필드에서는 Agile, ALM, DevOps 문화 구축 후 CI/CD를 구축하고 준비하고 있습니다.
&lt;/p&gt;
&lt;p&gt;
 CI/CD Step by step을 소개 하겠습니다.
&lt;/p&gt;
&lt;blockquote&gt;
 &lt;p&gt;
  CI/CD란?
 &lt;/p&gt;
 &lt;p&gt;
  CI(Continuous Integration) 지속적인 통합을 의미합니다.
 &lt;/p&gt;
 &lt;p&gt;
  훌륭한 개발A팀 기능 100개와 개발B팀 기능 100개가 통합 된단다고 상상해보세요.
 &lt;/p&gt;
 &lt;p&gt;
  좋은 기능 200개가 될까요?
 &lt;/p&gt;
 &lt;p&gt;
  S/W 통합은 눈에 보이지 않는 복잡한 일입니다.
 &lt;/p&gt;
 &lt;p&gt;
  자동화된 도구로 자주 Build, Test로 S/W의 높은 품질을 유지해야 합니다.
 &lt;/p&gt;
 &lt;p&gt;
  CD(Continuous Delivery or Continuous Deploy)란?
 &lt;/p&gt;
 &lt;p&gt;
  높은 품질의 S/W를 개발서버, 운영서버에 배포하는 과정을 사람 손으로 한다면
 &lt;/p&gt;
 &lt;p&gt;
  시간, 비용, 실수가 발생합니다. Java Legacy System을 운영하는 조직 중에는
 &lt;/p&gt;
 &lt;p&gt;
  빌드 결과 class파일만 교체하는 경우도 있습니다. (신규 개발인데 이렇게 하고 계신가요? 저희한테 빨리 연락주세요)
 &lt;/p&gt;
 &lt;p&gt;
  엑셀 파일에 class파일 리스트 받고..
 &lt;/p&gt;
 &lt;p&gt;
  자동화된 배포 시스템은 시간, 비용, 실수를 방지하고 팀이 더 빠르게 개발, 빌드, 배포를 할 수 있게 해줍니다.
 &lt;/p&gt;
 &lt;p&gt;
  비즈니스팀, 기획, 디자인, 개발, 운영팀은 자동화된 빌드, 배포 시스템으로 민첩함을 유지하고
 &lt;/p&gt;
 &lt;p&gt;
  서비스를 시장에 높은 품질의 소프트웨어를 출시할 수 있습니다.
 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
 저희는 Atlassian 제품으로 요구사항 접수부터 이슈 트래킹, 문서 협업, 저장소, 빌드/배포 모든걸 구현하는 방법을 소개합니다.
&lt;/p&gt;
&lt;p&gt;
 Atlassian은 전세계에서 유일하게 ALM, DevOps, Agile을 구현할 수 있는 모든 솔루션이 있습니다.
&lt;/p&gt;
&lt;p&gt;
 Atlassian 제품으로 사용했을 때 장점은 관리의 편리성(UI가 비슷합니다.)과 각 부서별 동일한 솔루션 사용으로 소통비용 감소입니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
  &lt;img src=&quot;/assets/images/63373558/0&quot;/&gt;
  &lt;img class=&quot;confluence-embedded-image confluence-external-resource confluence-content-image-border&quot; data-image-src=&quot;http://osci.kr/images/sub/dev_process.jpeg&quot; src=&quot;http://osci.kr/images/sub/dev_process.jpeg&quot; width=&quot;650&quot;/&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;strong&gt;
  &amp;lt;그림. CI/CD 구성도&amp;gt;
 &lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 오늘은 Jira Service Desk 부터 Bamboo 까지 Step by step으로 진행해 보겠습니다.
&lt;/p&gt;
&lt;p&gt;
 하지만 스텝에 정답은 없습니다. 우리 조직에서 '이렇게 하면 좋겠다'를 적용, 프랙티스, 점진적 발전 모델이 좋은 사례가 될거에요.
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
  &lt;img src=&quot;/assets/images/63373558/0&quot;/&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;strong&gt;
  &amp;lt;그림. 소프트웨어의 관리는 생명체와 같아서 끊임없는 관리가 필요합니다.&amp;gt;
 &lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;h1 id=&quot;CI/CDStepByStep-Actor&quot;&gt;
 Actor
&lt;/h1&gt;
&lt;p&gt;
 Actor를 설정해서 이해관계도 같이 설명해 보겠습니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
  &lt;img src=&quot;/assets/images/63373558/1&quot;/&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;strong&gt;
  내부 또는 외부 고객, 현업
 &lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;strong&gt;
  불편함, 문제를 갖고 있습니다.
 &lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
  &lt;img src=&quot;/assets/images/63373558/2&quot;/&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;strong&gt;
  Product Owner, Project Leader
 &lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;strong&gt;
  프로젝트 전체 일정, 계획, 성과등을 관리합니다.
 &lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;strong&gt;
  &lt;br/&gt;
 &lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;strong&gt;
  &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
   &lt;img src=&quot;/assets/images/63373558/3&quot;/&gt;
  &lt;/span&gt;
 &lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;strong&gt;
  개발팀
 &lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;strong&gt;
  &lt;br/&gt;
 &lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;strong&gt;
  &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
   &lt;img src=&quot;/assets/images/63373558/4&quot;/&gt;
  &lt;/span&gt;
 &lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;strong&gt;
  Test, QA Team
 &lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;strong&gt;
  &lt;br/&gt;
 &lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;strong&gt;
  &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
   &lt;img src=&quot;/assets/images/63373558/5&quot;/&gt;
  &lt;/span&gt;
 &lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;strong&gt;
  보안, 운영팀
 &lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;strong&gt;
  &lt;br/&gt;
 &lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
 고객, PO(Product Owner), Dev, Test, Ops, 보안팀 역할을 설정했습니다.
&lt;/p&gt;
&lt;p&gt;
 IT서비스를 기획, 개발, 운영하는데 필요한 팀간의 사일로를 방지하고 현업하는지 알아보겠습니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;h1 id=&quot;CI/CDStepByStep-요구사항접수,서비스기획&quot;&gt;
 요구사항 접수, 서비스 기획
&lt;/h1&gt;
&lt;p&gt;
 &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
  &lt;img src=&quot;/assets/images/63373558/6&quot;/&gt;
 &lt;/span&gt;
 고객께서는 Jira Service Desk 또는 Jira Software로 요구사항을 요청할 수 있습니다.
&lt;/p&gt;
&lt;h2 id=&quot;CI/CDStepByStep-방법1.JiraServiceDesk&quot;&gt;
 &lt;strong&gt;
  방법1. Jira Service Desk
 &lt;/strong&gt;
&lt;/h2&gt;
&lt;p&gt;
 Jira Service Desk는 친숙하고 쉬운 UI를 제공합니다. 외부, 내부 고객에게 제공하여 쉽게 요구사항 접수를 받을 수 있고
&lt;/p&gt;
&lt;p&gt;
 Confluence Space와 연결하여 유사 문제, 해결 방법 Page를 제공합니다. 문제 해결이 매우 빨라질 수 있습니다!
&lt;/p&gt;
&lt;p&gt;
 SLA(
 &lt;span style=&quot;color: rgb(55,58,60);&quot;&gt;
  S
 &lt;/span&gt;
 &lt;span style=&quot;color: rgb(55,58,60);&quot;&gt;
  ervice-
 &lt;/span&gt;
 &lt;span style=&quot;color: rgb(55,58,60);&quot;&gt;
  L
 &lt;/span&gt;
 &lt;span style=&quot;color: rgb(55,58,60);&quot;&gt;
  evel
 &lt;/span&gt;
 &lt;span style=&quot;color: rgb(55,58,60);&quot;&gt;
  A
 &lt;/span&gt;
 &lt;span style=&quot;color: rgb(55,58,60);&quot;&gt;
  greement) 측정할 수 있는 항목도 있습니다. 자세한 사항은 SlideShare에 공유했습니다.
  &lt;a class=&quot;external-link&quot; href=&quot;https://www.slideshare.net/ssuser64f754/jira-service-desk-opensourceconsulting-127446252?qid=e0a39608-49d3-4a4f-8b52-6f1a80fc3f46&amp;amp;v=&amp;amp;b=&amp;amp;from_search=2&quot; rel=&quot;nofollow&quot;&gt;
   (여기)
  &lt;/a&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;span style=&quot;color: rgb(55,58,60);&quot;&gt;
  큰 특징은 고객은 라이선스가 필요 없습니다.
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;strong&gt;
  &lt;a class=&quot;external-link&quot; href=&quot;http://at.osci.kr&quot; rel=&quot;nofollow&quot;&gt;
   http://at.osci.kr
  &lt;/a&gt;
  (저희도 서비스 데스크 운영 중입니다. ^^ )
 &lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
  &lt;img src=&quot;/assets/images/63373558/7&quot;/&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;strong&gt;
  &amp;lt;그림. 서비스 데스크 포탈&amp;gt;
 &lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
  &lt;img src=&quot;/assets/images/63373558/8&quot;/&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;strong&gt;
  &amp;lt;그림. 검색어를 입력하면 관련 Confluence Page를 보여줍니다.&amp;gt;
 &lt;/strong&gt;
&lt;/p&gt;
&lt;ul style=&quot;list-style-type: square;&quot;&gt;
 &lt;li&gt;
  Jira Service Desk는 고객의 요청사항을 접수하는 포탈이 제공됩니다.
 &lt;/li&gt;
 &lt;li&gt;
  프로젝트별 포탈이 생성됩니다. 서비스 별로 프로젝트를 생성하고 포탈을 제공할 수 있습니다.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;CI/CDStepByStep-방법1.요구사항접수&quot;&gt;
 방법1. 요구사항 접수
&lt;/h3&gt;
&lt;p&gt;
 &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
  &lt;img src=&quot;/assets/images/63373558/9&quot;/&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;strong&gt;
  &amp;lt;그림. 요구사항을 접수하는 화면&amp;gt;
 &lt;/strong&gt;
&lt;/p&gt;
&lt;ul style=&quot;list-style-type: square;&quot;&gt;
 &lt;li&gt;
  이슈(티켓) 유형을 선택하여 요청사항을 접수합니다.
 &lt;/li&gt;
 &lt;li&gt;
  입력하는 항목은 Jira Service Desk Admin께서 설정할 수 있습니다.
 &lt;/li&gt;
 &lt;li&gt;
  Summary를 입력할 때 관련 Confluence 문서를 제공합니다.
 &lt;/li&gt;
 &lt;li&gt;
  서비스 팀은 반복적으로 동일하게 일어나는 문제 해결을 Confluence page(지식 베이스)로 제공함으로써
 &lt;/li&gt;
 &lt;li&gt;
  고객이 문제 해결을 더욱 빨리하게 도와줍니다.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
  &lt;img src=&quot;/assets/images/63373558/10&quot;/&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;strong&gt;
  &amp;lt;그림. 요구사항 접수 - 티켓 생성 &amp;gt;
 &lt;/strong&gt;
&lt;/p&gt;
&lt;ul style=&quot;list-style-type: square;&quot;&gt;
 &lt;li&gt;
  생성된 이슈(티켓) 상태를 포탈에서 확인할 수 있습니다.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
  &lt;img src=&quot;/assets/images/63373558/11&quot;/&gt;
 &lt;/span&gt;
 Product Owner또는 Project Leader는 서비스 데스크에 접수된 이슈를 확인합니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
  &lt;img src=&quot;/assets/images/63373558/12&quot;/&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;ul style=&quot;list-style-type: square;&quot;&gt;
 &lt;li&gt;
  서비스 데스크에서 해결하지 못하는 문제는 개발팀에게 요청할 수 있습니다.
 &lt;/li&gt;
 &lt;li&gt;
  Jira Service Desk에서 Jira Software Issue를 연결할 수 있습니다.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
  &lt;img src=&quot;/assets/images/63373558/13&quot;/&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 &amp;lt;그림. 서비스 데스크 프로젝트에서 개발팀 프로젝트 이슈 연결&amp;gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
  &lt;img src=&quot;/assets/images/63373558/14&quot;/&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 &amp;lt;그림. 서비스 데스크 이슈와 Jira Software 이슈 연결&amp;gt;
&lt;/p&gt;
&lt;ul style=&quot;list-style-type: square;&quot;&gt;
 &lt;li&gt;
  서비스 데스크로 접수된 요청사항은 고객의 언어로 이야기를 합니다.
 &lt;/li&gt;
 &lt;li&gt;
  하지만 개발팀은 개발언어, 엔지니어의 언어로 이야기합니다.
 &lt;/li&gt;
 &lt;li&gt;
  서비스 데스크는 중간에서 협업을 돕고 사일로를 방지합니다.
 &lt;/li&gt;
 &lt;li&gt;
  개발팀은 개발에 전념할 수 있겠죠?
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;CI/CDStepByStep-방법2.JiraSoftware&quot;&gt;
 방법2. Jira Software
&lt;/h3&gt;
&lt;ul style=&quot;list-style-type: square;&quot;&gt;
 &lt;li&gt;
  Jira Software에서 바로 요구사항 접수를 할 수 있습니다.
 &lt;/li&gt;
 &lt;li&gt;
  하지만 고객도 Jira Software를 사용하기 때문에 라이선스가 필요합니다.
 &lt;/li&gt;
 &lt;li&gt;
  &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
   &lt;img src=&quot;/assets/images/63373558/15&quot;/&gt;
  &lt;/span&gt;
  나도 라이선스 필요하다해~
 &lt;/li&gt;
 &lt;li&gt;
  IT부서가 아닌 고객은 Jira Software UI가 어렵고 낯설게 느껴질 수 있습니다.
 &lt;/li&gt;
 &lt;li&gt;
  우리는 서비스를 자체적으로 기획하고 만드는 팀이라면
 &lt;/li&gt;
 &lt;li&gt;
  Jira Software로도 충분합니다.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
  &lt;img src=&quot;/assets/images/63373558/16&quot;/&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 &amp;lt;그림. 이슈를 만들고 시작하세요&amp;gt;
&lt;/p&gt;
&lt;h3 id=&quot;CI/CDStepByStep-일하는방법Scrum,Kanban&quot;&gt;
 일하는 방법 Scrum, Kanban
&lt;/h3&gt;
&lt;ul style=&quot;list-style-type: square;&quot;&gt;
 &lt;li&gt;
  Jira Software는 Scrum board와 Kanban board를 생성할 수 있습니다.
 &lt;/li&gt;
 &lt;li&gt;
  Agile 방법으로 일을 진행할 수 있습니다.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;CI/CDStepByStep-JiraWrapup&quot;&gt;
 Jira Wrap up
&lt;/h3&gt;
&lt;ul style=&quot;list-style-type: square;&quot;&gt;
 &lt;li&gt;
  Jira ServiceDesk, Jira Software 로 요구사항을 요청할 수 있습니다.
 &lt;/li&gt;
 &lt;li&gt;
  대외 서비스를 하거나 고객이 많다면 Jira ServiceDesk로 고객을 관리할 수 있습니다.
 &lt;/li&gt;
 &lt;li&gt;
  고객에 내부에 있거나 Jira Software를 같이 사용한다면 Jira Software로 충분합니다.
 &lt;/li&gt;
 &lt;li&gt;
  이슈(티켓, 일감)를 만드는 이유는 이슈 진행 상황을 공유하고 협업과 사일로 현상을 방지할 수 있습니다.
 &lt;/li&gt;
 &lt;li&gt;
  이슈는 시작과 끝이 있습니다. 그래서 설명에 산출물, 많은 정보는 Confluence에 남겨야 합니다.
 &lt;/li&gt;
 &lt;li&gt;
  설명에 포함된 단어는 검색이 어렵고 이슈가 해결 됐을 때 찾기 어렵기 때문입니다.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;CI/CDStepByStep-JiraServiceDeskCaseStudy&quot;&gt;
 Jira Service Desk Case Study
&lt;/h3&gt;
&lt;ul style=&quot;list-style-type: square;&quot;&gt;
 &lt;li&gt;
  Kakao
  &lt;ul style=&quot;list-style-type: square;&quot;&gt;
   &lt;li&gt;
    Jira Service Desk로 프로젝트 생성 요청을 받습니다.
   &lt;/li&gt;
   &lt;li&gt;
    프로젝트 타입, 사용 스킴정보로 프로젝트를 생성합니다.
   &lt;/li&gt;
   &lt;li&gt;
    프로젝트 생성은 자동화 기능을 직접 개발하셨습니다.
   &lt;/li&gt;
   &lt;li&gt;
    내부 사용자들의 다양한 불편 사항을 서비스 데스크로 접수를 받습니다.
   &lt;/li&gt;
   &lt;li&gt;
    평균 응답 시간은 30분이고 SLA 100%를 준수하고 있습니다.
   &lt;/li&gt;
   &lt;li&gt;
    Confluence Page를 연결하여 문제 해결을 빠르게 하고 있습니다.
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;h1 id=&quot;CI/CDStepByStep-팀협업-지식베이스구축&quot;&gt;
 팀 협업 - 지식 베이스 구축
&lt;/h1&gt;
&lt;p&gt;
 &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
  &lt;img src=&quot;/assets/images/63373558/17&quot;/&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;ul style=&quot;list-style-type: square;&quot;&gt;
 &lt;li&gt;
  좋은 생각, 아이디어는 어디에 있을까요?
  &lt;br/&gt;
  우리 머릿속에 있습니다. 그 좋은 것들을 정리한 파일은 어디에 있을까요? 내 컴퓨터 또는 파일 서버에 있습니다.
  &lt;br/&gt;
  이러한 문제점을 해결하기 위해서 쉐어포인트, 구글닥스 등 문서 협업 도구를 사용하지만 이슈(work)와 연결하기는 쉽지 않습니다.
  &lt;br/&gt;
  Confluence는 Jira와 강력한 통합을 지원하면서 언제 어디서나 팀과 협업할 수 있습니다.
  &lt;br/&gt;
  &lt;br/&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
  &lt;img src=&quot;/assets/images/63373558/18&quot;/&gt;
  &lt;img class=&quot;confluence-embedded-image confluence-external-resource confluence-content-image-border&quot; data-image-src=&quot;https://confluence.atlassian.com/doc/files/139459/829076177/2/1504658273643/dashboard-space-page-hierarchy_02.png&quot; height=&quot;462&quot; src=&quot;https://confluence.atlassian.com/doc/files/139459/829076177/2/1504658273643/dashboard-space-page-hierarchy_02.png&quot; width=&quot;600&quot;/&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 &amp;lt;그림. Confluence 구조&amp;gt;
&lt;/p&gt;
&lt;h2 id=&quot;CI/CDStepByStep-Page생성&quot;&gt;
 Page 생성
&lt;/h2&gt;
&lt;p&gt;
 &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
  &lt;img src=&quot;/assets/images/63373558/18&quot;/&gt;
 &lt;/span&gt;
 &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
  &lt;img src=&quot;/assets/images/63373558/19&quot;/&gt;
 &lt;/span&gt;
 &lt;strong style=&quot;letter-spacing: 0.0px;&quot;&gt;
  &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
   &lt;img src=&quot;/assets/images/63373558/20&quot;/&gt;
  &lt;/span&gt;
 &lt;/strong&gt;
 &lt;strong style=&quot;letter-spacing: 0.0px;&quot;&gt;
  &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
   &lt;img src=&quot;/assets/images/63373558/21&quot;/&gt;
  &lt;/span&gt;
 &lt;/strong&gt;
 &lt;strong style=&quot;letter-spacing: 0.0px;&quot;&gt;
  &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
   &lt;img src=&quot;/assets/images/63373558/22&quot;/&gt;
  &lt;/span&gt;
 &lt;/strong&gt;
&lt;/p&gt;
&lt;ul style=&quot;list-style-type: square;&quot;&gt;
 &lt;li&gt;
  모든 사용자는 Page를 만들고 공유할 수 있습니다.
 &lt;/li&gt;
 &lt;li&gt;
  (방법1) 최초의 요청사항을 Confluence로 시작해서 Jira로 시작할 수 있습니다.
 &lt;/li&gt;
 &lt;li&gt;
  (방법2) 최초의 요청사항을 Jira로 시작해서 Confluence에 작성할 수 있습니다.
 &lt;/li&gt;
 &lt;li&gt;
  둘 중 더 좋은 방법은 무엇일까요? 정답은 실무자가 알고 있습니다.
 &lt;/li&gt;
 &lt;li&gt;
  프로세스가 흘러가는데 편하고 어색하지 않는 방법을 추천 드립니다. (감이 안오시면 다 해보는 걸로..)
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
  &lt;img src=&quot;/assets/images/63373558/23&quot;/&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 &amp;lt;그림. 저도 Confluence에서 글을 작성하고 있어요&amp;gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;ul style=&quot;list-style-type: square;&quot;&gt;
 &lt;li&gt;
  Create 버튼으로 Blank Page를 생성하거나
 &lt;/li&gt;
 &lt;li&gt;
  Atlassian에서 제공하는 Template으로 Page를 생성할 수 있어요.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
  &lt;img src=&quot;/assets/images/63373558/24&quot;/&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 &amp;lt;그림. Atlassian에서 제공하는 Template&amp;gt;
&lt;/p&gt;
&lt;ul style=&quot;list-style-type: square;&quot;&gt;
 &lt;li&gt;
  Template도 만들어서 정형화된 문서를 찍어낼 수 있어요.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;CI/CDStepByStep-JiraIssue연결&quot;&gt;
 Jira Issue 연결
&lt;/h2&gt;
&lt;ul style=&quot;list-style-type: square;&quot;&gt;
 &lt;li&gt;
  Confluence Page에서 Jira 이슈를 연결할 수 있습니다.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
  &lt;img src=&quot;/assets/images/63373558/25&quot;/&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;ul style=&quot;list-style-type: square;&quot;&gt;
 &lt;li&gt;
  반대로 Jira issue에서 Confluence Page를 연결할 수 있습니다.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
  &lt;img src=&quot;/assets/images/63373558/26&quot;/&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;ul style=&quot;list-style-type: square;&quot;&gt;
 &lt;li&gt;
  Issue(work)은 일정, 진행 상태, 이해관계자 알림 등이 목적입니다.
 &lt;/li&gt;
 &lt;li&gt;
  Page는 일이 진행되면 필요한 지식이 쌓이는 곳입니다.
 &lt;/li&gt;
 &lt;li&gt;
  목적에 맞게 일, 지식이 저장되고 사일로 현상을 방지하며 필요할 때 또 꺼내서 보기 쉽습니다.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;CI/CDStepByStep-JiraIssueChart&quot;&gt;
 Jira Issue Chart
&lt;/h2&gt;
&lt;ul style=&quot;list-style-type: square;&quot;&gt;
 &lt;li&gt;
  Confluence에서는 Jira이슈 검색으로 차트로 표시할 수 있습니다.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
  &lt;img src=&quot;/assets/images/63373558/27&quot;/&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;h2 id=&quot;CI/CDStepByStep-Notification&quot;&gt;
 Notification
&lt;/h2&gt;
&lt;ul style=&quot;list-style-type: square;&quot;&gt;
 &lt;li&gt;
  Confluence Notification은 신문 구독과 같습니다.
 &lt;/li&gt;
 &lt;li&gt;
  보고싶은 내용을 개인 설정으로 받을 수 있어요.
 &lt;/li&gt;
 &lt;li&gt;
  &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
   &lt;img src=&quot;/assets/images/63373558/28&quot;/&gt;
  &lt;/span&gt;
 &lt;/li&gt;
 &lt;li&gt;
  쉬운 정보 공유와 협업을 촉진 시키는데 이메일 알람이 큰 역할을 합니다.
 &lt;/li&gt;
 &lt;li&gt;
  &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
   &lt;img src=&quot;/assets/images/63373558/29&quot;/&gt;
  &lt;/span&gt;
 &lt;/li&gt;
 &lt;li&gt;
  그 중 일간 업데이트 구독은 24시간 동안 변경 사항을 간단하게 정리해서 메일로 보내줍니다.
 &lt;/li&gt;
 &lt;li&gt;
  물론 공간, 페이지 권한이 있는 사용자들만 볼 수 있습니다.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;CI/CDStepByStep-ConfluenceWrapup&quot;&gt;
 Confluence Wrap up
&lt;/h2&gt;
&lt;ul style=&quot;list-style-type: square;&quot;&gt;
 &lt;li&gt;
  Jira Issue(work)과 산출물을 연결하세요.
 &lt;/li&gt;
 &lt;li&gt;
  Confluence는 최신 정보를 팀과 실시간으로 공유하고 발전 시킵니다.
 &lt;/li&gt;
 &lt;li&gt;
  Jira Comment, Description에는 지식을 남기 마세요. 이슈가 릴리즈 되거나 완료되면 이슈 Comment 찾기 힘들어요.
 &lt;/li&gt;
 &lt;li&gt;
  Confluence ↔ Jira Service Desk 연결로 문제 해결을 최전방에서 해결할 수 있습니다.
 &lt;/li&gt;
 &lt;li&gt;
  &lt;strong&gt;
   내 머릿속, 내 컴퓨터에 지식을 가두지 말고 Confluence에 남기세요.
  &lt;/strong&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;h1 id=&quot;CI/CDStepByStep-Bitbucket-프로페셔널팀을위한Git솔루션&quot;&gt;
 Bitbucket - 프로페셔널 팀을 위한 Git 솔루션
&lt;/h1&gt;
&lt;h2 id=&quot;CI/CDStepByStep-JiraIssue-Branch연결&quot;&gt;
 Jira Issue - Branch 연결
&lt;/h2&gt;
&lt;ul style=&quot;list-style-type: square;&quot;&gt;
 &lt;li&gt;
  Jira Software와 Bitbucket의 통합으로 Branch 생성을 Jira에서 할 수 있습니다.
  &lt;br/&gt;
  &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
   &lt;img src=&quot;/assets/images/63373558/30&quot;/&gt;
  &lt;/span&gt;
  &lt;br/&gt;
  &lt;br/&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;CI/CDStepByStep-PullRequest승인절차&quot;&gt;
 Pull Request 승인 절차
&lt;/h2&gt;
&lt;ul style=&quot;list-style-type: square;&quot;&gt;
 &lt;li&gt;
  Pull Request는 Master Branch에 Merge를 하기위한 절차입니다.
 &lt;/li&gt;
 &lt;li&gt;
  코드 리뷰를 통해서 품질을 향상 시키고 협업을 촉진 시킬 수 있어요
 &lt;/li&gt;
 &lt;li&gt;
  Jira Software는 Branch History와 이슈를 연결하여 보는 최고의 툴입니다.
 &lt;/li&gt;
 &lt;li&gt;
  &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
   &lt;img src=&quot;/assets/images/63373558/31&quot;/&gt;
  &lt;/span&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
   &lt;img src=&quot;/assets/images/63373558/32&quot;/&gt;
  &lt;/span&gt;
  &lt;br/&gt;
  Jira에서 분기점을 만들어 보세요.
  &lt;br/&gt;
  &lt;br/&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
   &lt;img src=&quot;/assets/images/63373558/33&quot;/&gt;
  &lt;/span&gt;
  &lt;br/&gt;
  Bitbucket 과 Application연결이 됐을 때 가능합니다.
  &lt;br/&gt;
  Master Branch에서 Issue key + summray로 생성되네요
  &lt;br/&gt;
  생성 후 Jira에서 Tracking 할 수 있습니다.
 &lt;/li&gt;
 &lt;li&gt;
  &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
   &lt;img src=&quot;/assets/images/63373558/34&quot;/&gt;
  &lt;/span&gt;
 &lt;/li&gt;
 &lt;li&gt;
  Jira에서 Git 상태를 확인하는게 중요합니다.
 &lt;/li&gt;
 &lt;li&gt;
  프로덕트 오너, 리더 등 매니저 그룹은 개발자보다 이슈에 더 포커싱이 되어 있습니다.
 &lt;/li&gt;
 &lt;li&gt;
  Jira에서 이슈를 확인하고 코드를 확인하는 절차를 갖을 수 있습니다.
 &lt;/li&gt;
 &lt;li&gt;
  다른 동료 개발자들도 이슈와 코드를 Jira에서 이슈 상태와 함께 공유할 수 있기 때문에 협업 문화를 잘 구축할 수 있습니다.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
  &lt;img src=&quot;/assets/images/63373558/35&quot;/&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;ul style=&quot;list-style-type: square;&quot;&gt;
 &lt;li&gt;
  개발이 끝나고 Pull Request를 생성하고 Reviewer를 지정하여 승인 절차를 받을 수 있습니다.
 &lt;/li&gt;
 &lt;li&gt;
  PR(Pull Request)는 협업 문화, 코드 품질 향상 등 장점이 많습니다.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;CI/CDStepByStep-Wrapup&quot;&gt;
 Wrap up
&lt;/h2&gt;
&lt;ul style=&quot;list-style-type: square;&quot;&gt;
 &lt;li&gt;
  Jira에서 생성된
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;CI/CDStepByStep-Bamboo&quot;&gt;
 Bamboo
&lt;/h1&gt;
&lt;p&gt;
 &lt;span style=&quot;color: rgb(80,95,121);&quot;&gt;
  Bamboo Server는
 &lt;/span&gt;
 &lt;em style=&quot;text-align: center;&quot;&gt;
  프로페셔널 팀
 &lt;/em&gt;
 &lt;span style=&quot;color: rgb(80,95,121);&quot;&gt;
  이 지속적 통합, 배포를 위해 선택하는 제품입니다.
 &lt;/span&gt;
&lt;/p&gt;
&lt;h2 id=&quot;CI/CDStepByStep-Job생성&quot;&gt;
 Job 생성
&lt;/h2&gt;
&lt;h2 id=&quot;CI/CDStepByStep-BitbucketPullRequestBuild&quot;&gt;
 Bitbucket Pull Request Build
&lt;/h2&gt;
&lt;h2 id=&quot;CI/CDStepByStep-JiraRelease&quot;&gt;
 Jira Release
&lt;/h2&gt;
&lt;h2 id=&quot;CI/CDStepByStep-Wrapup.1&quot;&gt;
 Wrap up
&lt;/h2&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;h1 id=&quot;CI/CDStepByStep-마무리&quot;&gt;
 마무리
&lt;/h1&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 감사합니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;</description>
        <pubDate>Thu, 28 Feb 2019 00:00:00 +0900</pubDate>
        <link>https://tech.osci.kr/2019/02/28/63373558/</link>
        <guid isPermaLink="true">https://tech.osci.kr/2019/02/28/63373558/</guid>
        
        
      </item>
    
      <item>
        <title>Docker Swarm 을 이용한 Container Orchestration 환경 만들기</title>
        <description>&lt;p&gt;
 안녕하세요? 오픈소스컨설팅 한철희 과장입니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 이전 &quot;
 &lt;strong&gt;
  Docker 이해하기
 &lt;/strong&gt;
 &quot; 를 포스팅에 이어, &quot;
 &lt;strong&gt;
  Docker Swarm 을 이용한 Container Orchestration 환경 만들기
 &lt;/strong&gt;
 &quot; 라는 포스팅을 작성하게 되었습니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;em&gt;
  (Review -
  &lt;a class=&quot;external-link&quot; href=&quot;https://tech.osci.kr/docker/2018/09/10/45749387/&quot; rel=&quot;nofollow&quot;&gt;
   Docker 이해하기
  &lt;/a&gt;
 &lt;/em&gt;
 )
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 이전 포스팅에서 Docker 를 직접 사용하면서 여러 장점을 확인했습니다.
&lt;/p&gt;
&lt;p&gt;
 하지만 과연 실무에 적용하면 안정적으로 서비스를 유지하고 운영할 수 있을지에 대해서는 의문을 가지고 있었습니다.
&lt;/p&gt;
&lt;p&gt;
 이러한 의문은 Container 들을 자동으로 관리하게 해주는
 &lt;em&gt;
  Container
 &lt;/em&gt;
 &lt;em&gt;
  Orchestration Tool
 &lt;/em&gt;
 을 활용함으로써 해결을 하게 되었습니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;h1 id=&quot;DockerSwarm을이용한ContainerOrchestration환경만들기-ContainerOrchestration&quot;&gt;
 &lt;em&gt;
  Container Orchestration
 &lt;/em&gt;
&lt;/h1&gt;
&lt;hr/&gt;
&lt;p&gt;
 &lt;span class=&quot;confluence-embedded-file-wrapper image-center-wrapper confluence-embedded-manual-size&quot;&gt;
  &lt;img src=&quot;/assets/images/59736201/0&quot;/&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 컨테이너 오케스트레이션 이란? 다중 컨테이너 패키지 어플리케이션을 배포하는 동안 사용되는 컨테이너, 리소스의 자동화, 정렬, 조정 및 관리를 하는 것을 말합니다.
&lt;/p&gt;
&lt;p&gt;
 위와 같이 많은 오케스트레이션 도구들이 있습니다. 이번 포스팅에서는 쉽게 구성이 가능한 Docker Swarm 을 통해 컨테이너 오케스트레이션을 맛보려고 합니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;h1 id=&quot;DockerSwarm을이용한ContainerOrchestration환경만들기-DockerSwarm&quot;&gt;
 Docker Swarm
&lt;/h1&gt;
&lt;hr/&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;span class=&quot;confluence-embedded-file-wrapper image-center-wrapper&quot;&gt;
  &lt;img src=&quot;/assets/images/59736201/1&quot;/&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 Docker Swarm 이란?
&lt;/p&gt;
&lt;p&gt;
 수많은 컨테이너 오케스트레이션 도구 중의 하나로, 여러 대의 Docker 호스트들을 마치 하나인 것처럼 만들어주는 Orchestration 도구입니다.
&lt;/p&gt;
&lt;p&gt;
 Docker v1.12 이후부터 Docker Swarm Mode 로 별개의 Docker Swarm 엔진에서 Docker 엔진으로 통합되면서 좀 더 간편한 설치가 가능해졌습니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 쉬워진 Docker Swarm 직접 설치 해보도록 하겠습니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;h1 id=&quot;DockerSwarm을이용한ContainerOrchestration환경만들기-DockerSwarm설치&quot;&gt;
 Docker Swarm 설치
&lt;/h1&gt;
&lt;hr/&gt;
&lt;p&gt;
 &lt;span class=&quot;confluence-embedded-file-wrapper image-center-wrapper confluence-embedded-manual-size&quot;&gt;
  &lt;img src=&quot;/assets/images/59736201/2&quot;/&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;
 (Docker Document, How nodes work -
 &lt;a class=&quot;external-link&quot; href=&quot;https://docs.docker.com/engine/swarm/how-swarm-mode-works/nodes/&quot; rel=&quot;nofollow&quot;&gt;
  https://docs.docker.com/engine/swarm/how-swarm-mode-works/nodes/)
 &lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
 위와 같이 기본적으로 Docker Swarm 은 Master 노드와 Worker 노드로 시스템을 구성합니다.
&lt;/p&gt;
&lt;p&gt;
 Master 노드에서는 클러스터 관리 작업을 하고 클러스터 상태 유지, 스케줄링 서비스, Swarm HTTP API Endpoint 를 제공합니다.
&lt;/p&gt;
&lt;p&gt;
 Worker 노드는 컨테이너를 실행하는 역할만 합니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 이번 Master 노드를 Three-Manager 구성으로 하여 컨테이너 오케스트레이션 및 Docker Swarm 안정성에 대해 확인해보도록 하겠습니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;div class=&quot;panel conf-macro output-block&quot; data-hasbody=&quot;true&quot; data-macro-name=&quot;panel&quot; style=&quot;border-color: black;border-style: dashed;border-width: 1px;&quot;&gt;
 &lt;div class=&quot;panelHeader&quot; style=&quot;border-bottom-width: 1px;border-bottom-style: dashed;border-bottom-color: black;&quot;&gt;
  &lt;b&gt;
   System Environment
  &lt;/b&gt;
 &lt;/div&gt;
 &lt;div class=&quot;panelContent&quot;&gt;
  &lt;p&gt;
   OS : CentOS Linux release 7.6.1810 (Core)
  &lt;/p&gt;
  &lt;p&gt;
   Docker Version : docker-1.13.1-88.git07f3374.el7.centos.x86_64
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 &lt;span class=&quot;confluence-embedded-file-wrapper image-center-wrapper confluence-embedded-manual-size&quot;&gt;
  &lt;img src=&quot;/assets/images/59736201/3&quot;/&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 위와 같이 시스템 환경으로 Three-Manager 구성을 하도록 하겠습니다.
&lt;/p&gt;
&lt;p&gt;
 Docker Swarm 이 Docker 엔진과 통합되면서 설치는 일반적인 Docker 설치와 동일해졌습니다.
&lt;/p&gt;
&lt;p&gt;
 설치는 아래와 같습니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;strong&gt;
  &lt;em&gt;
   # yum -y install docker
  &lt;/em&gt;
 &lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;div class=&quot;code panel pdl conf-macro output-block&quot; data-hasbody=&quot;true&quot; data-macro-name=&quot;code&quot; style=&quot;border-width: 1px;&quot;&gt;
 &lt;div class=&quot;codeContent panelContent pdl&quot;&gt;
  &lt;pre class=&quot;syntaxhighlighter-pre&quot; data-syntaxhighlighter-params=&quot;brush: bash; gutter: false; theme: Emacs&quot; data-theme=&quot;Emacs&quot;&gt;[root@manager1 ~]# yum -y install docker

&amp;lt;중략&amp;gt;

Installed:
  docker.x86_64 2:1.13.1-88.git07f3374.el7.centos

Dependency Installed:
  PyYAML.x86_64 0:3.10-11.el7                                                     atomic-registries.x86_64 1:1.22.1-26.gitb507039.el7.centos            audit-libs-python.x86_64 0:2.8.4-4.el7                               checkpolicy.x86_64 0:2.5-8.el7
  container-selinux.noarch 2:2.74-1.el7                                           container-storage-setup.noarch 0:0.11.0-2.git5eaf76c.el7              containers-common.x86_64 1:0.1.31-7.gitb0b750d.el7.centos            docker-client.x86_64 2:1.13.1-88.git07f3374.el7.centos
  docker-common.x86_64 2:1.13.1-88.git07f3374.el7.centos                          libcgroup.x86_64 0:0.41-20.el7                                        libseccomp.x86_64 0:2.3.1-3.el7                                      libsemanage-python.x86_64 0:2.5-14.el7
  libyaml.x86_64 0:0.1.4-11.el7_0                                                 oci-register-machine.x86_64 1:0-6.git2b44233.el7                      oci-systemd-hook.x86_64 1:0.1.18-2.git3efe246.el7                    oci-umount.x86_64 2:2.3.4-2.git87f9237.el7
  policycoreutils-python.x86_64 0:2.5-29.el7_6.1                                  python-IPy.noarch 0:0.75-6.el7                                        python-backports.x86_64 0:1.0-8.el7                                  python-backports-ssl_match_hostname.noarch 0:3.5.0.1-1.el7
  python-ipaddress.noarch 0:1.0.16-2.el7                                          python-pytoml.noarch 0:0.1.14-1.git7dea353.el7                        python-setuptools.noarch 0:0.9.8-7.el7                               setools-libs.x86_64 0:3.3.8-4.el7
  subscription-manager-rhsm-certificates.x86_64 0:1.21.10-3.el7.centos            yajl.x86_64 0:2.0.4-4.el7

Dependency Updated:
  policycoreutils.x86_64 0:2.5-29.el7_6.1

Complete!

[root@manager1 ~]# systemctl enable docker
Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.
[root@manager1 ~]# systemctl start docker
&lt;/pre&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 위와 같이 모든 Master 노드에 동일하게 설치를 합니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;div class=&quot;code panel pdl conf-macro output-block&quot; data-hasbody=&quot;true&quot; data-macro-name=&quot;code&quot; style=&quot;border-width: 1px;&quot;&gt;
 &lt;div class=&quot;codeContent panelContent pdl&quot;&gt;
  &lt;pre class=&quot;syntaxhighlighter-pre&quot; data-syntaxhighlighter-params=&quot;brush: bash; gutter: false; theme: Emacs&quot; data-theme=&quot;Emacs&quot;&gt;[root@manager1 ~]# systemctl enable docker
Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.
[root@manager1 ~]# systemctl start docker&lt;/pre&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 &lt;strong&gt;
  &lt;em&gt;
   # systemctl enable docker
  &lt;/em&gt;
 &lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;strong&gt;
  &lt;em&gt;
   # systemctl start docker
  &lt;/em&gt;
 &lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
 각 노드 별로 Docker 서비스를 시작합니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;div class=&quot;code panel pdl conf-macro output-block&quot; data-hasbody=&quot;true&quot; data-macro-name=&quot;code&quot; style=&quot;border-width: 1px;&quot;&gt;
 &lt;div class=&quot;codeContent panelContent pdl&quot;&gt;
  &lt;pre class=&quot;syntaxhighlighter-pre&quot; data-syntaxhighlighter-params=&quot;brush: bash; gutter: false; theme: Emacs&quot; data-theme=&quot;Emacs&quot;&gt;[root@manager1 ~]# systemctl status docker
● docker.service - Docker Application Container Engine
   Loaded: loaded (/usr/lib/systemd/system/docker.service; enabled; vendor preset: disabled)
   Active: active (running) since 월 2019-02-11 14:14:37 KST; 2min 54s ago
     Docs: http://docs.docker.com
 Main PID: 14694 (dockerd-current)
   CGroup: /system.slice/docker.service
           ├─14694 /usr/bin/dockerd-current --add-runtime docker-runc=/usr/libexec/docker/docker-runc-current --default-runtime=docker-runc --exec-opt native.cgroupdriver=systemd --userland-proxy-path=/usr/libexec/docker/docker-proxy-current --init-path=/usr/libexec/docker/docker-init-cu...
           └─14701 /usr/bin/docker-containerd-current -l unix:///var/run/docker/libcontainerd/docker-containerd.sock --metrics-interval=0 --start-timeout 2m --state-dir /var/run/docker/libcontainerd/containerd --shim docker-containerd-shim --runtime docker-runc --runtime-args --systemd-c...

&lt;/pre&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 &lt;strong&gt;
  &lt;em&gt;
   # systemctl status docker
  &lt;/em&gt;
 &lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
 설치가 완료되면 Docker 서비스를 시작하고 위와 같이 정상적으로 시작되었는지 확인합니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;h1 id=&quot;DockerSwarm을이용한ContainerOrchestration환경만들기-DockerSwarminit&quot;&gt;
 Docker Swarm init
&lt;/h1&gt;
&lt;hr/&gt;
&lt;p&gt;
 Docker Swarm 를 구성하기 위해 아래와 같이 명령 수행을 합니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;strong&gt;
  &lt;em&gt;
   # docker swarm init --advertise-addr [Manager Node IP]
  &lt;/em&gt;
 &lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;div class=&quot;code panel pdl conf-macro output-block&quot; data-hasbody=&quot;true&quot; data-macro-name=&quot;code&quot; style=&quot;border-width: 1px;&quot;&gt;
 &lt;div class=&quot;codeContent panelContent pdl&quot;&gt;
  &lt;pre class=&quot;syntaxhighlighter-pre&quot; data-syntaxhighlighter-params=&quot;brush: bash; gutter: false; theme: Emacs&quot; data-theme=&quot;Emacs&quot;&gt;[root@manager1 ~]# docker swarm init --advertise-addr 192.168.13.176
Swarm initialized: current node (y8ul9r3jq0rgt9k3vbvrayeyg) is now a manager.

To add a worker to this swarm, run the following command:

    docker swarm join \
    --token SWMTKN-1-2m3tqsm8ly45vpd5i80p4bkor5zaohfmultu4cdnvfpg8yxmuk-bv8adgschaygmg9icehekb9wg \
    192.168.13.176:2377

To add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.&lt;/pre&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 위와 같이 초기화를 진행하면 Worker 노드를 추가하는 token 값으로 명령어가 자동 생성됩니다.
&lt;/p&gt;
&lt;p&gt;
 해당 명령을 Worker 노드에 입력하면 해당 노드는 Worker 노드가 됩니다.
&lt;/p&gt;
&lt;p&gt;
 Master 노드(Manager 노드)를 추가하기 위해서는
&lt;/p&gt;
&lt;p&gt;
 &lt;strong&gt;
  &lt;em&gt;
   # docker swarm join-token manager
  &lt;/em&gt;
 &lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
 명령을 통해 명령어를 생성해야됩니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;div class=&quot;code panel pdl conf-macro output-block&quot; data-hasbody=&quot;true&quot; data-macro-name=&quot;code&quot; style=&quot;border-width: 1px;&quot;&gt;
 &lt;div class=&quot;codeContent panelContent pdl&quot;&gt;
  &lt;pre class=&quot;syntaxhighlighter-pre&quot; data-syntaxhighlighter-params=&quot;brush: bash; gutter: false; theme: Emacs&quot; data-theme=&quot;Emacs&quot;&gt;# docker swarm join-token manager
To add a manager to this swarm, run the following command:

    docker swarm join \
    --token SWMTKN-1-2m3tqsm8ly45vpd5i80p4bkor5zaohfmultu4cdnvfpg8yxmuk-9ghru6puwdvqms3bn7zqtiyvt \
    192.168.13.176:2377&lt;/pre&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 Manager 연결을 위해 생성된 명령을 나머지 Manager 노드에 아래와 같이 입력합니다.
&lt;/p&gt;
&lt;div class=&quot;code panel pdl conf-macro output-block&quot; data-hasbody=&quot;true&quot; data-macro-name=&quot;code&quot; style=&quot;border-width: 1px;&quot;&gt;
 &lt;div class=&quot;codeContent panelContent pdl&quot;&gt;
  &lt;pre class=&quot;syntaxhighlighter-pre&quot; data-syntaxhighlighter-params=&quot;brush: bash; gutter: false; theme: Emacs&quot; data-theme=&quot;Emacs&quot;&gt;[root@manager2 ~]#     docker swarm join \
&amp;gt;     --token SWMTKN-1-2m3tqsm8ly45vpd5i80p4bkor5zaohfmultu4cdnvfpg8yxmuk-9ghru6puwdvqms3bn7zqtiyvt \
&amp;gt;     192.168.13.176:2377
This node joined a swarm as a manager.

[root@manager3 ~]#     docker swarm join \
&amp;gt;     --token SWMTKN-1-2m3tqsm8ly45vpd5i80p4bkor5zaohfmultu4cdnvfpg8yxmuk-9ghru6puwdvqms3bn7zqtiyvt \
&amp;gt;     192.168.13.176:2377
This node joined a swarm as a manager.
&lt;/pre&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;h2 id=&quot;DockerSwarm을이용한ContainerOrchestration환경만들기-DockerSwarm구성확인&quot;&gt;
 Docker Swarm 구성 확인
&lt;/h2&gt;
&lt;hr/&gt;
&lt;div class=&quot;code panel pdl conf-macro output-block&quot; data-hasbody=&quot;true&quot; data-macro-name=&quot;code&quot; style=&quot;border-width: 1px;&quot;&gt;
 &lt;div class=&quot;codeContent panelContent pdl&quot;&gt;
  &lt;pre class=&quot;syntaxhighlighter-pre&quot; data-syntaxhighlighter-params=&quot;brush: bash; gutter: false; theme: Emacs&quot; data-theme=&quot;Emacs&quot;&gt;[root@manager1 ~]# docker node ls
ID                           HOSTNAME              STATUS  AVAILABILITY  MANAGER STATUS
lrt89xwkugty162qk8c2av5ek    manager2.example.com  Ready   Active        Reachable
y8ul9r3jq0rgt9k3vbvrayeyg *  manager1.example.com  Ready   Active        Leader
yqerq5ujds38t0izzlp03dbhd    manager3.example.com  Ready   Active        Reachable

&lt;/pre&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 &lt;strong&gt;
  &lt;em&gt;
   # docker node ls
  &lt;/em&gt;
 &lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
 위와 같이 manager 로 노드들이 연결된 것을 확인 할 수 있습니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;h1 id=&quot;DockerSwarm을이용한ContainerOrchestration환경만들기-DockerSwarm기본사용법&quot;&gt;
 Docker Swarm 기본 사용법
&lt;/h1&gt;
&lt;hr/&gt;
&lt;p&gt;
 Docker Swarm 에서 사용되는 기본적인 명령을 간단한 Apache 서비스를 기동하면서 확인 해보겠습니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;h2 id=&quot;DockerSwarm을이용한ContainerOrchestration환경만들기-DockerSwarmService생성&quot;&gt;
 Docker Swarm Service 생성
&lt;/h2&gt;
&lt;hr/&gt;
&lt;p&gt;
 Docker Swarm 명령어는 기존의 docker 명령어와 크게 다른 점은 없습니다.
&lt;/p&gt;
&lt;p&gt;
 기본적으로 docker run 에서 사용되는 옵션을 그대로 사용 할 수 있습니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;em&gt;
  &lt;br/&gt;
 &lt;/em&gt;
&lt;/p&gt;
&lt;p&gt;
 아래 명령을 통해 Docker Swarm Mode 로 컨테이너를 실행 할 수 있습니다.
 &lt;em&gt;
  &lt;br/&gt;
 &lt;/em&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;strong&gt;
  &lt;em&gt;
   Usage:  docker service create [OPTIONS] IMAGE [COMMAND] [ARG...]
  &lt;/em&gt;
 &lt;/strong&gt;
&lt;/p&gt;
&lt;div class=&quot;code panel pdl conf-macro output-block&quot; data-hasbody=&quot;true&quot; data-macro-name=&quot;code&quot; style=&quot;border-width: 1px;&quot;&gt;
 &lt;div class=&quot;codeContent panelContent pdl&quot;&gt;
  &lt;pre class=&quot;syntaxhighlighter-pre&quot; data-syntaxhighlighter-params=&quot;brush: bash; gutter: false; theme: Emacs&quot; data-theme=&quot;Emacs&quot;&gt;[root@manager1 ~]# docker service create --name web httpd
xocc6zwdulliijqpypwby764d&lt;/pre&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;h2 id=&quot;DockerSwarm을이용한ContainerOrchestration환경만들기-DockerSwarmService확인&quot;&gt;
 Docker Swarm Service 확인
&lt;/h2&gt;
&lt;hr/&gt;
&lt;p&gt;
 생성된 서비스가 정상적으로 실행이 되었는지는 아래 명령으로 확인이 가능합니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;strong&gt;
  &lt;em&gt;
   Usage:    docker service ls
  &lt;/em&gt;
 &lt;/strong&gt;
&lt;/p&gt;
&lt;div class=&quot;code panel pdl conf-macro output-block&quot; data-hasbody=&quot;true&quot; data-macro-name=&quot;code&quot; style=&quot;border-width: 1px;&quot;&gt;
 &lt;div class=&quot;codeContent panelContent pdl&quot;&gt;
  &lt;pre class=&quot;syntaxhighlighter-pre&quot; data-syntaxhighlighter-params=&quot;brush: bash; gutter: false; theme: Emacs&quot; data-theme=&quot;Emacs&quot;&gt;[root@manager1 ~]# docker service ls
ID            NAME  MODE        REPLICAS  IMAGE
xocc6zwdulli  web   replicated  0/1       httpd:latest
[root@manager1 ~]# docker service ls
ID            NAME  MODE        REPLICAS  IMAGE
xocc6zwdulli  web   replicated  1/1       httpd:latest&lt;/pre&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 처음 REPLICAS 필드가 0/1 로 시작해서 1/1 로 변경이 되면 컨테이너가 정상적으로 실행이 된 것으로 확인 할 수 있습니다.
&lt;/p&gt;
&lt;p&gt;
 해당 필드를 통해 컨테이너가 문제가 생겼는지 정상 작동 중인지 확인이 가능합니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 또한 각 서비스 별로 자세한 정보를 확인하는 명령은 아래와 같습니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;strong&gt;
  &lt;em&gt;
   Usage:    docker service ps [SERVICE]
  &lt;/em&gt;
 &lt;/strong&gt;
&lt;/p&gt;
&lt;div class=&quot;code panel pdl conf-macro output-block&quot; data-hasbody=&quot;true&quot; data-macro-name=&quot;code&quot; style=&quot;border-width: 1px;&quot;&gt;
 &lt;div class=&quot;codeContent panelContent pdl&quot;&gt;
  &lt;pre class=&quot;syntaxhighlighter-pre&quot; data-syntaxhighlighter-params=&quot;brush: bash; gutter: false; theme: Emacs&quot; data-theme=&quot;Emacs&quot;&gt;[root@manager1 ~]# docker service ps web
ID            NAME   IMAGE         NODE                  DESIRED STATE  CURRENT STATE          ERROR  PORTS
9x3qvcl5seif  web.1  httpd:latest  manager2.example.com  Running        Running 2 minutes ago&lt;/pre&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&quot;DockerSwarm을이용한ContainerOrchestration환경만들기-DockerSwarmServiceScale-out&quot;&gt;
 Docker Swarm Service Scale-out
&lt;/h2&gt;
&lt;hr/&gt;
&lt;p&gt;
 생성된 서비스를 복제하여 분산 서비스를 할 수 있도록 합니다.(Scale-out)
&lt;/p&gt;
&lt;p&gt;
 &lt;strong&gt;
  &lt;em&gt;
   Usage:  docker service scale SERVICE=REPLICAS [SERVICE=REPLICAS...]
  &lt;/em&gt;
 &lt;/strong&gt;
&lt;/p&gt;
&lt;div class=&quot;code panel pdl conf-macro output-block&quot; data-hasbody=&quot;true&quot; data-macro-name=&quot;code&quot; style=&quot;border-width: 1px;&quot;&gt;
 &lt;div class=&quot;codeContent panelContent pdl&quot;&gt;
  &lt;pre class=&quot;syntaxhighlighter-pre&quot; data-syntaxhighlighter-params=&quot;brush: bash; gutter: false; theme: Emacs&quot; data-theme=&quot;Emacs&quot;&gt;[root@manager1 ~]# docker service scale web=3
web scaled to 3

[root@manager1 ~]# docker service ls
ID            NAME  MODE        REPLICAS  IMAGE
xocc6zwdulli  web   replicated  1/3       httpd:latest

[root@manager1 ~]# docker service ls
ID            NAME  MODE        REPLICAS  IMAGE
xocc6zwdulli  web   replicated  3/3       httpd:latest

[root@manager1 ~]# for i in $(cat /etc/hosts | grep manager| awk '{print $1}')
&amp;gt; do
&amp;gt; ssh root@$i &quot;docker ps -a&quot;
&amp;gt; done
CONTAINER ID        IMAGE                                                                           COMMAND              CREATED             STATUS              PORTS               NAMES
e517f6af9ebd        httpd@sha256:d12c036427f436978f2d4397ad2bd6b5b8f7b03003b7a1da084eb228ef25b7d2   &quot;httpd-foreground&quot;   5 minutes ago       Up 5 minutes        80/tcp              web.2.57p0vzbkqymvak5t5rw6g42k9
CONTAINER ID        IMAGE                                                                           COMMAND              CREATED             STATUS              PORTS               NAMES
91dddedf7374        httpd@sha256:d12c036427f436978f2d4397ad2bd6b5b8f7b03003b7a1da084eb228ef25b7d2   &quot;httpd-foreground&quot;   9 minutes ago       Up 9 minutes        80/tcp              web.1.9x3qvcl5seifoidt5jy4fm3oa
CONTAINER ID        IMAGE                                                                           COMMAND              CREATED             STATUS              PORTS               NAMES
2a3ade0887f9        httpd@sha256:d12c036427f436978f2d4397ad2bd6b5b8f7b03003b7a1da084eb228ef25b7d2   &quot;httpd-foreground&quot;   5 minutes ago       Up 5 minutes        80/tcp              web.3.aqlqfena08g9c50tdl5vgb4ju

[root@manager1 ~]# docker service ps web
ID            NAME   IMAGE         NODE                  DESIRED STATE  CURRENT STATE          ERROR  PORTS
9x3qvcl5seif  web.1  httpd:latest  manager2.example.com  Running        Running 9 minutes ago
57p0vzbkqymv  web.2  httpd:latest  manager1.example.com  Running        Running 6 minutes ago
aqlqfena08g9  web.3  httpd:latest  manager3.example.com  Running        Running 6 minutes ago
&lt;/pre&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&quot;DockerSwarm을이용한ContainerOrchestration환경만들기-DockerSwarmService제거&quot;&gt;
 Docker Swarm Service 제거
&lt;/h2&gt;
&lt;hr/&gt;
&lt;p&gt;
 생성한 서비스의 제거 및 종료는 아래 명령을 통해 가능합니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;strong&gt;
  &lt;em&gt;
   Usage:  docker service rm SERVICE [SERVICE...]
  &lt;/em&gt;
 &lt;/strong&gt;
&lt;/p&gt;
&lt;div class=&quot;code panel pdl conf-macro output-block&quot; data-hasbody=&quot;true&quot; data-macro-name=&quot;code&quot; style=&quot;border-width: 1px;&quot;&gt;
 &lt;div class=&quot;codeContent panelContent pdl&quot;&gt;
  &lt;pre class=&quot;syntaxhighlighter-pre&quot; data-syntaxhighlighter-params=&quot;brush: bash; gutter: false; theme: Emacs&quot; data-theme=&quot;Emacs&quot;&gt;[root@manager1 ~]# docker service rm web
web
[root@manager1 ~]# docker service ls
ID  NAME  MODE  REPLICAS  IMAGE
[root@manager1 ~]# docker service ps web
Error: No such service: web
&lt;/pre&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 지금까지 Docker Swarm 에서 많이 사용되는 명령어들을 보면서 간단한 웹 서비스를 구성하였습니다.
&lt;/p&gt;
&lt;p&gt;
 이제부터는 Build 된 PHP Docker Image를 이용해서 Docker Swarm 을 어떻게 실무에 적용 할 수 있는지 확인해 보도록 하겠습니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;h1 id=&quot;DockerSwarm을이용한ContainerOrchestration환경만들기-PHPDemo&quot;&gt;
 PHP Demo
&lt;/h1&gt;
&lt;hr/&gt;
&lt;h2 id=&quot;DockerSwarm을이용한ContainerOrchestration환경만들기-DockerImage관리를위한사설Registry생성&quot;&gt;
 Docker Image 관리를 위한 사설 Registry 생성
&lt;/h2&gt;
&lt;hr/&gt;
&lt;p&gt;
 각 Docker Host 노드에 같은 이미지를 배포 하기 위해서는 두가지 방법이 있습니다.
&lt;/p&gt;
&lt;p&gt;
 그 방법은 DockerHub 를 활용하는 방법 및 사설 Registry 를 만들어서 사용하는 방법입니다.
&lt;/p&gt;
&lt;p&gt;
 어떤 방법을 사용하는 것이 좋을지는 운영 환경에 맞게 선택을 하는 것이 좋습니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 이번 PHP Demo 에서는 사설 Registry 를 생성하여 Docker Image 를 관리하도록 하겠습니다.
&lt;/p&gt;
&lt;p&gt;
 먼저 Docker Registry 를 생성하기 전에 insecure-registries 옵션을 설정하여 인증되지 않은 Registry를 사용 할 수 있도록 해야됩니다.
&lt;/p&gt;
&lt;p&gt;
 이미지를 사용해야되는 모든 노드를 아래와 같이 수정을 합니다. 이후 docker 서비스를 재시작합니다.
&lt;/p&gt;
&lt;div class=&quot;code panel pdl conf-macro output-block&quot; data-hasbody=&quot;true&quot; data-macro-name=&quot;code&quot; style=&quot;border-width: 1px;&quot;&gt;
 &lt;div class=&quot;codeContent panelContent pdl&quot;&gt;
  &lt;pre class=&quot;syntaxhighlighter-pre&quot; data-syntaxhighlighter-params=&quot;brush: bash; gutter: false; theme: Emacs&quot; data-theme=&quot;Emacs&quot;&gt;# vi /etc/docker/daemon.json
{
  &quot;insecure-registries&quot; : [&quot;manager1.example.com:5000&quot;]
}
# systemctl restart docker&lt;/pre&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p class=&quot;auto-cursor-target&quot;&gt;
 위와 같이 manager1.example.com 만 선택을 하였는데 Load Balancer 가 있다면 해당 IP 혹은 Domain 명을 추가해도 됩니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 사설 Registry 를 생성하기 위해서는 아래와 같이 진행합니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;strong&gt;
  &lt;em&gt;
   # docker service create --name registry -p 5000:5000 registry
  &lt;/em&gt;
 &lt;/strong&gt;
&lt;/p&gt;
&lt;div class=&quot;code panel pdl conf-macro output-block&quot; data-hasbody=&quot;true&quot; data-macro-name=&quot;code&quot; style=&quot;border-width: 1px;&quot;&gt;
 &lt;div class=&quot;codeContent panelContent pdl&quot;&gt;
  &lt;pre class=&quot;syntaxhighlighter-pre&quot; data-syntaxhighlighter-params=&quot;brush: bash; gutter: false; theme: Emacs&quot; data-theme=&quot;Emacs&quot;&gt;# docker service create --name registry -p 5000:5000 registry
z3gl3pie7xm9vjfyetot9zi3q

[root@manager1 ~]# docker service ls
ID            NAME      MODE        REPLICAS  IMAGE
z3gl3pie7xm9  registry  replicated  1/1       registry:latest

[root@manager1 dockerfile]# docker service ps registry
ID            NAME        IMAGE            NODE                  DESIRED STATE  CURRENT STATE          ERROR  PORTS
ct6zhchfla8s  registry.1  registry:latest  manager3.example.com  Running        Running 6 minutes ago
&lt;/pre&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 위와 같이 현재 manager3.example.com Docker Host 에 컨테이너가 실행중인 것을 확인 할 수 있습니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;h2 id=&quot;DockerSwarm을이용한ContainerOrchestration환경만들기-BuildTheDockerImage&quot;&gt;
 Build The Docker Image
&lt;/h2&gt;
&lt;hr/&gt;
&lt;p&gt;
 아래와 같이 Dockerfile을 생성하여 PHP 서비스가 가능한 Docker Image 를 Build 합니다.
&lt;/p&gt;
&lt;p style=&quot;margin-left: 30.0px;&quot;&gt;
 &amp;gt; 참고로 아래 사용된 예제 파일은 github 에서 Clone 할 수 있습니다.
&lt;/p&gt;
&lt;p style=&quot;margin-left: 30.0px;&quot;&gt;
 &lt;span&gt;
  &amp;gt;
 &lt;/span&gt;
 &lt;a class=&quot;external-link&quot; href=&quot;https://github.com/chhanz/docker-swarm-demo&quot; rel=&quot;nofollow&quot;&gt;
  &lt;span&gt;
   https://github.com/chhanz/docker-swarm-demo
  &lt;/span&gt;
 &lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 PHP Demo 에 사용되는 파일 구성 및 내용은 아래와 같습니다.
&lt;/p&gt;
&lt;div class=&quot;code panel pdl conf-macro output-block&quot; data-hasbody=&quot;true&quot; data-macro-name=&quot;code&quot; style=&quot;border-width: 1px;&quot;&gt;
 &lt;div class=&quot;codeContent panelContent pdl&quot;&gt;
  &lt;pre class=&quot;syntaxhighlighter-pre&quot; data-syntaxhighlighter-params=&quot;brush: bash; gutter: false; theme: Emacs&quot; data-theme=&quot;Emacs&quot;&gt;[root@manager1 docker-swarm-demo]# tree
.
├── Dockerfile
├── README.md
└── htdocs
    └── index.php

1 directory, 3 files

# vi Dockerfile
FROM php:7.2-apache
MAINTAINER chhanz &amp;lt;chhan@osci.kr&amp;gt;

ADD htdocs/index.php /var/www/html/index.php

EXPOSE 80

[root@manager1 docker-swarm-demo]# cat htdocs/index.php
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;center&amp;gt;
&amp;lt;b&amp;gt;
&amp;lt;?php
$host=gethostname();
echo &quot;Container Name : &quot;;
echo $host;
?&amp;gt;
&amp;lt;p&amp;gt; Image Version : orignal&amp;lt;/p&amp;gt;
&amp;lt;/b&amp;gt;
&amp;lt;/center&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/pre&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 제가 포스팅한 내용을 보신 분이라면 Docker Build는 어렵지 않습니다. ㅎㅎ
&lt;/p&gt;
&lt;p&gt;
 Image 를 Build 합니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;strong&gt;
  &lt;em&gt;
   # docker build -t phpdemo:v1 .
  &lt;/em&gt;
 &lt;/strong&gt;
&lt;/p&gt;
&lt;div class=&quot;code panel pdl conf-macro output-block&quot; data-hasbody=&quot;true&quot; data-macro-name=&quot;code&quot; style=&quot;border-width: 1px;&quot;&gt;
 &lt;div class=&quot;codeContent panelContent pdl&quot;&gt;
  &lt;pre class=&quot;syntaxhighlighter-pre&quot; data-syntaxhighlighter-params=&quot;brush: bash; gutter: false; theme: Emacs&quot; data-theme=&quot;Emacs&quot;&gt;[root@manager1 docker-swarm-demo]# docker build -t phpdemo:v1 .
Sending build context to Docker daemon 4.608 kB
Step 1/4 : FROM php:7.2-apache
 ---&amp;gt; 2424d6c5e6b9
Step 2/4 : MAINTAINER chhanz &amp;lt;chhan@osci.kr&amp;gt;
 ---&amp;gt; Running in 1257b21144c7
 ---&amp;gt; 2beeadfdb912
Removing intermediate container 1257b21144c7
Step 3/4 : ADD htdocs/index.php /var/www/html/index.php
 ---&amp;gt; 62a4d63e0c2f
Removing intermediate container 06a5fe09c5c5
Step 4/4 : EXPOSE 80
 ---&amp;gt; Running in 310137303fa5
 ---&amp;gt; c62e0ad19807
Removing intermediate container 310137303fa5
Successfully built c62e0ad19807
[root@manager1 docker-swarm-demo]#&lt;/pre&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Build 가 완료된 Image 를 사설 Registry 에 Push 합니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;strong&gt;
  &lt;em&gt;
   // Docker Image Tag 변경
  &lt;/em&gt;
 &lt;/strong&gt;
&lt;/p&gt;
&lt;p style=&quot;margin-left: 30.0px;&quot;&gt;
 &lt;strong&gt;
  &lt;em&gt;
   # docker tag phpdemo:v1 manager1.example.com:5000/phpdemo:v1
  &lt;/em&gt;
 &lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;strong&gt;
  &lt;em&gt;
   // Docker Image Push
  &lt;/em&gt;
 &lt;/strong&gt;
&lt;/p&gt;
&lt;p style=&quot;margin-left: 30.0px;&quot;&gt;
 &lt;strong&gt;
  &lt;em&gt;
   # docker push manager1.example.com:5000/phpdemo:v1
  &lt;/em&gt;
 &lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;div class=&quot;code panel pdl conf-macro output-block&quot; data-hasbody=&quot;true&quot; data-macro-name=&quot;code&quot; style=&quot;border-width: 1px;&quot;&gt;
 &lt;div class=&quot;codeContent panelContent pdl&quot;&gt;
  &lt;pre class=&quot;syntaxhighlighter-pre&quot; data-syntaxhighlighter-params=&quot;brush: bash; gutter: false; theme: Emacs&quot; data-theme=&quot;Emacs&quot;&gt;[root@manager1 docker-swarm-demo]# docker images
REPOSITORY           TAG                 IMAGE ID            CREATED             SIZE
phpdemo              v1                  c62e0ad19807        18 seconds ago      378 MB
docker.io/php        7.2-apache          2424d6c5e6b9        3 days ago          378 MB
docker.io/registry   &amp;lt;none&amp;gt;              d0eed8dad114        12 days ago         25.8 MB
[root@manager1 docker-swarm-demo]# docker tag phpdemo:v1 manager1.example.com:5000/phpdemo:v1
[root@manager1 docker-swarm-demo]# docker images
REPOSITORY                          TAG                 IMAGE ID            CREATED             SIZE
manager1.example.com:5000/phpdemo   v1                  c62e0ad19807        30 seconds ago      378 MB
phpdemo                             v1                  c62e0ad19807        30 seconds ago      378 MB
docker.io/php                       7.2-apache          2424d6c5e6b9        3 days ago          378 MB
docker.io/registry                  &amp;lt;none&amp;gt;              d0eed8dad114        12 days ago         25.8 MB
[root@manager1 docker-swarm-demo]# docker push manager1.example.com:5000/phpdemo:v1
The push refers to a repository [manager1.example.com:5000/phpdemo]
a0df0b1bee34: Pushed
29f6f251b4d2: Pushed
28255a6692d8: Pushed
d9b14cb17d8b: Pushed
725c91d33681: Pushed
005a87a63ac9: Pushed
66fd43b3ea3b: Pushed
20d941ba3638: Pushed
eb3e3e0ec224: Pushed
3843f6b0eab9: Pushed
63fc1837f67c: Pushed
c68025fbc229: Pushed
ec6f4f0a90dc: Pushed
0a07e81f5da3: Pushed
v1: digest: sha256:58b33a5f39d60a3f0ba860a1bcbc98f5f767d934c9b1c057cee4b8c1a192fd06 size: 3242
[root@manager1 docker-swarm-demo]#&lt;/pre&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;h2 id=&quot;DockerSwarm을이용한ContainerOrchestration환경만들기-서비스배포!&quot;&gt;
 서비스 배포!
&lt;/h2&gt;
&lt;hr/&gt;
&lt;p&gt;
 생성된 따끈한 Image 를 이용해서 Docker Swarm Mode 로 서비스를 배포하도록 하겠습니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;strong&gt;
  &lt;em&gt;
   # docker service create --name phpdemo -p 80:80 manager1.example.com:5000/phpdemo:v1
  &lt;/em&gt;
 &lt;/strong&gt;
&lt;/p&gt;
&lt;div class=&quot;code panel pdl conf-macro output-block&quot; data-hasbody=&quot;true&quot; data-macro-name=&quot;code&quot; style=&quot;border-width: 1px;&quot;&gt;
 &lt;div class=&quot;codeContent panelContent pdl&quot;&gt;
  &lt;pre class=&quot;syntaxhighlighter-pre&quot; data-syntaxhighlighter-params=&quot;brush: bash; gutter: false; theme: Emacs&quot; data-theme=&quot;Emacs&quot;&gt;[root@manager1 docker-swarm-demo]# docker service create --name phpdemo -p 80:80 manager1.example.com:5000/phpdemo:v1
mcz67fbul4gmxtjtwc4dvf4n2

// 서비스 시작 중
[root@manager1 docker-swarm-demo]# docker service ls
ID            NAME      MODE        REPLICAS  IMAGE
mcz67fbul4gm  phpdemo   replicated  0/1       manager1.example.com:5000/phpdemo:v1
z3gl3pie7xm9  registry  replicated  1/1       registry:latest
[root@manager1 docker-swarm-demo]# docker service ps phpdemo
ID            NAME       IMAGE                                 NODE                  DESIRED STATE  CURRENT STATE            ERROR  PORTS
m82bq5rgmk7z  phpdemo.1  manager1.example.com:5000/phpdemo:v1  manager2.example.com  Running        Preparing 7 seconds ago

// 서비스 시작 완료
[root@manager1 docker-swarm-demo]# docker service ls
ID            NAME      MODE        REPLICAS  IMAGE
mcz67fbul4gm  phpdemo   replicated  1/1       manager1.example.com:5000/phpdemo:v1
z3gl3pie7xm9  registry  replicated  1/1       registry:latest

[root@manager1 docker-swarm-demo]# docker service ps phpdemo
ID            NAME       IMAGE                                 NODE                  DESIRED STATE  CURRENT STATE          ERROR  PORTS
m82bq5rgmk7z  phpdemo.1  manager1.example.com:5000/phpdemo:v1  manager2.example.com  Running        Running 2 seconds ago
&lt;/pre&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;span class=&quot;confluence-embedded-file-wrapper image-center-wrapper&quot;&gt;
  &lt;img src=&quot;/assets/images/59736201/4&quot;/&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 직접 웹브라우져를 통해 접속해보니 서비스가 정상적으로 작동 되는 것을 확인 할 수 있었습니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;h2 id=&quot;DockerSwarm을이용한ContainerOrchestration환경만들기-서비스복제!&quot;&gt;
 서비스 복제!
&lt;/h2&gt;
&lt;hr/&gt;
&lt;p&gt;
 컨터이너 한개로 서비스를 하기에는 안정성이 너무나도 떨어지고 성능 향상을 위해 컨테이너를 복제합니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;em&gt;
  &lt;strong&gt;
   # docker service scale phpdemo=3
  &lt;/strong&gt;
 &lt;/em&gt;
&lt;/p&gt;
&lt;div class=&quot;code panel pdl conf-macro output-block&quot; data-hasbody=&quot;true&quot; data-macro-name=&quot;code&quot; style=&quot;border-width: 1px;&quot;&gt;
 &lt;div class=&quot;codeContent panelContent pdl&quot;&gt;
  &lt;pre class=&quot;syntaxhighlighter-pre&quot; data-syntaxhighlighter-params=&quot;brush: bash; gutter: false; theme: Emacs&quot; data-theme=&quot;Emacs&quot;&gt;[root@manager1 docker-swarm-demo]# docker service ls
ID            NAME      MODE        REPLICAS  IMAGE
mcz67fbul4gm  phpdemo   replicated  1/1       manager1.example.com:5000/phpdemo:v1
z3gl3pie7xm9  registry  replicated  1/1       registry:latest

// 서비스 복제
[root@manager1 docker-swarm-demo]# docker service scale phpdemo=3
phpdemo scaled to 3

[root@manager1 docker-swarm-demo]# docker service ls
ID            NAME      MODE        REPLICAS  IMAGE
mcz67fbul4gm  phpdemo   replicated  3/3       manager1.example.com:5000/phpdemo:v1
z3gl3pie7xm9  registry  replicated  1/1       registry:latest
[root@manager1 docker-swarm-demo]#

[root@manager1 docker-swarm-demo]# docker service ps phpdemo
ID            NAME       IMAGE                                 NODE                  DESIRED STATE  CURRENT STATE                   ERROR  PORTS
m82bq5rgmk7z  phpdemo.1  manager1.example.com:5000/phpdemo:v1  manager2.example.com  Running        Running 2 minutes ago
09p9qrtxidnw  phpdemo.2  manager1.example.com:5000/phpdemo:v1  manager3.example.com  Running        Running less than a second ago
8x0pcftmzbzw  phpdemo.3  manager1.example.com:5000/phpdemo:v1  manager1.example.com  Running        Running 11 seconds ago
[root@manager1 docker-swarm-demo]#&lt;/pre&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 위와 같이 서비스가 복제가 된 것을 확인 할 수 있습니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 그럼 실제로 어떻게 서비스가 운영되는지 확인해보겠습니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;strong&gt;
  3 Replica 서비스
 &lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
  &lt;img src=&quot;/assets/images/59736201/5&quot;/&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 (상기 GIF 파일은 용량이 커서, 출력이 느릴수도 있습니다.)
&lt;/p&gt;
&lt;p&gt;
 보시는 것과 같이 각기 다른 컨테이너로 Load Balancing 되는 것을 확인 할 수 있습니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 위와 같이 Docker Swarm 이 각기 다른 Docker Host를 Load Balancing 를 하는 이유는 아래와 같습니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;span class=&quot;confluence-embedded-file-wrapper image-center-wrapper confluence-embedded-manual-size&quot;&gt;
  &lt;img src=&quot;/assets/images/59736201/6&quot;/&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 무언가 엄청 복잡해 보이지만 결국은 Ingress Network 를 통해 지정된 포트의 통신은 해당 컨테이너로 자동으로 전달이 될 것입니다.
&lt;/p&gt;
&lt;p&gt;
 자세한 Network Architecture 는 아래 Docker Document 를 확인하는 것이 좋습니다.
&lt;/p&gt;
&lt;p&gt;
 (
 &lt;a class=&quot;external-link&quot; href=&quot;https://success.docker.com/article/networking&quot; rel=&quot;nofollow&quot;&gt;
  https://success.docker.com/article/networking
 &lt;/a&gt;
 )
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;h2 id=&quot;DockerSwarm을이용한ContainerOrchestration환경만들기-서비스RollingUpdate&quot;&gt;
 서비스 Rolling Update
&lt;/h2&gt;
&lt;hr/&gt;
&lt;p&gt;
 서비스를 운영하다보면 업데이트가 필요로한 시기가 있습니다.
&lt;/p&gt;
&lt;p&gt;
 하지만 운영중에 서비스를 중지하고 업데이트를 하는 것은 서비스 DownTime 이 발생하게 되고 그만큼 운영에 힘들게 됩니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 우리 Docker Swarm 과 함께라면 운영중에 서비스를 업데이트가 가능합니다!!!
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 먼저 기존에 만들어진 Docker Image 를 업데이트하도록 하겠습니다.
&lt;/p&gt;
&lt;div class=&quot;code panel pdl conf-macro output-block&quot; data-hasbody=&quot;true&quot; data-macro-name=&quot;code&quot; style=&quot;border-width: 1px;&quot;&gt;
 &lt;div class=&quot;codeContent panelContent pdl&quot;&gt;
  &lt;pre class=&quot;syntaxhighlighter-pre&quot; data-syntaxhighlighter-params=&quot;brush: bash; gutter: false; theme: Emacs&quot; data-theme=&quot;Emacs&quot;&gt;[root@manager1 docker-swarm-demo]# cat htdocs/index.php
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;center&amp;gt;
&amp;lt;b&amp;gt;
&amp;lt;?php
$host=gethostname();
echo &quot;Container Name : &quot;;
echo $host;
?&amp;gt;
&amp;lt;p&amp;gt; Image Version : Update Version v2&amp;lt;/p&amp;gt;
&amp;lt;/b&amp;gt;
&amp;lt;/center&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p class=&quot;auto-cursor-target&quot;&gt;
 핵심 파일인 Index.php 를 수정을 합니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;div class=&quot;code panel pdl conf-macro output-block&quot; data-hasbody=&quot;true&quot; data-macro-name=&quot;code&quot; style=&quot;border-width: 1px;&quot;&gt;
 &lt;div class=&quot;codeContent panelContent pdl&quot;&gt;
  &lt;pre class=&quot;syntaxhighlighter-pre&quot; data-syntaxhighlighter-params=&quot;brush: bash; gutter: false; theme: Emacs&quot; data-theme=&quot;Emacs&quot;&gt;[root@manager1 docker-swarm-demo]# docker build -t phpdemo:v2 .
Sending build context to Docker daemon 4.608 kB
Step 1/4 : FROM php:7.2-apache
 ---&amp;gt; 2424d6c5e6b9
Step 2/4 : MAINTAINER chhanz &amp;lt;chhan@osci.kr&amp;gt;
 ---&amp;gt; Using cache
 ---&amp;gt; 2beeadfdb912
Step 3/4 : ADD htdocs/index.php /var/www/html/index.php
 ---&amp;gt; 723bb4020994
Removing intermediate container ef8133b39a77
Step 4/4 : EXPOSE 80
 ---&amp;gt; Running in 14a08f850b38
 ---&amp;gt; 99574ad1473c
Removing intermediate container 14a08f850b38
Successfully built 99574ad1473c
[root@manager1 docker-swarm-demo]# docker images
REPOSITORY                          TAG                 IMAGE ID            CREATED             SIZE
phpdemo                             v2                  99574ad1473c        5 seconds ago       378 MB
manager1.example.com:5000/phpdemo   v1                  c62e0ad19807        16 minutes ago      378 MB
phpdemo                             v1                  c62e0ad19807        16 minutes ago      378 MB
docker.io/php                       7.2-apache          2424d6c5e6b9        3 days ago          378 MB
docker.io/registry                  &amp;lt;none&amp;gt;              d0eed8dad114        12 days ago         25.8 MB
[root@manager1 docker-swarm-demo]#
&lt;/pre&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 phpdemo:v2 로 Tag 를 지정하고 신규로 생성된 Image 를 Push 합니다.
&lt;/p&gt;
&lt;div class=&quot;code panel pdl conf-macro output-block&quot; data-hasbody=&quot;true&quot; data-macro-name=&quot;code&quot; style=&quot;border-width: 1px;&quot;&gt;
 &lt;div class=&quot;codeContent panelContent pdl&quot;&gt;
  &lt;pre class=&quot;syntaxhighlighter-pre&quot; data-syntaxhighlighter-params=&quot;brush: bash; gutter: false; theme: Emacs&quot; data-theme=&quot;Emacs&quot;&gt;[root@manager1 docker-swarm-demo]# docker tag phpdemo:v2 manager1.example.com:5000/phpdemo:v2

[root@manager1 docker-swarm-demo]# docker images
REPOSITORY                          TAG                 IMAGE ID            CREATED              SIZE
manager1.example.com:5000/phpdemo   v2                  99574ad1473c        About a minute ago   378 MB
phpdemo                             v1                  c62e0ad19807        17 minutes ago   378 MB
phpdemo                             v2                  99574ad1473c        About a minute ago   378 MB
manager1.example.com:5000/phpdemo   v1                  c62e0ad19807        18 minutes ago       378 MB
docker.io/php                       7.2-apache          2424d6c5e6b9        3 days ago           378 MB
docker.io/registry                  &amp;lt;none&amp;gt;              d0eed8dad114        12 days ago          25.8 MB
[root@manager1 docker-swarm-demo]#
[root@manager1 docker-swarm-demo]# docker push manager1.example.com:5000/phpdemo:v2
The push refers to a repository [manager1.example.com:5000/phpdemo]
b246f39fc10a: Pushed
29f6f251b4d2: Layer already exists
28255a6692d8: Layer already exists
d9b14cb17d8b: Layer already exists
725c91d33681: Layer already exists
005a87a63ac9: Layer already exists
66fd43b3ea3b: Layer already exists
20d941ba3638: Layer already exists
eb3e3e0ec224: Layer already exists
3843f6b0eab9: Layer already exists
63fc1837f67c: Layer already exists
c68025fbc229: Layer already exists
ec6f4f0a90dc: Layer already exists
0a07e81f5da3: Layer already exists
v2: digest: sha256:1542620ce99456e9cc6b8e55998f08707e68d0f7aa8c84a17457e20fd5623caa size: 3242
[root@manager1 docker-swarm-demo]#
&lt;/pre&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 그럼 본격적으로 서비스를 운영하면서 변경된 Image 로 서비스 Rolling Update 를 하겠습니다.
&lt;/p&gt;
&lt;p&gt;
 방법은 아래와 같습니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;strong&gt;
  &lt;em&gt;
   # docker service update --update-parallelism 1 --image manager1.example.com:5000/phpdemo:v2 phpdemo
  &lt;/em&gt;
 &lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
 --update-parallelism 옵션은 컨테이너 이미지가 한번에 얼마나 변경될지 결정합니다. 0일 경우, 한번에 변경합니다.
 &lt;strong&gt;
  &lt;br/&gt;
 &lt;/strong&gt;
&lt;/p&gt;
&lt;div class=&quot;code panel pdl conf-macro output-block&quot; data-hasbody=&quot;true&quot; data-macro-name=&quot;code&quot; style=&quot;border-width: 1px;&quot;&gt;
 &lt;div class=&quot;codeContent panelContent pdl&quot;&gt;
  &lt;pre class=&quot;syntaxhighlighter-pre&quot; data-syntaxhighlighter-params=&quot;brush: bash; gutter: false; theme: Emacs&quot; data-theme=&quot;Emacs&quot;&gt;[root@manager1 docker-swarm-demo]# docker service update --update-parallelism 1 --image manager1.example.com:5000/phpdemo:v2 phpdemo
phpdemo
[root@manager1 docker-swarm-demo]# docker service ps phpdemo
ID            NAME           IMAGE                                 NODE                  DESIRED STATE  CURRENT STATE                ERROR                             PORTS
qo0dxm16hly5  phpdemo.1      manager1.example.com:5000/phpdemo:v2  manager2.example.com  Running        Running about a minute ago
m82bq5rgmk7z   \_ phpdemo.1  manager1.example.com:5000/phpdemo:v1  manager2.example.com  Shutdown       Shutdown about a minute ago
z7782l71gnum  phpdemo.2      manager1.example.com:5000/phpdemo:v2  manager3.example.com  Running        Running about a minute ago
msiyu6y2gjxn   \_ phpdemo.2  manager1.example.com:5000/phpdemo:v1  manager3.example.com  Shutdown       Shutdown about a minute ago
sxp3cs1vmn96  phpdemo.3      manager1.example.com:5000/phpdemo:v2  manager1.example.com  Running        Running about a minute ago
8x0pcftmzbzw   \_ phpdemo.3  manager1.example.com:5000/phpdemo:v1  manager1.example.com  Shutdown       Shutdown about a minute ago&lt;/pre&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 &lt;em&gt;
  &lt;strong&gt;
   # docker service ps
  &lt;/strong&gt;
 &lt;/em&gt;
 명령으로 보면 각 노드에 phpdemo:v2 로 이미지들이 교체가 된 것을 확인 할 수 있습니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 실제로 아래 그림을 보시면 이해에 도움이 됩니다.
&lt;/p&gt;
&lt;p&gt;
 하나씩 신규로 이미지를 교체하면서 서비스를 운영하면서 신규 이미지로 배포가 되는 것을 볼 수 있습니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;span class=&quot;confluence-embedded-file-wrapper&quot;&gt;
  &lt;img src=&quot;/assets/images/59736201/7&quot;/&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 (상기 GIF 파일은 용량이 커서, 출력이 느릴수도 있습니다.)
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;h2 id=&quot;DockerSwarm을이용한ContainerOrchestration환경만들기-서비스Rollback&quot;&gt;
 서비스 Rollback
&lt;/h2&gt;
&lt;hr/&gt;
&lt;p&gt;
 서비스 Rolling Update 를 진행하였는데 문제가 발생되어 원복을 해야되는 상황이 발생 할 수 있습니다.
&lt;/p&gt;
&lt;p&gt;
 Docker Swarm 은 Rollback 기능도 지원하고 있습니다.
&lt;/p&gt;
&lt;p&gt;
 Rollback 은 아래와 같이 수행 합니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;strong&gt;
  &lt;em&gt;
   # docker service update --rollback phpdemo
  &lt;/em&gt;
 &lt;/strong&gt;
&lt;/p&gt;
&lt;div class=&quot;code panel pdl conf-macro output-block&quot; data-hasbody=&quot;true&quot; data-macro-name=&quot;code&quot; style=&quot;border-width: 1px;&quot;&gt;
 &lt;div class=&quot;codeContent panelContent pdl&quot;&gt;
  &lt;pre class=&quot;syntaxhighlighter-pre&quot; data-syntaxhighlighter-params=&quot;brush: bash; gutter: false; theme: Emacs&quot; data-theme=&quot;Emacs&quot;&gt;[root@manager1 docker-swarm-demo]# docker service update --rollback phpdemo
phpdemo

[root@manager1 docker-swarm-demo]# docker service ps phpdemo
ID            NAME           IMAGE                                 NODE                  DESIRED STATE  CURRENT STATE            ERROR  PORTS
u1w5rry6wvog  phpdemo.1      manager1.example.com:5000/phpdemo:v1  manager1.example.com  Running        Running 24 seconds ago
so0h6oyfdy65   \_ phpdemo.1  manager1.example.com:5000/phpdemo:v2  manager1.example.com  Shutdown       Shutdown 26 seconds ago
yzfysbktouw9  phpdemo.2      manager1.example.com:5000/phpdemo:v1  manager2.example.com  Running        Running 23 seconds ago
i3lqa52jspx4   \_ phpdemo.2  manager1.example.com:5000/phpdemo:v2  manager2.example.com  Shutdown       Shutdown 24 seconds ago
whoukoq2hwor   \_ phpdemo.2  manager1.example.com:5000/phpdemo:v1  manager2.example.com  Shutdown       Shutdown 2 minutes ago
z7782l71gnum   \_ phpdemo.2  manager1.example.com:5000/phpdemo:v2  manager3.example.com  Shutdown       Shutdown 3 minutes ago
msiyu6y2gjxn   \_ phpdemo.2  manager1.example.com:5000/phpdemo:v1  manager3.example.com  Shutdown       Shutdown 7 minutes ago
9ju17obshxlp  phpdemo.3      manager1.example.com:5000/phpdemo:v1  manager3.example.com  Running        Running 25 seconds ago
26s3p5fthc0f   \_ phpdemo.3  manager1.example.com:5000/phpdemo:v2  manager3.example.com  Shutdown       Shutdown 26 seconds ago
92g40nhfm15n   \_ phpdemo.3  manager1.example.com:5000/phpdemo:v1  manager3.example.com  Shutdown       Shutdown 3 minutes ago
sxp3cs1vmn96   \_ phpdemo.3  manager1.example.com:5000/phpdemo:v2  manager1.example.com  Shutdown       Shutdown 3 minutes ago
8x0pcftmzbzw   \_ phpdemo.3  manager1.example.com:5000/phpdemo:v1  manager1.example.com  Shutdown       Shutdown 7 minutes ago
[root@manager1 docker-swarm-demo]#&lt;/pre&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 &lt;em&gt;
  &lt;strong&gt;
   # docker service ps
  &lt;/strong&gt;
 &lt;/em&gt;
 명령을 통해 확인해보면 Rollback 된 것을 자세히 확인 할 수 있습니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 실제로 서비스는 어떻게 Rollback 되는지는 아래 그림을 보면 됩니다.
&lt;/p&gt;
&lt;p&gt;
 컨테이너 하나씩 기존 이미지로 Rollback 을 진행 하는 것을 확인 할 수 있습니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
  &lt;img src=&quot;/assets/images/59736201/8&quot;/&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 (상기 GIF 파일은 용량이 커서, 출력이 느릴수도 있습니다.)
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;h2 id=&quot;DockerSwarm을이용한ContainerOrchestration환경만들기-DockerHost장애발생으로인한복구시나리오&quot;&gt;
 Docker Host 장애 발생으로 인한 복구 시나리오
&lt;/h2&gt;
&lt;hr/&gt;
&lt;p&gt;
 서비스를 운영하다보면 어떠한 이유로 시스템에 장애가 발생되어 서비스가 중단되는 경우가 발생합니다.
&lt;/p&gt;
&lt;p&gt;
 Docker Swarm 을 이용하면 서비스 장애에 대해 감지하고 장애가 발생된 노드의 컨테이너를 다른 노드로 이관하여 장애 복구를 진행합니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 인위적으로 manager2.example.com 의 시스템을 강제로 중지시켜 장애를 발생시키고 어떻게 Docker Swarm 에서 복구하는지 확인 해보겠습니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;div class=&quot;code panel pdl conf-macro output-block&quot; data-hasbody=&quot;true&quot; data-macro-name=&quot;code&quot; style=&quot;border-width: 1px;&quot;&gt;
 &lt;div class=&quot;codeContent panelContent pdl&quot;&gt;
  &lt;pre class=&quot;syntaxhighlighter-pre&quot; data-syntaxhighlighter-params=&quot;brush: bash; gutter: false; theme: Emacs&quot; data-theme=&quot;Emacs&quot;&gt;[root@manager1 docker-swarm-demo]# docker node ls
ID                           HOSTNAME              STATUS  AVAILABILITY  MANAGER STATUS
lrt89xwkugty162qk8c2av5ek    manager2.example.com  Ready   Active        Leader
y8ul9r3jq0rgt9k3vbvrayeyg *  manager1.example.com  Ready   Active        Reachable
yqerq5ujds38t0izzlp03dbhd    manager3.example.com  Ready   Active        Reachable

[root@manager1 docker-swarm-demo]# docker service ps phpdemo
ID            NAME       IMAGE                                 NODE                  DESIRED STATE  CURRENT STATE               ERROR  PORTS
a50p5gs82hop  phpdemo.1  manager1.example.com:5000/phpdemo:v2  manager2.example.com  Running        Running about a minute ago
4vwicf8zt7j4  phpdemo.2  manager1.example.com:5000/phpdemo:v2  manager3.example.com  Running        Running 46 seconds ago
7ik901zrb0ob  phpdemo.3  manager1.example.com:5000/phpdemo:v2  manager1.example.com  Running        Running 51 seconds ago

// 노드 2번 시스템 인위적인 장애 발생

[root@manager1 docker-swarm-demo]# docker node ls
ID                           HOSTNAME              STATUS  AVAILABILITY  MANAGER STATUS
lrt89xwkugty162qk8c2av5ek    manager2.example.com  Down    Active        Unreachable
y8ul9r3jq0rgt9k3vbvrayeyg *  manager1.example.com  Ready   Active        Leader
yqerq5ujds38t0izzlp03dbhd    manager3.example.com  Ready   Active        Reachable
[root@manager1 docker-swarm-demo]#

[root@manager1 docker-swarm-demo]# docker service ps phpdemo
ID            NAME           IMAGE                                 NODE                  DESIRED STATE  CURRENT STATE               ERROR  PORTS
o32y0ozm5wpz  phpdemo.1      manager1.example.com:5000/phpdemo:v2  manager1.example.com  Running        Running about a minute ago
a50p5gs82hop   \_ phpdemo.1  manager1.example.com:5000/phpdemo:v2  manager2.example.com  Shutdown       Running 5 minutes ago
4vwicf8zt7j4  phpdemo.2      manager1.example.com:5000/phpdemo:v2  manager3.example.com  Running        Running about a minute ago
7ik901zrb0ob  phpdemo.3      manager1.example.com:5000/phpdemo:v2  manager1.example.com  Running        Running about a minute ago
[root@manager1 docker-swarm-demo]#&lt;/pre&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;span class=&quot;confluence-embedded-file-wrapper&quot;&gt;
  &lt;img src=&quot;/assets/images/59736201/9&quot;/&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 (상기 GIF 파일은 용량이 커서, 출력이 느릴수도 있습니다.)
&lt;/p&gt;
&lt;p&gt;
 위 그림을 보시면 장애 감지 및 장애 복구까지 소요된 시간이 약 40~50초 정도가 걸렸습니다.
&lt;/p&gt;
&lt;p&gt;
 manager2.example.com 시스템에 장애가 감지되고 해당 시스템에서 실행 중이던 컨테이너는 manager1.example.com 시스템에서 복구가 되는 것을 볼 수 있습니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;h1 id=&quot;DockerSwarm을이용한ContainerOrchestration환경만들기-마치며&quot;&gt;
 마치며
&lt;/h1&gt;
&lt;hr/&gt;
&lt;p&gt;
 컨테이너 오케스트레이션 도구 중에 하나인 Docker Swarm 에 대해서 알아보는 시간이 였습니다.
&lt;/p&gt;
&lt;p&gt;
 구성이 간단하고 기존에 Docker 를 잘 사용하셨다면 쉽게 운영에 적용 할 수 있을 것 같습니다!!
&lt;/p&gt;
&lt;p&gt;
 또한 컨테이너 하나만으로는 부족한 느낌이 많이 없어진 것 같습니다. ^ㅡ^
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 언제나 쉽게 오픈소스를 사용할 수 있도록 노력하겠습니다.
&lt;/p&gt;
&lt;p&gt;
 감사합니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;h1 id=&quot;DockerSwarm을이용한ContainerOrchestration환경만들기-참고자료&quot;&gt;
 참고 자료
&lt;/h1&gt;
&lt;hr/&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;a class=&quot;external-link&quot; href=&quot;https://docs.docker.com/engine/swarm/&quot; rel=&quot;nofollow&quot;&gt;
   https://docs.docker.com/engine/swarm/
  &lt;/a&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;a class=&quot;external-link&quot; href=&quot;https://docs.docker.com/engine/reference/commandline/service_update/&quot; rel=&quot;nofollow&quot;&gt;
   https://docs.docker.com/engine/reference/commandline/service_update/
  &lt;/a&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;a class=&quot;external-link&quot; href=&quot;https://www.xenonstack.com/blog/top-trends-ci-cd-devops-tools/&quot; rel=&quot;nofollow&quot;&gt;
   https://www.xenonstack.com/blog/top-trends-ci-cd-devops-tools/
  &lt;/a&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;a class=&quot;external-link&quot; href=&quot;https://success.docker.com/article/networking&quot; rel=&quot;nofollow&quot;&gt;
   https://success.docker.com/article/networking
  &lt;/a&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;</description>
        <pubDate>Wed, 13 Feb 2019 00:00:00 +0900</pubDate>
        <link>https://tech.osci.kr/2019/02/13/59736201/</link>
        <guid isPermaLink="true">https://tech.osci.kr/2019/02/13/59736201/</guid>
        
        
      </item>
    
      <item>
        <title>오픈소스컨설팅 아틀라시안팀이 일하는 방법</title>
        <description>&lt;p&gt;
 &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
  &lt;img src=&quot;/assets/images/58035834/0&quot;/&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 안녕하세요?
&lt;/p&gt;
&lt;p&gt;
 오픈소스컨설팅
&lt;/p&gt;
&lt;p&gt;
 아틀라시안팀 - 김세연입니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;strong&gt;
  지금부터 저희 팀 소개를 하겠습니다~ 재미있어요~ (아마도요..)
 &lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
 저희 팀은 애자일, 데브옵스 문화 도입 및 활성화를 위해, 최선의 방법을 찾아 알맞은 솔루션을 컨설팅합니다.
&lt;/p&gt;
&lt;p&gt;
 애자일, 데브옵스의 경험이 풍부한 엔지니어로 이루어진 저희 팀은 꾸준한 교육과 연습을 통해, 팀을 발전 시키고자 합니다.
&lt;/p&gt;
&lt;p&gt;
 팀웍, 협업, 공유를 중요시하는 저희 아틀라시안팀의 이야기를 들어보실래요? 'ㅡ'
&lt;/p&gt;
&lt;p&gt;
 그리고
 &lt;strong&gt;
  함께할 멤버를 찾고 있습니다. (불꽃!!)
 &lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
  &lt;img src=&quot;/assets/images/58035834/1&quot;/&gt;
 &lt;/span&gt;
 &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
  &lt;img src=&quot;/assets/images/58035834/2&quot;/&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;strong&gt;
  &amp;lt;운명같은 만남을 꿈꾸고 발 벗고 찾아다닙니다.&amp;gt;
 &lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;h1 id=&quot;id-오픈소스컨설팅아틀라시안팀이일하는방법-오픈소스컨설팅출근과퇴근&quot;&gt;
 오픈소스컨설팅 출근과 퇴근
&lt;/h1&gt;
&lt;p&gt;
 &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
  &lt;img src=&quot;/assets/images/58035834/3&quot;/&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;strong&gt;
  &amp;lt;월요일의 내 멘탈은 대략 블루스크린&amp;gt;
 &lt;/strong&gt;
&lt;/p&gt;
&lt;h3 id=&quot;id-오픈소스컨설팅아틀라시안팀이일하는방법-월요일&quot;&gt;
 &lt;strong&gt;
  월요일
 &lt;/strong&gt;
&lt;/h3&gt;
&lt;p&gt;
 월요일은 오전 10시 출근 → 오후 6시 퇴근을 합니다.
&lt;/p&gt;
&lt;p&gt;
 주말동안 쉬었던 몸과 마음을 콜드부팅합니다.
&lt;/p&gt;
&lt;p&gt;
 대표님과 CTO님께서 일할 땐 일하고 놀 때 노는 문화를 만들고 정착 시키셨습니다. (으메 좋은거)
&lt;/p&gt;
&lt;p&gt;
 저는 입사 하자마자 혜택 받고 있습니다 :)
&lt;/p&gt;
&lt;p&gt;
 일이 많아서 또는 고객 지원 업무가 6시 이후에 있을 경우에는 대체 휴무를 부여하고 있습니다. 할 때 하고 쉴 때 쉽니다.
&lt;/p&gt;
&lt;p&gt;
 정시퇴근, 정시출근! (야근식대 무엇!?)
&lt;/p&gt;
&lt;h4 id=&quot;id-오픈소스컨설팅아틀라시안팀이일하는방법-테크세션&amp;amp;오픈톡&quot;&gt;
 테크세션 &amp;amp; 오픈톡
&lt;/h4&gt;
&lt;p&gt;
 매주 월요일은 내부 발표 신청자에 의해 테크세션 또는 오픈톡 발표를 합니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;strong&gt;
  테크세션은
 &lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
 내부에 공유하고 싶은 기술, 트렌드 등을 발표합니다.
&lt;/p&gt;
&lt;p&gt;
 저도 가끔 발표를 하는데요 장점은 내가 아는 기술을 발표 자료로 만들면서 더 공부가 되고 정리하는 시간을 가질 수 있습니다.
&lt;/p&gt;
&lt;p&gt;
 그리고
 &lt;strong&gt;
  발표 연습을 할 수 있습니다. (&quot;어머님, 예서는 멘탈이 약한 아이입니다.&quot;)
 &lt;/strong&gt;
 전 직원이 집중하고 피드백을 줍니다. 멘탈을 다지고 큰 무대로 갈 수 있습니다. (원한다면요 :) )
&lt;/p&gt;
&lt;p&gt;
 &lt;strong&gt;
  오픈톡은
 &lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
 기술 이외에 문화, 책을 읽고 감동 받은 점 등 자유롭게 발표할 수 있습니다.
&lt;/p&gt;
&lt;p&gt;
 인문학이 없는 기술은 5살 어린아이에게 총을 쥐어진 것처럼 기술의 의미가 얕아질 수 있습니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
  &lt;img src=&quot;/assets/images/58035834/4&quot;/&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;strong&gt;
  &amp;lt;아빠 이번 선물은 마음에 들어요 당겨봐도 되죠?&amp;gt;
 &lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
 우리는 인문학을 중요하게 생각하고 사랑합니다.
&lt;/p&gt;
&lt;h3 id=&quot;id-오픈소스컨설팅아틀라시안팀이일하는방법-화요일~목요일&quot;&gt;
 화요일 ~ 목요일
&lt;/h3&gt;
&lt;p&gt;
 어느 직장과 동일하게 열심히 9시에 출근하고 18시에 퇴근합니다.
&lt;/p&gt;
&lt;h3 id=&quot;id-오픈소스컨설팅아틀라시안팀이일하는방법-금요일&quot;&gt;
 금요일
&lt;/h3&gt;
&lt;p&gt;
 우리 오픈소스컨설팅은 A조 B조로 나눠서 격주 금요일 휴식을 갖습니다. (복지)
&lt;/p&gt;
&lt;p&gt;
 금토일 여행을 갈 수도 있고 개인적인 시간을 가질 수 있습니다. 대박! 엄지척!
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 벌써 일주일이 다 갔습니다.
&lt;/p&gt;
&lt;h1 id=&quot;id-오픈소스컨설팅아틀라시안팀이일하는방법-팀문화&quot;&gt;
 팀 문화
&lt;/h1&gt;
&lt;p&gt;
 저희 팀의 문화를 3가지로 표현하면 수다, 신뢰, Right Person입니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;strong&gt;
  수다
 &lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
 대화를 넘어서 수다가 많습니다.
&lt;/p&gt;
&lt;p&gt;
 생각, 감정, 철학, 방향성, 기술 스택 등 수시로 대화합니다. (물론 대화 가능 시간을 물어보고 초대합니다)
&lt;/p&gt;
&lt;p&gt;
 저희부터 좋은 협업, 공유 문화를 갖고 애자일, 데브옵스를 구축하고 컨설팅을 하고 있습니다.
&lt;/p&gt;
&lt;p&gt;
 팀의 대화에서는 '틀리다'는 없습니다. '다르다'를 서로 이야기하고 자신의 생각, 가치관을 이야기 합니다.
&lt;/p&gt;
&lt;p&gt;
 수다에서 많은 아이디어와 팀의 방향성이 나오곤 합니다. 그리고 대화에 빠질 수 없는 커피&amp;amp;티를 사랑합니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;strong&gt;
  신뢰
 &lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
 강력한 신뢰를 바탕으로 일하고 있습니다.
&lt;/p&gt;
&lt;p&gt;
 고객과의 스케줄을 정하고 외근을 갔다가 알아서 복귀 또는 퇴근을 합니다.
&lt;/p&gt;
&lt;p&gt;
 공유할 내용이 있다면 Confluence, Slack으로 공유합니다.
&lt;/p&gt;
&lt;p&gt;
 팀장님의 결정이 필요하면 슬랙하거나 결재를 올리면 됩니다.
&lt;/p&gt;
&lt;p&gt;
 각자 분명한 역할을 정하고 계획, 진행, 결과에서 솔직한 이야기들이 오고 갑니다.
&lt;/p&gt;
&lt;p&gt;
 솔직한 이야기를 할 수 있다는 것은 팀장, 팀원들의 간의 신뢰와 믿음이 있기 때문이라고 생각합니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;strong&gt;
  Right Person
 &lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
 제가 생각하는 Right Person은 '옳은 사람'이 아닙니다. '옳은 방향으로 결정할 수 있는 사람'입니다.
&lt;/p&gt;
&lt;p&gt;
 저희 팀은 2주 간격으로 Atlassian App 개발 스크럼 미팅을 진행합니다.
&lt;/p&gt;
&lt;p&gt;
 미팅에 팀장님을 포함한 개발자들이 참여합니다.
&lt;/p&gt;
&lt;p&gt;
 개발 방향, 기간, 비즈니스 로직 등 뜨거운 논쟁이 펼쳐집니다.
&lt;/p&gt;
&lt;p&gt;
 우리 팀은 옳은 방향으로 갈 수 있기 때문에, 알기 때문에 우리는 목소리를 낼 수 있습니다.
&lt;/p&gt;
&lt;p&gt;
 우리 팀만 해당되지 않습니다. 우리 회사에서 옳은 방향을 주장하고 의견을 내면 수용됩니다. (제가 봤어요. +_+ )
&lt;/p&gt;
&lt;h1 id=&quot;id-오픈소스컨설팅아틀라시안팀이일하는방법-개발&quot;&gt;
 개발
&lt;/h1&gt;
&lt;p&gt;
 &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
  &lt;img src=&quot;/assets/images/58035834/5&quot;/&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 저희 팀은 Atlassian 제품 기술 지원과 Plug-in(App)을 개발하고 있습니다.
&lt;/p&gt;
&lt;p&gt;
 Atlassian 제품으로 컨설팅을 진행하면서 고객의 필요한 기능을 개발하고 Atlassian MarketPlace에 올릴 예정입니다.
&lt;/p&gt;
&lt;p&gt;
 2월에 제품 하나가 출시되고 3월에 추가 출시 예정입니다.
&lt;/p&gt;
&lt;p&gt;
 4월에는 라스베가스에서 열리는 Atlassian summit에도 참가합니다.
&lt;/p&gt;
&lt;p&gt;
 좋은 아이디어는 누구나 생각할 수 있습니다. 하지만 실천은 아무나 못합니다. 저희팀은 로켓 발사 단계에 있습니다.
&lt;/p&gt;
&lt;p&gt;
 함께 로켓에 탑승하여 빠르게 성장할 멤버를 찾고 있습니다!! (자꾸 홍보)
&lt;/p&gt;
&lt;p&gt;
 기술 스택 - JAVA, HTML, Linux, SQL, Script언어 하나
&lt;/p&gt;
&lt;p&gt;
 Atlassian Server Version은 JAVA 기반으로 만들어 졌습니다. App도 JAVA(Spring)으로 개발합니다.
&lt;/p&gt;
&lt;p&gt;
 JAVA로 게시판 하나 만들 정도면 환영합니다. (구글 검색은 당연하죠~)
&lt;/p&gt;
&lt;p&gt;
 Front-end는 간단하게 HTML, Jquery 정도로 구성하고 있습니다. Jquery로 AJAX 통신한다! 환영합니다
&lt;/p&gt;
&lt;p&gt;
 많은 고객들이 Linux Server에 Atlassian 제품을 설치하고 있습니다.
&lt;/p&gt;
&lt;p&gt;
 Linux NFS 서버 구성하고 마운트 경험이나 구글 검색으로할 수 있다. 환영합니다.
&lt;/p&gt;
&lt;p&gt;
 저는 파이썬을 좋아하고 제 바로 위 선배는 노드를 좋아합니다.  REST API 간단하게 만들거나 호출해서 값 파싱해서 처리할 수 있으면 환영합니다.
&lt;/p&gt;
&lt;p&gt;
 (컴파일 언어 이외에 스크립트 언어 간단하게 스킬이 있으면 사용할 일이 가끔 있습니다. 강력한 추천!)
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 Scrum 방식으로 일하고 있습니다. Jira, Confluence, Bitbucket, Bamboo를 사용하고 있습니다.
&lt;/p&gt;
&lt;p&gt;
 macOS에서 IntelliJ를 사용하고 있습니다. 원하시면 Windows PC를 받을 수 있습니다.
&lt;/p&gt;
&lt;p&gt;
 하지만 어머님. macOS를 댁으로 들이십시오. Windows는 멘탈이 약한 아이입니다.
&lt;/p&gt;
&lt;p&gt;
 원하는 스택은 팀과 논의하여 더 추가될 수 있습니다.
&lt;/p&gt;
&lt;h1 id=&quot;id-오픈소스컨설팅아틀라시안팀이일하는방법-고객지원&quot;&gt;
 고객지원
&lt;/h1&gt;
&lt;p&gt;
 저는 개발팀에서 개발을 할 때 End User의 피드백이 궁금했습니다. 그래서 Google Analytic를 분석하고 App Store, Play Store의 댓글도 보고 했지만 물에 비치는 흐릿한 풍경이 아닌 뚜렷한 피드백을 받고 싶었습니다.
&lt;/p&gt;
&lt;p&gt;
 고객지원을 다니면서 구체적으로 필요한 기술, 아키텍처, 문화, 컨설팅에 대해서 들었습니다. 요구사항을 구축, 구현 후 고객께서 주신 피드백도 날카롭거나 따듯했습니다.
&lt;/p&gt;
&lt;p&gt;
 엔지니어로써 뚜렷한 요구사항과 구축 후 피드백은 힘을 낭비하지 않고 기술 스택을 쌓기 좋은 경험이 될 것 같습니다.
&lt;/p&gt;
&lt;p&gt;
 고객과 협업하는 스킬도 늘어나서 여기저기 아는 사람이 많이 생깁니다.
&lt;/p&gt;
&lt;p&gt;
 주로 하는 업무는 Atlassian 제품 설치, Migration, Trouble Shooting 등입니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
  &lt;img src=&quot;/assets/images/58035834/6&quot;/&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;strong&gt;
  &amp;lt;나날이 성장하는건 기분탓이 아니겠지&amp;gt;
 &lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
 Apache Http, Nginx, Atlassian Products, MySQL 등을 설치합니다. 요즘 추세는 AWS에 설치, 운영을 많이 합니다.
&lt;/p&gt;
&lt;h1 id=&quot;id-오픈소스컨설팅아틀라시안팀이일하는방법-교육&quot;&gt;
 교육
&lt;/h1&gt;
&lt;p&gt;
 &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
  &lt;img src=&quot;/assets/images/58035834/7&quot;/&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;strong&gt;
  &amp;lt;고객과 함께 성장합니다.&amp;gt;
 &lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
 매달 Jira, Confluence 무료 교육을 진행하고 있습니다.
&lt;/p&gt;
&lt;p&gt;
 지금은 교육 진행자가 정해져 있지만 원한다면 진행할 수 있습니다. (우리 회사는 원하는 대로 됩니다.)
&lt;/p&gt;
&lt;p&gt;
 고객사의 요청으로 고객사에서 교육을 진행하는 경우도 있습니다. 짧게는 1시간 길게는 하루
&lt;/p&gt;
&lt;p&gt;
 Atlassian 제품 교육, DevOps, Agile, ALM 문화 기술 등 교육을 진행하고 있습니다.
&lt;/p&gt;
&lt;p&gt;
 천천히~ 발표&amp;amp;교육을 진행 하면 큰 재미를 느끼실 겁니다. 전적으로 저를 믿으셔야 합니다.
&lt;/p&gt;
&lt;h1 id=&quot;id-오픈소스컨설팅아틀라시안팀이일하는방법-면접&quot;&gt;
 면접
&lt;/h1&gt;
&lt;p&gt;
 저희 팀이 일하는 방법을 간단하게 소개 했습니다.
&lt;/p&gt;
&lt;p&gt;
 글로만 봐서는 잘 모르실 것 같아요.
&lt;/p&gt;
&lt;p&gt;
 1차 팀 면접은 화기애애하면서 재미 있습니다. (왜냐면 팀이 그래요..)
&lt;/p&gt;
&lt;p&gt;
 &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
  &lt;img src=&quot;/assets/images/58035834/8&quot;/&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;strong&gt;
  &amp;lt;돈벌면서 재미 있으면 안되나요? 네 안되요&amp;gt;
 &lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
 호기심에 이력서 넣고 저희 팀을 만나셔도 좋을 것 같아요. 커피를 좋아하시면 맛있는 커피 대접하겠습니다. (심지어 빵도 맛있는 카페가 바로 앞에 있어요)
&lt;/p&gt;
&lt;p&gt;
 이력서 넣기 귀찮고 그냥 만나고 싶다! 하셔도 좋아요 언제든 메일 주세요. 커피는 제가 쏩니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;a class=&quot;external-link&quot; href=&quot;mailto:atlassian@osci.kr&quot; rel=&quot;nofollow&quot;&gt;
  atlassian@osci.kr
 &lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
 제목 또는 내용에 김세연 소개로 왔습니다 넣어주세요~
&lt;/p&gt;
&lt;p&gt;
 읽어 주셔서 감사합니다.
&lt;/p&gt;
&lt;h1 id=&quot;id-오픈소스컨설팅아틀라시안팀이일하는방법-(부록)앞으로팀의방향,회사복지등등&quot;&gt;
 (부록) 앞으로 팀의 방향, 회사 복지 등등
&lt;/h1&gt;
&lt;p&gt;
 뵙고 이야기 나눠요.  :)
&lt;/p&gt;</description>
        <pubDate>Wed, 06 Feb 2019 00:00:00 +0900</pubDate>
        <link>https://tech.osci.kr/2019/02/06/58035834/</link>
        <guid isPermaLink="true">https://tech.osci.kr/2019/02/06/58035834/</guid>
        
        <category>atlassian</category>
        
        <category>opensourceconsulting</category>
        
        
      </item>
    
      <item>
        <title>2019년 1월 아틀라시안 업데이트 소식</title>
        <description>&lt;p&gt;
 아틀라시안은 사용자들의 피드백과 경험을 토대로, 주기적으로 제품의 기능을 개선하고 신규 기능을 추가하고 있습니다.
&lt;/p&gt;
&lt;p&gt;
 최신 버전의 제품 소식과 Enterprise 버전 소식을 전해드립니다.
&lt;/p&gt;
&lt;h1 id=&quot;id-2019년1월아틀라시안업데이트소식-Jira&quot;&gt;
 Jira
&lt;/h1&gt;
&lt;h2 id=&quot;id-2019년1월아틀라시안업데이트소식-EnterpriseVersion7.6.xto7.13.x&quot;&gt;
 Enterprise Version 7.6.x to 7.13.x
&lt;/h2&gt;
&lt;ul style=&quot;list-style-type: square;&quot;&gt;
 &lt;li&gt;
  아틀라시안은 Jira 7.6.x Enterprise release를 제공합니다.
 &lt;/li&gt;
 &lt;li&gt;
  Enterprise 버전은 첫 릴리즈 후 2년동안 보안, 버그 수정을 계속 받을 수 있습니다.
 &lt;/li&gt;
 &lt;li&gt;
  Enterprise 버전은 대규모의 복잡한 인스턴스를 위해 특별히 설계되었습니다.
 &lt;/li&gt;
 &lt;li&gt;
  1년에 1번 정도 업그레이드 할 수 있는 고객이라면 Enterprise 버전을 추천합니다.
 &lt;/li&gt;
 &lt;li&gt;
  Jira의 최신 기능, 제품이 제공하는 모든 기능을 이용하여 가치를 생산한다면 최신 버전을 추천드립니다. (한 달에 한 번 패치할 수 있는 규모)
 &lt;/li&gt;
 &lt;li&gt;
  곧 Jira 7.6에서 7.13 릴리즈 라인으로 변경될 예정입니다.
 &lt;/li&gt;
 &lt;li&gt;
  AdoptOpenJDK8을 지원합니다.
 &lt;/li&gt;
 &lt;li&gt;
  자세히보기
  &lt;a class=&quot;external-link&quot; href=&quot;https://confluence.atlassian.com/enterprise/atlassian-enterprise-releases-948227420.html&quot; rel=&quot;nofollow&quot;&gt;
   https://confluence.atlassian.com/enterprise/atlassian-enterprise-releases-948227420.html
  &lt;/a&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 &lt;span class=&quot;inline-comment-marker&quot; data-ref=&quot;cf9194f5-1587-478d-b76a-6111f68e6b99&quot;&gt;
  *Enterprise release란?
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;span class=&quot;inline-comment-marker&quot; data-ref=&quot;cf9194f5-1587-478d-b76a-6111f68e6b99&quot;&gt;
  버전 업그레이드를 자주 하기 어려운 고객을 대상으로 중요한 버그 및 보안 문제에 대한 수정을 보증하는 업데이트 버전입니다.
 &lt;/span&gt;
&lt;/p&gt;
&lt;h2 id=&quot;id-2019년1월아틀라시안업데이트소식-Jira8beta미리살펴보기&quot;&gt;
 Jira 8 beta 미리 살펴보기
&lt;/h2&gt;
&lt;p&gt;
 오랜 기간동안 사랑받던 Jira 7.x 버전이 Jira 8로 업데이트 됩니다.
&lt;/p&gt;
&lt;p&gt;
 Jira 8 beta 버전의 새로운 기능, 주요 변경사항을 미리 살펴봅니다.
&lt;/p&gt;
&lt;ul style=&quot;list-style-type: square;&quot;&gt;
 &lt;li&gt;
  &lt;strong&gt;
   Scrum and Kanban 디자인 변경
  &lt;/strong&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
    &lt;img src=&quot;/assets/images/58035473/0&quot;/&gt;
   &lt;/span&gt;
   &lt;br/&gt;
   &lt;br/&gt;
  &lt;/p&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;ul style=&quot;list-style-type: square;&quot;&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;strong&gt;
    Batching email notifications
   &lt;/strong&gt;
  &lt;/p&gt;
  &lt;ul style=&quot;list-style-type: square;&quot;&gt;
   &lt;li&gt;
    &lt;p&gt;
     일괄 발송 기능이 추가됐습니다. 10분 간격 일괄 발송으로 설정하면 업데이트될 때 마다 발송되던 메일을 일괄로 발송할 수 있습니다.
    &lt;/p&gt;
   &lt;/li&gt;
   &lt;li&gt;
    System &amp;gt; Batching email notifications 에서 설정할 수 있습니다.
   &lt;/li&gt;
   &lt;li&gt;
    &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
     &lt;img src=&quot;/assets/images/58035473/1&quot;/&gt;
    &lt;/span&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
  &lt;p&gt;
   &lt;br/&gt;
  &lt;/p&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   Significant backlogs load faster
  &lt;/p&gt;
  &lt;ul style=&quot;list-style-type: square;&quot;&gt;
   &lt;li&gt;
    &lt;p&gt;
     Backlogs 로딩 시간이 빨라졌습니다. 기본으로 100개의 이슈가 보이고, Show all issues 를 클릭하면 모든 이슈를 볼 수 있습니다.
    &lt;/p&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
      &lt;img src=&quot;/assets/images/58035473/2&quot;/&gt;
     &lt;/span&gt;
     &lt;br/&gt;
     &lt;br/&gt;
    &lt;/p&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   Dropping Linked pages count to boost performance
  &lt;/p&gt;
  &lt;ul style=&quot;list-style-type: square;&quot;&gt;
   &lt;li&gt;
    &lt;p&gt;
     Epic, Sprint에 링크된 페이지의 수를 없앴습니다. Jira의 속도가 더 빨라지는 등 제품 성능에 많은 영향을 미쳤다고 합니다.
    &lt;/p&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
      &lt;img src=&quot;/assets/images/58035473/3&quot;/&gt;
     &lt;/span&gt;
     &lt;br/&gt;
     &lt;br/&gt;
    &lt;/p&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   New JQL options
  &lt;/p&gt;
  &lt;ul style=&quot;list-style-type: square;&quot;&gt;
   &lt;li&gt;
    &lt;p&gt;
     Find authors (updatedBy)
    &lt;/p&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     Find link types (issueLinkType)
     &lt;br/&gt;
     &lt;br/&gt;
    &lt;/p&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   More goodies
  &lt;/p&gt;
  &lt;ul style=&quot;list-style-type: square;&quot;&gt;
   &lt;li&gt;
    MySQL 5.7 버전부터 4-byte characters를 사용할 수 있습니다. 이모지로 더 재미있는 Jira를 즐길 수 있습니다.
   &lt;/li&gt;
   &lt;li&gt;
    Add-ons는 이제 apps로 부릅니다.
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   Infrastructure changes
  &lt;/p&gt;
  &lt;ul style=&quot;list-style-type: square;&quot;&gt;
   &lt;li&gt;
    Lucene libray upgrade 3.3 to 7.3
   &lt;/li&gt;
   &lt;li&gt;
    더보기 -
    &lt;a class=&quot;external-link&quot; href=&quot;https://confluence.atlassian.com/adminjira/preparing-for-jira-8-0-955171967.html&quot; rel=&quot;nofollow&quot;&gt;
     https://confluence.atlassian.com/adminjira/preparing-for-jira-8-0-955171967.html
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;id-2019년1월아틀라시안업데이트소식-Confluence&quot;&gt;
 Confluence
&lt;/h1&gt;
&lt;h2 id=&quot;id-2019년1월아틀라시안업데이트소식-EnterpriseVersion&quot;&gt;
 Enterprise Version
&lt;/h2&gt;
&lt;ul style=&quot;list-style-type: square;&quot;&gt;
 &lt;li&gt;
  Jira와 마찬가지로 Confluence 6.6 Enterprise 버전을 제공하고 있습니다.
 &lt;/li&gt;
 &lt;li&gt;
  Confluence 6.6에서 6.13 릴리즈 라인으로 변경될 예정입니다.
 &lt;/li&gt;
 &lt;li&gt;
  AdoptOpenJDK8을 지원합니다.
 &lt;/li&gt;
 &lt;li&gt;
  더보기 -
  &lt;a class=&quot;external-link&quot; href=&quot;https://confluence.atlassian.com/doc/confluence-6-13-release-notes-959288785.html&quot; rel=&quot;nofollow&quot;&gt;
   https://confluence.atlassian.com/doc/confluence-6-13-release-notes-959288785.html
  &lt;/a&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;id-2019년1월아틀라시안업데이트소식-Confluence6.14beta미리살펴보기&quot;&gt;
 Confluence 6.14 beta 미리 살펴보기
&lt;/h2&gt;
&lt;ul style=&quot;list-style-type: square;&quot;&gt;
 &lt;li&gt;
  &lt;strong&gt;
   &lt;span class=&quot;toc-item-body&quot;&gt;
    Find work faster with the new Confluence search
   &lt;/span&gt;
  &lt;/strong&gt;
  &lt;ul style=&quot;list-style-type: square;&quot;&gt;
   &lt;li&gt;
    Confluence 검색 기능이 새롭게 개편됐습니다.
   &lt;/li&gt;
   &lt;li&gt;
    쉽고 빠르게 필터를 추가하여 원하는 결과를 더 쉽게 얻을 수 있습니다.
   &lt;/li&gt;
   &lt;li&gt;
    &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
     &lt;img src=&quot;/assets/images/58035473/4&quot;/&gt;
    &lt;/span&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;strong&gt;
   &lt;span class=&quot;toc-item-body&quot;&gt;
    Massive editor improvements
   &lt;/span&gt;
  &lt;/strong&gt;
  &lt;ul style=&quot;list-style-type: square;&quot;&gt;
   &lt;li&gt;
    편집 기능이 대폭 개선됐습니다.
   &lt;/li&gt;
   &lt;li&gt;
    콘텐츠를 복사, 붙여 넣을 때 테이블 셀, 글 머리 기호 및 커서 동작과 관련된 공통적인 기능이 개선됐습니다.
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;span class=&quot;toc-item-body&quot;&gt;
   More ways to edit files
  &lt;/span&gt;
  &lt;ul style=&quot;list-style-type: square;&quot;&gt;
   &lt;li&gt;
    6.11 버전에서 첨부파일을 편집하고 업로드하는 기능을 선보였습니다.
   &lt;/li&gt;
   &lt;li&gt;
    6.14 버전에서는 Attachment macro, View File macros의 preview에서 편집할 수 있습니다.
   &lt;/li&gt;
   &lt;li&gt;
    &lt;span class=&quot;toc-item-body&quot;&gt;
     &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
      &lt;img src=&quot;/assets/images/58035473/5&quot;/&gt;
     &lt;/span&gt;
     &lt;br/&gt;
    &lt;/span&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;span class=&quot;toc-item-body&quot;&gt;
   Delete profile picture
  &lt;/span&gt;
  &lt;ul style=&quot;list-style-type: square;&quot;&gt;
   &lt;li&gt;
    프로파일 삭제 기능이 추가 됐습니다.
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;span class=&quot;toc-item-body&quot;&gt;
   Number your PDFs the easy way
  &lt;/span&gt;
  &lt;ul style=&quot;list-style-type: square;&quot;&gt;
   &lt;li&gt;
    공간 PDF 내보내기에서 페이지 번호를 선택할 수 있습니다.
   &lt;/li&gt;
   &lt;li&gt;
    &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
     &lt;img src=&quot;/assets/images/58035473/6&quot;/&gt;
    &lt;/span&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 그 밖에 많은 이슈가 해결 됐습니다.
&lt;/p&gt;
&lt;p&gt;
 자세히 보기
 &lt;a class=&quot;external-link&quot; href=&quot;https://confluence.atlassian.com/doc/confluence-6-14-release-notes-963655609.html&quot; rel=&quot;nofollow&quot;&gt;
  https://confluence.atlassian.com/doc/confluence-6-14-release-notes-963655609.html
 &lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 Jira, Confluence 사용에 불편함을 느끼시거나, 향상된 팀 협업이 필요하십니까?
&lt;/p&gt;
&lt;p&gt;
 업무를 가속화하고 최상의 품질로 시장을 선점하는데 도움을 주는 Atlassian 솔루션에 대해
&lt;/p&gt;
&lt;p&gt;
 궁금한 점이 있으시다면 언제든지 오픈소스컨설팅 아틀라시안팀에게 문의해 주세요!
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 감사합니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;a class=&quot;external-link&quot; href=&quot;mailto:atlassian@osci.kr&quot; rel=&quot;nofollow&quot;&gt;
  atlassian@osci.kr
 &lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;</description>
        <pubDate>Thu, 31 Jan 2019 00:00:00 +0900</pubDate>
        <link>https://tech.osci.kr/2019/01/31/58035473/</link>
        <guid isPermaLink="true">https://tech.osci.kr/2019/01/31/58035473/</guid>
        
        <category>atlassian</category>
        
        <category>jira</category>
        
        <category>confluence</category>
        
        
      </item>
    
      <item>
        <title>Spacewalk latest Docker image 제작기</title>
        <description>&lt;h1 id=&quot;spacewalk-latest-docker-image-제작기&quot;&gt;Spacewalk latest Docker image 제작기&lt;/h1&gt;
&lt;hr /&gt;

&lt;p&gt;안녕하세요? 오픈소스컨설팅 한철희 입니다. &lt;br /&gt;
고객사의 요청으로 Spacewalk 로 docker container 형태로 운영을 해야되는 요건이 생겨서 &lt;br /&gt;
Image를 만들기 시작 하였습니다…… ;(&lt;/p&gt;

&lt;h1 id=&quot;spacewalk-란&quot;&gt;Spacewalk 란?&lt;/h1&gt;
&lt;hr /&gt;
&lt;p&gt;Spacewalk는 오픈 소스 Linux 시스템 관리 솔루션입니다. &lt;br /&gt;
Red Hat Satellite 제품이 파생 된 업스트림 커뮤니티 프로젝트입니다.&lt;/p&gt;

&lt;center&gt;&lt;img src=&quot;https://chhanz.github.io/assets/images/post/2019-01-07-spacewalkdocker/1.png&quot; height=&quot;550&quot; /&gt; &lt;br /&gt;
&lt;a href=&quot;https://spacewalkproject.github.io/index.html&quot;&gt;@Go to detail&lt;/a&gt;  &lt;br /&gt;
&lt;a href=&quot;https://www.slideshare.net/ienvyou/ss-31321783&quot;&gt;@[오픈소스컨설팅]클라우드자동화 및 운영효율화방안&lt;/a&gt;&lt;br /&gt; &lt;/center&gt;

&lt;h1 id=&quot;쉽게-가자&quot;&gt;쉽게 가자…&lt;/h1&gt;
&lt;hr /&gt;
&lt;p&gt;docker 의 장점이 뭡니까! &lt;br /&gt;
docker hub의 많은 Offiaical Image 아닙니까!&lt;/p&gt;

&lt;p&gt;열심히 Docker Image를 찾아보았습니다. &lt;br /&gt;
하지만…&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# docker search spacewalk
INDEX       NAME                                            DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED
docker.io   docker.io/bashell/spacewalk                     Spacewalk Docker Image                          7                    [OK]
docker.io   docker.io/ruo91/spacewalk                       Spacewalk is an open source Linux systems ...   4                    [OK]
docker.io   docker.io/pajinek/docker-spacewalk              Spacewalk in Docker (without systemd)           3                    [OK]
docker.io   docker.io/egonzalez90/spacewalk                 Spacewalk docker image                          1                    [OK]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;OFFICIAL 은 없고, 그나마 STARS 는 7개 뿐이고…  &lt;br /&gt;
내가 만들어야 겠다… ;)  &lt;br /&gt;
이렇게 시작 되었습니다.&lt;/p&gt;

&lt;h1 id=&quot;docker-image-를-만들어보자&quot;&gt;Docker Image 를 만들어보자!&lt;/h1&gt;
&lt;hr /&gt;

&lt;p&gt;먼저 참고할 Dockerfile 은 docker hub 에서 가져왔습니다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;https://bitbucket.org/bashell-com/spacewalk&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Dockerfile 은 아래와 같이 수정하였습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Dockerfile - Spacewalk
#
# - Build
#
# docker build --rm -t spacewalk .
#
# - Run
# docker run --privileged=true -d --name=&quot;spacewalk&quot; -p 80:80 -p 443:443 spacewalk

# 1. Base images
FROM     centos:6
MAINTAINER chhanz &amp;lt;chhan@osci.kr&amp;gt;

# 2. Set the environment variable
WORKDIR /opt

# 3. Add the epel, spacewalk, jpackage, supervisord
ADD conf/group_spacewalkproject-epel6-addons-epel-6.repo /etc/yum.repos.d/epel6-addons-epel-6.repo
ADD conf/group_spacewalkproject-java-packages-epel-7.repo /etc/yum.repos.d/java-packages-epel-7.repo
RUN yum install -y epel-release \
 &amp;amp;&amp;amp; rpm -Uvh https://copr-be.cloud.fedoraproject.org/results/@spacewalkproject/spacewalk-2.8/epel-6-x86_64/00736372-spacewalk-repo/spacewalk-repo-2.8-11.el6.noarch.rpm \
 &amp;amp;&amp;amp; yum check-update ; yum upgrade -y \
 &amp;amp;&amp;amp; yum install -y spacewalk-setup-postgresql spacewalk-postgresql tomcat-native python-setuptools python-pip \
 &amp;amp;&amp;amp; yum clean all \
 &amp;amp;&amp;amp; pip install supervisor &amp;amp;&amp;amp; pip install --upgrade meld3==0.6.10 &amp;amp;&amp;amp; mkdir /etc/supervisord.d \
 &amp;amp;&amp;amp; rm -rf /root/.cache \
 &amp;amp;&amp;amp; cat /usr/share/zoneinfo/Asia/Seoul &amp;gt; /etc/localtime

# 4. Install supervisord config
ADD conf/supervisord.conf /etc/supervisord.d/supervisord.conf

# 5. Install spacewalk initial and running scripts
ADD conf/answer.txt   /opt/answer.txt
ADD conf/spacewalk.sh /opt/spacewalk.sh

# 6. Start supervisord
CMD [&quot;/usr/bin/supervisord&quot;, &quot;-c&quot;, &quot;/etc/supervisord.d/supervisord.conf&quot;]

# System Log
VOLUME /var/log

# PostgreSQL Data
VOLUME /var/lib/pgsql/data

# RPM repository
VOLUME /var/satellite

# Bootstrap directory
VOLUME /var/www/html/pub

# Port
EXPOSE 80 443
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;수정된 내용은 아래와 같습니다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;Update Spacewalk (Spacewalk 2.6 &amp;gt; Spacewalk 2.8)&lt;/li&gt;
    &lt;li&gt;Spacewalk 2.8 Repository 로 변경&lt;/li&gt;
    &lt;li&gt;spacewalk-setup 에 필요한 Answer file 을 최신버전의 요건에 맞게 수정하였습니다.&lt;/li&gt;
    &lt;li&gt;Container  로 실행할때, Spacewalk 가 정상적으로 시작되는지 확인이 가능하도록 내부 Script 를 수정하였습니다.&lt;/li&gt;
    &lt;li&gt;supervisord 를 통해, Spacewalk 를 시작하는데 해당 Log 를 debug 수준으로 설정해서 상태를 확인하는 것이 더욱 쉽게 만들었습니다.&lt;/li&gt;
    &lt;li&gt;localtime 을 Asia/Seoul 으로 설정 하였습니다.&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;위와 같이 수정한 Dockerfile 를 Build 합니다.&lt;/p&gt;

&lt;h1 id=&quot;build&quot;&gt;Build&lt;/h1&gt;
&lt;hr /&gt;

&lt;p&gt;Dockerfile 및 image 에 추가될 file 이 있는 Directory 에서 Build 를 진행합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# docker build --rm -t spacewalk .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;많은 시간이 소요되면서 Build 가 진행 됩니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
spacewalk           latest             f0e26b8230ad        13 days ago         1.04 GB
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 Build 가 완료 되었습니다.&lt;/p&gt;

&lt;h1 id=&quot;run&quot;&gt;Run&lt;/h1&gt;
&lt;hr /&gt;

&lt;p&gt;Build 가 된 이미지를 실행합니다. &lt;br /&gt;
먼저 Container 가 종료되고, 제거가 되더라도 Spacewalk 데이터를 보존 할 수 있게 Volume 으로 사용될 경로를 생성합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir -p /data/var/lib/pgsql/data
mkdir -p /data/var/satellite
mkdir -p /data/var/www/html/pub
mkdir -p /data/var/log/tomcat6
mkdir -p /data/var/log/httpd
mkdir -p /data/var/log/cobbler

chown 26:26 /data/var/lib/pgsql/data
chmod 777 -R /data/var
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Volume 생성이 다 되었다면,&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# docker run --privileged=true -d --name=&quot;spacewalk&quot; -p 80:80 -p 443:443 -v /data/var/log:/var/log -v /data/var/lib/pgsql/data:/var/lib/pgsql/data -v /data/var/satellite:/var/satellite -v /data/var/www/html/pub:/var/www/html/pub spacewalk
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 명령으로 Container 를 시작합니다.&lt;/p&gt;

&lt;p&gt;https://(Docker Host IP)  로 접속합니다.&lt;/p&gt;

&lt;p&gt;아래와 같이 Spacewalk 화면을 확인 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://chhanz.github.io/assets/images/post/2019-01-07-spacewalkdocker/0.png&quot; height=&quot;400&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;마치며&quot;&gt;마치며&lt;/h1&gt;
&lt;hr /&gt;

&lt;p&gt;위와 같이 나만의 특별한 Docker Image 를 생성 할 수 있었습니다.  &lt;br /&gt;
해당 Dockerfile 및 기타 필요한 file, 쉽게 Spacewalk 를 운영 할 수 있도록 만든 Script 들을 github 에 올려놨습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# git clone https://github.com/chhanz/spacewalk-docker-img.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;앞으로도 Opensource Software 를 손쉽게 사용 할 수 있도록 노력 하겠습니다.&lt;/p&gt;

&lt;p&gt;감사합니다.&lt;/p&gt;

&lt;h2 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h2&gt;
&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;Base Dockerfile : &lt;a href=&quot;https://bitbucket.org/bashell-com/spacewalk&quot;&gt;https://bitbucket.org/bashell-com/spacewalk&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spacewalk Document : &lt;a href=&quot;https://spacewalkproject.github.io/documentation.html&quot;&gt;https://spacewalkproject.github.io/documentation.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;chhanz github : &lt;a href=&quot;https://github.com/chhanz/spacewalk-docker-img&quot;&gt;https://github.com/chhanz/spacewalk-docker-img&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 07 Jan 2019 00:00:00 +0900</pubDate>
        <link>https://tech.osci.kr/spacewalk/2019/01/07/55869620/</link>
        <guid isPermaLink="true">https://tech.osci.kr/spacewalk/2019/01/07/55869620/</guid>
        
        <category>Spacewalk</category>
        
        
        <category>Spacewalk</category>
        
      </item>
    
      <item>
        <title>Confluence Addon 개발환경 자동화 VirtualBox + Vagrant</title>
        <description>&lt;p&gt;
 PC, Laptop, Notebook, Macbook, Localhost 내가 쓰는 컴퓨터의 이름들이다.
&lt;/p&gt;
&lt;p&gt;
 우리는 내 컴퓨터로 개발한 Code를 내 컴퓨터와 다른 서버에 릴리즈한다.
&lt;/p&gt;
&lt;p&gt;
 내 컴퓨터에서 잘되던 Code가 왜 운영 서버에서 문제가 될까?
&lt;/p&gt;
&lt;p&gt;
 이유는 다양하나 환경부터 맞춰야한다. 콩심은데 콩나고 팥심은데 팥나게 되어있다.
&lt;/p&gt;
&lt;p&gt;
 우리 팀은 Confluence, Jira Addon 개발 초기부터 이러한 고민을 했다.
&lt;/p&gt;
&lt;p&gt;
 구축하고 있는 환경을 소개한다.
&lt;/p&gt;
&lt;p&gt;
 &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
  &lt;img src=&quot;/assets/images/53347127/0&quot;/&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 내 컴퓨터상태 부터 보자 이것저것 설치했다가 지웠다가 다운로드 받았다가 지웠다가 매우 지저분한 상태이다.
&lt;/p&gt;
&lt;p&gt;
 &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
  &lt;img src=&quot;/assets/images/53347127/1&quot;/&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 ▲ 내 컴퓨터 상태..
&lt;/p&gt;
&lt;p&gt;
 &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
  &lt;img src=&quot;/assets/images/53347127/2&quot;/&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 ▲ 바탕화면은 지못미
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 이런 지저분한 환경에서 벗어나 순정의 상태? Java Application이라면 Nginx Tomcat만 설치되어 있는 깨긋한 상태가 되어야 한다.
&lt;/p&gt;
&lt;p&gt;
 운영 환경에서 문제가 발생하면 개발환경에서도 발생하는 재연환경을 만들어 보겠다.
&lt;/p&gt;
&lt;p&gt;
 우리 개발팀은 Atlassian 제품 addon을 개발하고 있으니 Confluence 개발환경을 만들어보겠다.
&lt;/p&gt;
&lt;p&gt;
 여기서 포인트는 우리가 팀원이 새로 추가되거나 컴퓨터를 포맷하거나 등등 여러 이벤트가 발생할 때마다
&lt;/p&gt;
&lt;p&gt;
 개발환경을 하나하나 다시 설치하고 설정해주는건 매우 엔지니어 스럽지 않다.
&lt;/p&gt;
&lt;p&gt;
 엔지니어는 1시간만에 끝낼 엑셀 작업을 자동화 하겠다고 6시간 코딩하는 쓸때없는 열정이 필요하다.
&lt;/p&gt;
&lt;p&gt;
 &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
  &lt;img src=&quot;/assets/images/53347127/3&quot;/&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 ▲ 자...동화!!
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 우리는 이런 자동화를 셋트로 만들어 놓을건데 이걸 프로비저닝(
 &lt;span style=&quot;color: rgb(34,34,34);&quot;&gt;
  provisioning)이라 부른다.
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;span style=&quot;color: rgb(34,34,34);&quot;&gt;
  &lt;em&gt;
   &lt;strong&gt;
    프로비저닝
   &lt;/strong&gt;
   &lt;span style=&quot;color: rgb(34,34,34);&quot;&gt;
    (provisioning
   &lt;/span&gt;
   &lt;span style=&quot;color: rgb(34,34,34);&quot;&gt;
    )은 사용자의 요구에 맞게 시스템 자원을 할당, 배치, 배포해 두었다가 필요 시 시스템을 즉시 사용할 수 있는 상태로 미리 준비해 두는 것을 말한다. 서버 자원 프로비저닝, OS 프로비저닝, 소프트웨어 프로비저닝, 스토리지 프로비저닝, 계정 프로비저닝 등이 있다. 수동으로 처리하는 '수동 프로비저닝'과 자동화 툴을 이용해 처리하는 '자동 프로비저닝'이 있다. - 위키 백과 -
   &lt;/span&gt;
  &lt;/em&gt;
  &lt;br/&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 시작은 개발, 테스트 환경이지만 AWS에서 운영 서버를 자동으로 만들면서 배포등 여러가지를할 수 있다.
&lt;/p&gt;
&lt;p&gt;
 이것이!! 클라우드 컴퓨팅의 장점 아니겠습니꽈!!
&lt;/p&gt;
&lt;p&gt;
 &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
  &lt;img src=&quot;/assets/images/53347127/4&quot;/&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 ▲ 프로비저닝 하려고 있는데~
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 준비물은 컴퓨터 + VirtualBox + Vagrant 끝.
&lt;/p&gt;
&lt;h1 id=&quot;ConfluenceAddon개발환경자동화VirtualBox+Vagrant-VirtualBox&quot;&gt;
 VirtualBox
&lt;/h1&gt;
&lt;p&gt;
 &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
  &lt;img src=&quot;/assets/images/53347127/5&quot;/&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 Oracle이 개발한 VirtualBox는 x86 가상화 소프트웨어다.
&lt;/p&gt;
&lt;p&gt;
 &lt;span style=&quot;color: rgb(34,34,34);&quot;&gt;
  우리는
  &lt;span style=&quot;color: rgb(34,34,34);&quot;&gt;
   버추얼박스 오픈소스에디션(OSE)을 사용해서 가상화 환경을 뚝딱 만들어 보겠다.
  &lt;/span&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;span style=&quot;color: rgb(34,34,34);&quot;&gt;
  다른 상용 가상화 소프트웨어와 견주어 볼
 &lt;/span&gt;
 &lt;span style=&quot;color: rgb(34,34,34);&quot;&gt;
  때, 버
 &lt;/span&gt;
 &lt;span style=&quot;color: rgb(34,34,34);&quot;&gt;
  추얼박스는 기능이 부족한 편이지만 개발환경 구성하는데 부족하지 않다.
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;span style=&quot;color: rgb(34,34,34);&quot;&gt;
  또한 인텔 VT 및 AMD AMD-V
  &lt;span style=&quot;color: rgb(34,34,34);&quot;&gt;
   하드웨어 보조 가상화를 지원한다.
  &lt;/span&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;span style=&quot;color: rgb(34,34,34);&quot;&gt;
  어라 6.0이 나왔다.
  &lt;a class=&quot;external-link&quot; href=&quot;https://www.virtualbox.org/wiki/Downloads&quot; rel=&quot;nofollow&quot;&gt;
   https://www.virtualbox.org/wiki/Downloads
  &lt;/a&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;span style=&quot;color: rgb(34,34,34);&quot;&gt;
  다운 받아서 설치해 보자. macOS 사용자는 설치 중간에 보안에 막히니 설치 전에 마음의 자물쇠를 풀어주자.
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
  &lt;img src=&quot;/assets/images/53347127/6&quot;/&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;span style=&quot;color: rgb(34,34,34);&quot;&gt;
  ▲ 자물쇠 풀고 가실게요~
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;h1 id=&quot;ConfluenceAddon개발환경자동화VirtualBox+Vagrant-Vagrant&quot;&gt;
 Vagrant
&lt;/h1&gt;
&lt;p&gt;
 &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
  &lt;img src=&quot;/assets/images/53347127/7&quot;/&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 Vagrant는 개발환경을 쉽게 만들어 준다. 참으로 고마운놈이다.
&lt;/p&gt;
&lt;p&gt;
 HashiCrop은 다양한 툴이있는데 운영환경 배포할 때는 테라포오오오옴을 써보자.
 &lt;a class=&quot;external-link&quot; href=&quot;https://www.hashicorp.com/products/terraform&quot; rel=&quot;nofollow&quot;&gt;
  https://www.hashicorp.com/products/terraform
 &lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
 각설하고 Vagrant 일단 설치
&lt;/p&gt;
&lt;p&gt;
 &lt;a class=&quot;external-link&quot; href=&quot;https://www.vagrantup.com/downloads.html&quot; rel=&quot;nofollow&quot;&gt;
  https://www.vagrantup.com/downloads.html
 &lt;/a&gt;
&lt;/p&gt;
&lt;h2 id=&quot;ConfluenceAddon개발환경자동화VirtualBox+Vagrant-Ubuntubionic&quot;&gt;
 Ubuntu bionic
&lt;/h2&gt;
&lt;p&gt;
 Virtualbox, Vagrant를 설치 했다면 Linux띄우는건 이제 일도 아니다.
&lt;/p&gt;
&lt;p&gt;
 Terminal에서 다음과 같이 명령어를 쳐보자.
&lt;/p&gt;
&lt;p&gt;
 &lt;strong&gt;
  &lt;span style=&quot;color: rgb(0,0,0);&quot;&gt;
   →  vagrant init ubuntu/bionic64
  &lt;/span&gt;
 &lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
 Vagrantfile이 생성됐다. vagrant는 Vagrantfile을 참조하여 Virtualbox를 띄운다.
&lt;/p&gt;
&lt;p&gt;
 지금은 init으로 기본 설정으로 생성했지만 직접 작성해도 된다. Ruby언어로 Ruby를 몰라도 설정이 간단해서 쉽게할 수 있다.
&lt;/p&gt;
&lt;p&gt;
 자 이제 박스를 띄워볼까.
&lt;/p&gt;
&lt;p&gt;
 &lt;strong&gt;
  → vagrant up
 &lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
 처음 띄우면 vagrant cloud에서 해당 이미지를 다운로드 받는다.
&lt;/p&gt;
&lt;p&gt;
 &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
  &lt;img src=&quot;/assets/images/53347127/8&quot;/&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 내가 갖고있는 이미지보다 최신버전이 있다면 알려주기도 한다.
&lt;/p&gt;
&lt;p&gt;
 여기서 잠깐!
&lt;/p&gt;
&lt;p&gt;
 Software CICD, 인프라 프로비저닝을 잘 준비한다면 최신버전의 OS를 언제든 테스트하고 적용을 쉽게할 수 있다.
&lt;/p&gt;
&lt;p&gt;
 보안 및 성능 이슈 해결을 쫄지말고 개발 - 테스트를 거쳐 운영에 적용해 보자.
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 박스가 다 뜨면 (엔지니어끼리 뜬다는 표현 ㅇㅈ?)
&lt;/p&gt;
&lt;p&gt;
 &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
  &lt;img src=&quot;/assets/images/53347127/9&quot;/&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;strong&gt;
  → vagrant ssh
 &lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
 로 ssh 접속을 해보자. 윈도우 cmd에서도 가능하다.
&lt;/p&gt;
&lt;p&gt;
 cmd에서 Linux 명령어를!!!
&lt;/p&gt;
&lt;h2 id=&quot;ConfluenceAddon개발환경자동화VirtualBox+Vagrant-Provisioning&quot;&gt;
 Provisioning
&lt;/h2&gt;
&lt;p&gt;
 이제 Box를 띄우면서 Confluence 설치까지 해보겠다.
&lt;/p&gt;
&lt;p&gt;
 설치 스크립트는 shell 스크립트로 작성되며 이 스크립트 기반으로 운영에 자동으로 설치할 수 있다.
&lt;/p&gt;
&lt;p&gt;
 기존 박스는 부셔버리자.
&lt;/p&gt;
&lt;p&gt;
 &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
  &lt;img src=&quot;/assets/images/53347127/10&quot;/&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;strong&gt;
  → vagrant destroy
 &lt;/strong&gt;
&lt;/p&gt;
&lt;h4 id=&quot;ConfluenceAddon개발환경자동화VirtualBox+Vagrant-Vagrantfile&quot;&gt;
 Vagrantfile
&lt;/h4&gt;
&lt;div class=&quot;code panel pdl conf-macro output-block&quot; data-hasbody=&quot;true&quot; data-macro-name=&quot;code&quot; style=&quot;border-width: 1px;&quot;&gt;
 &lt;div class=&quot;codeHeader panelHeader pdl&quot; style=&quot;border-bottom-width: 1px;&quot;&gt;
  &lt;b&gt;
   Vagrantfile
  &lt;/b&gt;
 &lt;/div&gt;
 &lt;div class=&quot;codeContent panelContent pdl&quot;&gt;
  &lt;pre class=&quot;syntaxhighlighter-pre&quot; data-syntaxhighlighter-params=&quot;brush: ruby; gutter: true; first-line: 1; theme: Midnight&quot; data-theme=&quot;Midnight&quot;&gt;# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure(2) do |config|
  config.vm.box = &quot;ubuntu/bionic64&quot;

  config.vm.provider &quot;virtualbox&quot; do |v|
    v.name = 'wiki'
    v.cpus = 2
    v.memory = 1024
  end

  config.vm.network &quot;private_network&quot;, ip: &quot;192.168.1.101&quot;
  config.vm.provision &quot;shell&quot;, path: &quot;provisioning.sh&quot;
end&lt;/pre&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p class=&quot;auto-cursor-target&quot;&gt;
 박스 이미지는 ubuntu bionic64로 설정한다.
&lt;/p&gt;
&lt;p&gt;
 다른 이미지를 사용하고 싶다면 google에 vagrant centos 7.3 검색해보면 나온다.
&lt;/p&gt;
&lt;p&gt;
 박스 이름은 wiki, cpu는 2개 메모리는 1G를 사용한다.
&lt;/p&gt;
&lt;p&gt;
 ip 주소도 할당할 수있는데 public, private 모두 가능하다.
&lt;/p&gt;
&lt;p&gt;
 나만 쓸꺼니 private로.. 부끄럽네요..
&lt;/p&gt;
&lt;p&gt;
 제일 중요한 provision shell에 provisining.sh를 사용하겠다. 명시를 한다.
&lt;/p&gt;
&lt;p&gt;
 같은 위치에 provisioning.sh 파일을 작성한다.
&lt;/p&gt;
&lt;h4 id=&quot;ConfluenceAddon개발환경자동화VirtualBox+Vagrant-provisioning.sh&quot;&gt;
 provisioning.sh
&lt;/h4&gt;
&lt;p&gt;
 박스가 뜨고 실행되는 스크립트로 여러가지를할 수 있다.
&lt;/p&gt;
&lt;p&gt;
 nginx도 설치하고~ mysql도 설치하고~ 손으로 하던걸 스크립트로할 수 있다.
&lt;/p&gt;
&lt;div class=&quot;code panel pdl conf-macro output-block&quot; data-hasbody=&quot;true&quot; data-macro-name=&quot;code&quot; style=&quot;border-width: 1px;&quot;&gt;
 &lt;div class=&quot;codeContent panelContent pdl&quot;&gt;
  &lt;pre class=&quot;syntaxhighlighter-pre&quot; data-syntaxhighlighter-params=&quot;brush: bash; gutter: false; theme: Confluence&quot; data-theme=&quot;Confluence&quot;&gt;#!/usr/bin/env bash
set -e
echo -e &quot;##############################\nLINE NUMBER: &quot;$LINENO&quot;\n##############################&quot;

HOSTNAME=&quot;wiki&quot;
echo ${HOSTNAME} &amp;gt; /etc/hostname
echo &quot;127.0.0.1 ${HOSTNAME}&quot; &amp;gt;&amp;gt; /etc/hosts
hostname ${HOSTNAME}
echo -e &quot;##############################\nLINE NUMBER: &quot;$LINENO&quot;\n##############################&quot;

fallocate -l 2G /swapfile
chmod 600 /swapfile
mkswap /swapfile
swapon /swapfile
echo &quot;/swapfile none    swap    sw  0   0&quot; &amp;gt;&amp;gt; /etc/fstab


echo &quot;root:1234qwer&quot; | chpasswd
sed -i 's/^PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config
service ssh restart

cp /etc/apt/sources.list /etc/apt/sources.list.backup
sed -i -e '/^deb/s#http://.*archive.ubuntu.com/ubuntu#http://ftp.daumkakao.com/ubuntu#' -e '/^deb/s#http://.*security.ubuntu.com/ubuntu#http://ftp.daumkakao.com/ubuntu#' /etc/apt/sources.list

apt-get -y clean
apt-get -y update


echo -e &quot;##############################\nLINE NUMBER: &quot;$LINENO&quot;\n##############################&quot;
echo &quot;install oracle java 1.8&quot;
echo oracle-java8-installer shared/accepted-oracle-license-v1-1 select true | debconf-set-selections &amp;amp;&amp;amp; \
add-apt-repository -y ppa:webupd8team/java &amp;amp;&amp;amp; \
apt-get update &amp;amp;&amp;amp; \
apt-get install -y oracle-java8-installer &amp;amp;&amp;amp; \
rm -rf /var/lib/apt/lists/* &amp;amp;&amp;amp; \
rm -rf /var/cache/oracle-jdk8-installer

echo 'export JAVA_HOME=/usr/lib/jvm/java-8-oracle' &amp;gt;&amp;gt; ~/.profile
echo 'export PATH=$PATH:/usr/lib/jvm/java-8-oracle/bin' &amp;gt;&amp;gt; ~/.profile
source ~/.profile

echo -e &quot;make home directory&quot;
mkdir /opt/confluence-home
cd /opt
wget https://www.atlassian.com/software/confluence/downloads/binary/atlassian-confluence-6.13.0.tar.gz

tar xvf atlassian-confluence-6.13.0.tar.gz

echo 'confluence.home=/opt/confluence-home/' &amp;gt;&amp;gt; \
/opt/atlassian-confluence-6.13.0/confluence\
/WEB-INF/classes/confluence-init.properties


/opt/atlassian-confluence-6.13.0/bin/start-confluence.sh

echo -e '  ___    ____     ____   ___       _  __  ____'
echo -e ' / _ \  / ___|   / ___| |_ _|     | |/ / |  _ \'
echo -e '| | | | \___ \  | |      | |      |   /  | |_) |'
echo -e '| |_| |  ___) | | |___   | |   _  | . \  |  _ &amp;lt;'
echo -e ' \___/  |____/   \____| |___| (_) |_|\_\ |_| \_\'&lt;/pre&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p class=&quot;auto-cursor-target&quot;&gt;
 이 스크립트는 host를 설정, swap, ssh 설정같은 리눅스 기본 설정을 하고
&lt;/p&gt;
&lt;p&gt;
 Oracle JDK 1.8을 설치한다.
&lt;/p&gt;
&lt;p&gt;
 JAVA_HOME설정이 필요하다. Confluence installer로 설치하는게 아니라 tar.gz 압축 파일을 풀어서 실행하기 때문이다.
&lt;/p&gt;
&lt;p&gt;
 Confluence 6.13 최신 버전을 wget으로 다운받고
&lt;/p&gt;
&lt;p&gt;
 압축을 풀어준다.
&lt;/p&gt;
&lt;p&gt;
 그리고 Confluence Home을 지정해준다.
&lt;/p&gt;
&lt;p&gt;
 그리고 Confluence를 실행한다.
&lt;/p&gt;
&lt;p&gt;
 &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
  &lt;img src=&quot;/assets/images/53347127/11&quot;/&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 그러면 마지막 Command line에 osci.kr 짜잔~
&lt;/p&gt;
&lt;p&gt;
 그리고 Vagrantfile에 설정한 ip 8090 포트로 접속해 보면 또 짜잔~
&lt;/p&gt;
&lt;p&gt;
 &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
  &lt;img src=&quot;/assets/images/53347127/12&quot;/&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;h1 id=&quot;ConfluenceAddon개발환경자동화VirtualBox+Vagrant-마무리&quot;&gt;
 &lt;span style=&quot;color: rgb(27,29,37);&quot;&gt;
  마무리
 &lt;/span&gt;
&lt;/h1&gt;
&lt;p&gt;
 동일한 환경에서 개발, 테스트하고  운영환경에 배포한다면 버그도 동일하게 재연되고 빠르게 고칠 수 있다.
&lt;/p&gt;
&lt;p&gt;
 (내 컴퓨터에서 잘되는데.. 이젠 그만!!)
&lt;/p&gt;
&lt;p&gt;
 더 나아가 AWS Cloud9같은 서비스는 개발환경을 Saas로 제공한다. 개발환경 구성하는 시간 조차 아까운 비즈니스 환경이 되가고 있다.
&lt;/p&gt;
&lt;p&gt;
 빨리 개발해서 빨리 시장에 내놓고 좋은 반응이 있는지 빠르게 확인해야 한다.
&lt;/p&gt;
&lt;p&gt;
 VirtualBox + Vagrant를 활용해서 개발환경 프로비저닝으로 인원이 추가되거나 환경이 변할 때 모두가 같은 환경으로 개발하는건 어떨까.
&lt;/p&gt;
&lt;p&gt;
 우리팀은 인프라 프로비저닝 스크립트를 Bitbucket(Git)로 관리하고 Bamboo로 빌드, 테스트, 실행한다.
&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 저희팀은 Atlassian 제품으로 팀의 협업, 프로젝트관리, 빌드, 배포에 도움을 주고있습니다. 물론! OpenSource도 같이 활용하고 있습니다.
&lt;/p&gt;
&lt;p&gt;
 팀에게 좋은 문화, 기술, 인프라, OS, Middleware 필요하시다면 #오픈소스컨설팅 이있습니다.
&lt;/p&gt;
&lt;p&gt;
 감사합니다.
&lt;/p&gt;
&lt;p&gt;
 &lt;a class=&quot;external-link&quot; href=&quot;http://osci.kr&quot; rel=&quot;nofollow&quot;&gt;
  http://osci.kr
 &lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;a class=&quot;external-link&quot; href=&quot;mailto:atlassian@osci.kr&quot; rel=&quot;nofollow&quot;&gt;
  atlassian@osci.kr
 &lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
 (이 문서는 Confluence에서 작성되었습니다.)
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
 &lt;br/&gt;
&lt;/p&gt;</description>
        <pubDate>Wed, 26 Dec 2018 00:00:00 +0900</pubDate>
        <link>https://tech.osci.kr/2018/12/26/53347127/</link>
        <guid isPermaLink="true">https://tech.osci.kr/2018/12/26/53347127/</guid>
        
        <category>atlassian</category>
        
        <category>confluence</category>
        
        <category>provisioning</category>
        
        
      </item>
    
      <item>
        <title>11 ~ 12월 Atlassian TroubleShooting 정리</title>
        <description>&lt;h1 id=&quot;id-11~12월AtlassianTroubleShooting정리-ActiveDirectory의그룹명변경시연동된Jira/Confluence의권한등에반영되지않는현상&quot;&gt;
 &lt;strong&gt;
  Active Directory의 그룹명 변경 시 연동된 Jira / Confluence의 권한 등에 반영되지 않는 현상
 &lt;/strong&gt;
&lt;/h1&gt;
&lt;ol&gt;
 &lt;li style=&quot;list-style-type: none;background-image: none;&quot;&gt;
  &lt;ul&gt;
   &lt;li&gt;
    Jira / Confluence에 그룹명 변경 기능이 없기에 AD에서 그룹명 변경 후 Sync 시에 Jira / Confluence에는 새로운 그룹으로 생성됨
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p class=&quot;auto-cursor-target&quot;&gt;
     Atlassian Support의 공식적인 답변은 안정성을 위해 기본적으로 하나씩 직접 다시 권한을 부여하는 방법을 권장하나, 큰 인스턴스에서 현실적으로 불가능하기에 Staging에서 테스트 및 DB백업 후 다음 쿼리작업을 실행
    &lt;/p&gt;
    &lt;div class=&quot;code panel pdl conf-macro output-block&quot; data-hasbody=&quot;true&quot; data-macro-name=&quot;code&quot; style=&quot;border-width: 1px;&quot;&gt;
     &lt;div class=&quot;codeHeader panelHeader pdl&quot; style=&quot;border-bottom-width: 1px;&quot;&gt;
      &lt;b&gt;
       Confluence
      &lt;/b&gt;
     &lt;/div&gt;
     &lt;div class=&quot;codeContent panelContent pdl&quot;&gt;
      &lt;pre class=&quot;syntaxhighlighter-pre&quot; data-syntaxhighlighter-params=&quot;brush: java; gutter: false; theme: Confluence&quot; data-theme=&quot;Confluence&quot;&gt;UPDATE spacepermissions
SET permgroupname = '&amp;lt;New Group Name&amp;gt;'
WHERE permgroupname IN ('&amp;lt;Old Group Name&amp;gt;')
AND spaceid IS NULL;
 
 
UPDATE spacepermissions
SET permgroupname = '&amp;lt;New Group Name&amp;gt;'
WHERE permgroupname IN ('&amp;lt;Old Group Name&amp;gt;')
AND spaceid IS NOT NULL;
 
 
UPDATE content_perm
SET groupname = '&amp;lt;New Group Name&amp;gt;'
WHERE groupname IN ('&amp;lt;Old Group Name&amp;gt;');&lt;/pre&gt;
     &lt;/div&gt;
    &lt;/div&gt;
    &lt;hr/&gt;
    &lt;div class=&quot;code panel pdl conf-macro output-block&quot; data-hasbody=&quot;true&quot; data-macro-name=&quot;code&quot; style=&quot;border-width: 1px;&quot;&gt;
     &lt;div class=&quot;codeHeader panelHeader pdl&quot; style=&quot;border-bottom-width: 1px;&quot;&gt;
      &lt;b&gt;
       Jira Postgresql
      &lt;/b&gt;
     &lt;/div&gt;
     &lt;div class=&quot;codeContent panelContent pdl&quot;&gt;
      &lt;pre class=&quot;syntaxhighlighter-pre&quot; data-syntaxhighlighter-params=&quot;brush: java; gutter: false; theme: Confluence&quot; data-theme=&quot;Confluence&quot;&gt;UPDATE cwd_group SET group_name=REPLACE(group_name,&quot;&amp;lt;old-group-name&amp;gt;&quot;,&quot;&amp;lt;new-group-name&amp;gt;&quot;) WHERE INSTR(group_name, &quot;&amp;lt;old-group-name&amp;gt;&quot;) &amp;gt; 0
UPDATE cwd_group SET lower_group_name=REPLACE(lower_group_name,&quot;&amp;lt;old-group-name&amp;gt;&quot;,&quot;&amp;lt;new-group-name&amp;gt;&quot;) WHERE INSTR(lower_group_name, &quot;&amp;lt;old-group-name&amp;gt;&quot;) &amp;gt; 0
UPDATE cwd_membership SET parent_name=REPLACE(parent_name,&quot;&amp;lt;old-group-name&amp;gt;&quot;,&quot;&amp;lt;new-group-name&amp;gt;&quot;) WHERE INSTR(parent_name, &quot;&amp;lt;old-group-name&amp;gt;&quot;) &amp;gt; 0
UPDATE cwd_membership SET lower_parent_name=REPLACE(lower_parent_name,&quot;&amp;lt;old-group-name&amp;gt;&quot;,&quot;&amp;lt;new-group-name&amp;gt;&quot;) WHERE INSTR(lower_parent_name, &quot;&amp;lt;old-group-name&amp;gt;&quot;) &amp;gt; 0
UPDATE filtersubscription SET groupname=REPLACE(groupname,&quot;&amp;lt;old-group-name&amp;gt;&quot;,&quot;&amp;lt;new-group-name&amp;gt;&quot;) WHERE INSTR(groupname, &quot;&amp;lt;old-group-name&amp;gt;&quot;) &amp;gt; 0
UPDATE jiraaction SET actionlevel=REPLACE(actionlevel,&quot;&amp;lt;old-group-name&amp;gt;&quot;,&quot;&amp;lt;new-group-name&amp;gt;&quot;) WHERE INSTR(actionlevel, &quot;&amp;lt;old-group-name&amp;gt;&quot;) &amp;gt; 0
UPDATE notification SET notif_parameter=REPLACE(notif_parameter,&quot;&amp;lt;old-group-name&amp;gt;&quot;,&quot;&amp;lt;new-group-name&amp;gt;&quot;) WHERE INSTR(notif_parameter, &quot;&amp;lt;old-group-name&amp;gt;&quot;) &amp;gt; 0
UPDATE projectroleactor SET ROLETYPEPARAMETER=REPLACE(ROLETYPEPARAMETER,&quot;&amp;lt;old-group-name&amp;gt;&quot;,&quot;&amp;lt;new-group-name&amp;gt;&quot;) WHERE INSTR(ROLETYPEPARAMETER, &quot;&amp;lt;old-group-name&amp;gt;&quot;) &amp;gt; 0
UPDATE searchrequest SET groupname=REPLACE(groupname,&quot;&amp;lt;old-group-name&amp;gt;&quot;,&quot;&amp;lt;new-group-name&amp;gt;&quot;) WHERE INSTR(groupname, &quot;&amp;lt;old-group-name&amp;gt;&quot;) &amp;gt; 0
UPDATE searchrequest SET reqcontent=REPLACE(reqcontent,&quot;&amp;lt;old-group-name&amp;gt;&quot;,&quot;&amp;lt;new-group-name&amp;gt;&quot;) WHERE INSTR(reqcontent, &quot;&amp;lt;old-group-name&amp;gt;&quot;) &amp;gt; 0
UPDATE sharepermissions SET PARAM1=REPLACE(PARAM1,&quot;&amp;lt;old-group-name&amp;gt;&quot;,&quot;&amp;lt;new-group-name&amp;gt;&quot;) WHERE INSTR(PARAM1, &quot;&amp;lt;old-group-name&amp;gt;&quot;) &amp;gt; 0
UPDATE worklog SET grouplevel=REPLACE(grouplevel,&quot;&amp;lt;old-group-name&amp;gt;&quot;,&quot;&amp;lt;new-group-name&amp;gt;&quot;) WHERE INSTR(grouplevel, &quot;&amp;lt;old-group-name&amp;gt;&quot;) &amp;gt; 0

UPDATE globalpermissionentry gpe1
SET group_id = 'NEW_GROUP'
WHERE gpe1.group_id = 'OLD_GROUP'
AND NOT EXISTS
(
    SELECT *
    FROM globalpermissionentry gpe2
    WHERE gpe2.permission = gpe1.permission
    AND gpe2.group_id = 'NEW_GROUP'
)

UPDATE licenserolesgroup lrg1
SET group_id = 'NEW_GROUP'
WHERE lrg1.group_id = 'OLD_GROUP'
AND NOT EXISTS
(
    SELECT *
    FROM licenserolesgroup lrg2
    WHERE lrg2.license_role_name = lrg1.license_role_name
    AND lrg2.group_id = 'NEW_GROUP'
)

UPDATE projectroleactor pra1
SET roletypeparameter = 'NEW_GROUP'
WHERE pra1.roletypeparameter = 'OLD_GROUP'
AND pra1.roletype = 'atlassian-group-role-actor'
AND NOT EXISTS
(
    SELECT *
    FROM projectroleactor pra2
    WHERE pra2.pid = pra1.pid
    AND pra2.projectroleid = pra1.projectroleid
    AND pra2.roletypeparameter = 'NEW_GROUP'
    AND pra2.roletype = 'atlassian-group-role-actor'
)

UPDATE schemeissuesecurities sis1
SET sec_parameter = 'NEW_GROUP'
WHERE sis1.sec_parameter = 'OLD_GROUP'
AND sis1.sec_type = 'group'
AND NOT EXISTS
(
    SELECT *
    FROM schemeissuesecurities sis2
    WHERE sis2.scheme = sis1.scheme
    AND sis2.security = sis1.security
    AND sis2.sec_parameter = 'NEW_GROUP'
    AND sis2.sec_type = 'group'
)

UPDATE schemepermissions sp1
SET perm_parameter = 'NEW_GROUP'
WHERE sp1.perm_parameter = 'OLD_GROUP'
AND sp1.perm_type = 'group'
AND NOT EXISTS
(
    SELECT *
    FROM schemepermissions sp2
    WHERE sp2.scheme = sp1.scheme
    AND (sp2.permission = sp1.permission OR sp2.permission_key = sp1.permission_key)
    AND sp2.perm_parameter = 'NEW_GROUP'
    AND sp2.perm_type = 'group'
)

UPDATE sharepermissions sp1
SET param1 = 'NEW_GROUP'
WHERE sp1.param1 = 'OLD_GROUP'
AND sp1.sharetype = 'group'
AND NOT EXISTS
(
    SELECT *
    FROM sharepermissions sp2
    WHERE sp2.entityid = sp1.entityid
    AND sp2.entitytype = sp1.entitytype
    AND sp2.param1 = 'NEW_GROUP'
    AND sp2.sharetype = 'group'
)

SELECT *
FROM schemeissuesecurities
WHERE sec_type = 'groupCF'

SELECT *
FROM schemepermissions
WHERE perm_type = 'groupCF'

select * from customfieldvalue where stringvalue like '%&amp;lt;groupname&amp;gt;%';
select * from customfieldoption where customvalue like '%&amp;lt;groupname&amp;gt;%';
select * from customfield where id = '&amp;lt;customfield&amp;gt;';&lt;/pre&gt;
     &lt;/div&gt;
    &lt;/div&gt;
    &lt;hr/&gt;
    &lt;div class=&quot;code panel pdl conf-macro output-block&quot; data-hasbody=&quot;true&quot; data-macro-name=&quot;code&quot; style=&quot;border-width: 1px;&quot;&gt;
     &lt;div class=&quot;codeHeader panelHeader pdl&quot; style=&quot;border-bottom-width: 1px;&quot;&gt;
      &lt;b&gt;
       Jira Mysql
      &lt;/b&gt;
     &lt;/div&gt;
     &lt;div class=&quot;codeContent panelContent pdl&quot;&gt;
      &lt;pre class=&quot;syntaxhighlighter-pre&quot; data-syntaxhighlighter-params=&quot;brush: java; gutter: false; theme: Confluence&quot; data-theme=&quot;Confluence&quot;&gt;UPDATE cwd_group SET group_name=REPLACE(group_name,&quot;&amp;lt;Old Group Name&amp;gt;&quot;,&quot;&amp;lt;New Group Name&amp;gt;&quot;) WHERE INSTR(group_name, &quot;&amp;lt;Old Group Name&amp;gt;&quot;) &amp;gt; 0
UPDATE cwd_group SET lower_group_name=REPLACE(lower_group_name,&quot;&amp;lt;Old Group Name&amp;gt;&quot;,&quot;&amp;lt;New Group Name&amp;gt;&quot;) WHERE INSTR(lower_group_name, &quot;&amp;lt;Old Group Name&amp;gt;&quot;) &amp;gt; 0
UPDATE cwd_membership SET parent_name=REPLACE(parent_name,&quot;&amp;lt;Old Group Name&amp;gt;&quot;,&quot;&amp;lt;New Group Name&amp;gt;&quot;) WHERE INSTR(parent_name, &quot;&amp;lt;Old Group Name&amp;gt;&quot;) &amp;gt; 0
UPDATE cwd_membership SET lower_parent_name=REPLACE(lower_parent_name,&quot;&amp;lt;Old Group Name&amp;gt;&quot;,&quot;&amp;lt;New Group Name&amp;gt;&quot;) WHERE INSTR(lower_parent_name, &quot;&amp;lt;Old Group Name&amp;gt;&quot;) &amp;gt; 0
UPDATE filtersubscription SET groupname=REPLACE(groupname,&quot;&amp;lt;Old Group Name&amp;gt;&quot;,&quot;&amp;lt;New Group Name&amp;gt;&quot;) WHERE INSTR(groupname, &quot;&amp;lt;Old Group Name&amp;gt;&quot;) &amp;gt; 0
UPDATE jiraaction SET actionlevel=REPLACE(actionlevel,&quot;&amp;lt;Old Group Name&amp;gt;&quot;,&quot;&amp;lt;New Group Name&amp;gt;&quot;) WHERE INSTR(actionlevel, &quot;&amp;lt;Old Group Name&amp;gt;&quot;) &amp;gt; 0
UPDATE notification SET notif_parameter=REPLACE(notif_parameter,&quot;&amp;lt;Old Group Name&amp;gt;&quot;,&quot;&amp;lt;New Group Name&amp;gt;&quot;) WHERE INSTR(notif_parameter, &quot;&amp;lt;Old Group Name&amp;gt;&quot;) &amp;gt; 0
UPDATE projectroleactor SET ROLETYPEPARAMETER=REPLACE(ROLETYPEPARAMETER,&quot;&amp;lt;Old Group Name&amp;gt;&quot;,&quot;&amp;lt;New Group Name&amp;gt;&quot;) WHERE INSTR(ROLETYPEPARAMETER, &quot;&amp;lt;Old Group Name&amp;gt;&quot;) &amp;gt; 0
UPDATE searchrequest SET groupname=REPLACE(groupname,&quot;&amp;lt;Old Group Name&amp;gt;&quot;,&quot;&amp;lt;New Group Name&amp;gt;&quot;) WHERE INSTR(groupname, &quot;&amp;lt;Old Group Name&amp;gt;&quot;) &amp;gt; 0
UPDATE searchrequest SET reqcontent=REPLACE(reqcontent,&quot;&amp;lt;Old Group Name&amp;gt;&quot;,&quot;&amp;lt;New Group Name&amp;gt;&quot;) WHERE INSTR(reqcontent, &quot;&amp;lt;Old Group Name&amp;gt;&quot;) &amp;gt; 0
UPDATE sharepermissions SET PARAM1=REPLACE(PARAM1,&quot;&amp;lt;Old Group Name&amp;gt;&quot;,&quot;&amp;lt;New Group Name&amp;gt;&quot;) WHERE INSTR(PARAM1, &quot;&amp;lt;Old Group Name&amp;gt;&quot;) &amp;gt; 0
UPDATE worklog SET grouplevel=REPLACE(grouplevel,&quot;&amp;lt;Old Group Name&amp;gt;&quot;,&quot;&amp;lt;New Group Name&amp;gt;&quot;) WHERE INSTR(grouplevel, &quot;&amp;lt;Old Group Name&amp;gt;&quot;) &amp;gt; 0
 
 
UPDATE globalpermissionentry gpe1
SET gpe1.group_id = '&amp;lt;New Group Name&amp;gt;'
WHERE gpe1.group_id = '&amp;lt;Old Group Name&amp;gt;'
AND NOT EXISTS
(select * from (
    SELECT *
    FROM globalpermissionentry gpe2
    WHERE gpe2.permission = (select permission from globalpermissionentry gpe3 where gpe3.group_id = '&amp;lt;Old Group Name&amp;gt;')
    AND gpe2.group_id = '&amp;lt;New Group Name&amp;gt;'
) as temp_table );
  
  
UPDATE licenserolesgroup lrg1
SET lrg1.group_id = '&amp;lt;New Group Name&amp;gt;'
WHERE lrg1.group_id = '&amp;lt;Old Group Name&amp;gt;'
AND NOT EXISTS
(select * from (
    SELECT *
    FROM licenserolesgroup lrg2
    WHERE lrg2.license_role_name = (select license_role_name from licenserolesgroup lrg3 where lrg3.group_id = '&amp;lt;Old Group Name&amp;gt;')
    AND lrg2.group_id = '&amp;lt;New Group Name&amp;gt;'
) as temp_table );
  
  
UPDATE projectroleactor pra1
SET roletypeparameter = '&amp;lt;New Group Name&amp;gt;'
WHERE pra1.roletypeparameter = '&amp;lt;Old Group Name&amp;gt;'
AND pra1.roletype = 'atlassian-group-role-actor'
AND NOT EXISTS
(
select *
from (
SELECT pra2.*
FROM projectroleactor pra2
Join projectroleactor pra3
on pra2.pid = pra3.pid and pra2.projectroleid = pra3.projectroleid
AND pra2.roletypeparameter = '&amp;lt;New Group Name&amp;gt;'AND pra2.roletype = 'atlassian-group-role-actor'
)as aaa
);
  
  
UPDATE schemeissuesecurities sis1
SET sec_parameter = '&amp;lt;New Group Name&amp;gt;'
WHERE sis1.sec_parameter = '&amp;lt;Old Group Name&amp;gt;'
AND sis1.sec_type = 'group'
AND NOT EXISTS
(
SELECT *
FROM (
SELECT sis2.*
FROM schemeissuesecurities sis2
JOIN schemeissuesecurities sis3
ON sis2.scheme = sis3.scheme
AND sis2.security = sis3.security
AND sis2.sec_parameter = '&amp;lt;New Group Name&amp;gt;'
AND sis2.sec_type = 'group'
) as aaa
);
  
  
UPDATE schemepermissions sp1
SET perm_parameter = '&amp;lt;New Group Name&amp;gt;'
WHERE sp1.perm_parameter = '&amp;lt;Old Group Name&amp;gt;'
AND sp1.perm_type = 'group'
AND NOT EXISTS
(
SELECT *
FROM (
SELECT sp2.*
FROM schemepermissions sp2
JOIN schemepermissions sp3
ON sp2.scheme = sp3.scheme
AND sp2.permission = sp3.permission
AND sp2.perm_parameter = '&amp;lt;New Group Name&amp;gt;'
AND sp2.perm_type = 'group'
) as aaa
);
  
  
UPDATE sharepermissions sp1
SET param1 = '&amp;lt;New Group Name&amp;gt;'
WHERE sp1.param1 = '&amp;lt;Old Group Name&amp;gt;'
AND sp1.sharetype = 'group'
AND NOT EXISTS
(
SELECT *
FROM (
SELECT sp2.*
FROM sharepermissions sp2
JOIN sharepermissions sp3
ON sp2.entityid = sp3.entityid
AND sp2.entitytype = sp3.entitytype
AND sp2.param1 = '&amp;lt;New Group Name&amp;gt;'
AND sp2.sharetype = 'group'
) as aaa
);&lt;/pre&gt;
     &lt;/div&gt;
    &lt;/div&gt;
    &lt;hr/&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p class=&quot;auto-cursor-target&quot;&gt;
     Jira의 View All Board 클릭 시 에러 해결을 위해 추가로 다음의 작업이 필요
    &lt;/p&gt;
    &lt;div class=&quot;code panel pdl conf-macro output-block&quot; data-hasbody=&quot;true&quot; data-macro-name=&quot;code&quot; style=&quot;border-width: 1px;&quot;&gt;
     &lt;div class=&quot;codeContent panelContent pdl&quot;&gt;
      &lt;pre class=&quot;syntaxhighlighter-pre&quot; data-syntaxhighlighter-params=&quot;brush: java; gutter: false; theme: Confluence&quot; data-theme=&quot;Confluence&quot;&gt;select distinct `KEY` from AO_60DB71_BOARDADMINS where TYPE = 'GROUP' and `KEY` not in (select group_name from cwd_group);
select NAME, ID  from AO_60DB71_RAPIDVIEW WHERE ID IN (select RAPID_VIEW_ID from AO_60DB71_BOARDADMINS WHERE `KEY` = '&amp;lt;1번 쿼리에서 출력된 그룹명&amp;gt;');
http://&amp;lt;Jira BaseURL&amp;gt;/secure/RapidView.jspa?rapidView=&amp;lt;1번 쿼리에서 출력된 ID&amp;gt;&amp;amp;tab=filter

Administrators 클릭 및 edit으로 해당 그룹 삭제&lt;/pre&gt;
     &lt;/div&gt;
    &lt;/div&gt;
    &lt;p class=&quot;auto-cursor-target&quot;&gt;
     &lt;a class=&quot;external-link&quot; href=&quot;https://jira.atlassian.com/browse/JSWSERVER-15924&quot; rel=&quot;nofollow&quot;&gt;
      https://jira.atlassian.com/browse/JSWSERVER-15924
     &lt;/a&gt;
    &lt;/p&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;id-11~12월AtlassianTroubleShooting정리-Jira업그레이드후,HealthCheckIndexing에러및Re-index불가능한현상&quot;&gt;
 &lt;strong&gt;
  Jira 업그레이드 후, Health Check Indexing에러 및 Re-index 불가능한 현상
 &lt;/strong&gt;
&lt;/h1&gt;
&lt;ol&gt;
 &lt;li style=&quot;list-style-type: none;background-image: none;&quot;&gt;
  &lt;ul&gt;
   &lt;li&gt;
    Health check에 다음과 같은 메세지가 출력되며, 인덱싱이 실패함
   &lt;/li&gt;
   &lt;li&gt;
    The issue index is inconsistent with the database state. Database has (898,665) issues but the index has (898,400) issues
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p class=&quot;auto-cursor-target&quot;&gt;
     Jira 종료 및 DB백업 후 쿼리 수행 (Update의 CREATED 부분에는 임의의 날짜를 입력
    &lt;/p&gt;
    &lt;div class=&quot;code panel pdl conf-macro output-block&quot; data-hasbody=&quot;true&quot; data-macro-name=&quot;code&quot; style=&quot;border-width: 1px;&quot;&gt;
     &lt;div class=&quot;codeContent panelContent pdl&quot;&gt;
      &lt;pre class=&quot;syntaxhighlighter-pre&quot; data-syntaxhighlighter-params=&quot;brush: java; gutter: false; theme: Confluence&quot; data-theme=&quot;Confluence&quot;&gt;select distinct issueid from changegroup where CREATED is null;
update changegroup set CREATED='2015-01-01' where CREATED is null;&lt;/pre&gt;
     &lt;/div&gt;
    &lt;/div&gt;
    &lt;p class=&quot;auto-cursor-target&quot;&gt;
     &lt;a class=&quot;external-link&quot; href=&quot;https://confluence.atlassian.com/jirakb/cloning-issues-or-indexing-jira-throws-indexing-completed-with-1-errors-718669171.html&quot; rel=&quot;nofollow&quot;&gt;
      https://confluence.atlassian.com/jirakb/cloning-issues-or-indexing-jira-throws-indexing-completed-with-1-errors-718669171.html
     &lt;/a&gt;
    &lt;/p&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;id-11~12월AtlassianTroubleShooting정리-Jira의Log에다음과같은Warning이많이발생하는경우&quot;&gt;
 &lt;strong&gt;
  Jira의 Log에 다음과 같은 Warning이 많이 발생하는 경우
 &lt;/strong&gt;
&lt;/h1&gt;
&lt;ol&gt;
 &lt;li style=&quot;list-style-type: none;background-image: none;&quot;&gt;
  &lt;ul&gt;
   &lt;li&gt;
    2018-12-19 03:17:17,228 http-nio-8080-exec-14 WARN admin 197x1172x1 1z4wpv 192.168.0.139 /secure/WorkflowUIDispatcher.jspa [c.i.jmcf.fields.AbstractTransitionSearchField] com.innovalog.jmcf.fields.ActionExecutionTimeField: could not find transition name or ID in custom field description for miscTran Navigate to the following URL to edit the custom field description:
    &lt;a class=&quot;external-link&quot; href=&quot;http://192.168.1.118:8080/secure/admin/EditCustomField!default.jspa?id=10201&quot; rel=&quot;nofollow&quot;&gt;
     http://192.168.1.118:8080/secure/admin/EditCustomField!default.jspa?id=10201
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    Misc Custom Field Plugin사용 시 Description을 제대로 기입하지 않아 발생하는 문제로 다음처럼 기입 시 해결됨
   &lt;/li&gt;
   &lt;li&gt;
    &lt;span class=&quot;confluence-embedded-file-wrapper confluence-embedded-manual-size&quot;&gt;
     &lt;img src=&quot;/assets/images/53346876/0&quot;/&gt;
    &lt;/span&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a class=&quot;external-link&quot; href=&quot;https://innovalog.atlassian.net/wiki/spaces/JMCF/overview#JIRAMiscCustomFields-transitiondatefield&quot; rel=&quot;nofollow&quot;&gt;
     https://innovalog.atlassian.net/wiki/spaces/JMCF/overview#JIRAMiscCustomFields-transitiondatefield
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ol&gt;</description>
        <pubDate>Wed, 26 Dec 2018 00:00:00 +0900</pubDate>
        <link>https://tech.osci.kr/2018/12/26/53346876/</link>
        <guid isPermaLink="true">https://tech.osci.kr/2018/12/26/53346876/</guid>
        
        
      </item>
    
  </channel>
</rss>
